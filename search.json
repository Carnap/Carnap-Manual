[
  {
    "objectID": "index.html",
    "href": "index.html",
    "title": "The Carnap Manual",
    "section": "",
    "text": "Preface\nThis is a guide to using Carnap for teaching and learning logic.\nHere’s an example of what Carnap can do:\n Show ((P -&gt; Q)-&gt; P) -&gt; P \nIt’s still very much a work in progress. Please consider contributing!"
  },
  {
    "objectID": "quickstart.html#get-an-account",
    "href": "quickstart.html#get-an-account",
    "title": "1  Quick Start Guide",
    "section": "1.1 Get an account",
    "text": "1.1 Get an account\nClick the login link located in the upper right hand corner of most Carnap pages, and log in with a Google account (a Gmail account works, but you can also make a Google account with a different email).\nEmail Graham Leach-Krouse at gleachkr@gmail.com using your institutional email address to request instructor status."
  },
  {
    "objectID": "quickstart.html#make-your-first-assignment",
    "href": "quickstart.html#make-your-first-assignment",
    "title": "1  Quick Start Guide",
    "section": "1.2 Make your first assignment",
    "text": "1.2 Make your first assignment\n\n1.2.1 Carnap’s assignment format\nAn assignment in Carnap is a document which may include text (e.g., instructions for your students, where to find the relevant material in your textbook, etc.) but mainly will include Carnap code blocks. Each Carnap code block corresponds to one problem. They can be of any of the types listed on the main page. They are:\n\nSyntax Checking\nTranslations\nTruth Tables\nDerivations\nModel Checking\nQualitative Problems, e.g., multiple-choice\n\nEach assignment document is a plain text file formatted in Markdown, a simple markup language. (Typically, the extension of Markdown text files is .md.) You can find a comprehensive introduction in the Markdown Guide including a list of editors that support Markdown. For a quick reference, try Learn Markdown in 60 seconds. Any plain text editor is fine, but Markdown (and Carnap) are sticklers about spaces and newlines in Markdown documents. So make sure your editor does not automatically wrap text.\n\n\n1.2.2 Downloading shared documents\nYou can start with an existing document another instructor has shared. A list of shared documents can be found at carnap.io/shared. Each shared document has a download icon at the bottom (). If you click on that, you can save the source Markdown document of the shared page to your own computer. You can then edit it.\nFor instance, here is a sample assignment which you can download by adding /download to the end of the URL in your browser (or just click here).\n\n\n1.2.3 Converting existing problem sets\nIf you already have problem sets in another format, you can turn them into Markdown for use on Carnap. If your problem sets are written in Word, there is a Markdown export plugin: Writeage. Or, select Save As (Plain Text) and then recreate the formatting in the resulting text file. If your sheets are in LaTeX you can use Pandoc. Here is an online converter (select from LaTeX to Markdown (pandoc)).\n\n\n1.2.4 Carnap code blocks\nNext you turn each problem into a Carnap code block. For instance, a translation exercise will be put into your Markdown document as:\n~~~{.Translate .Prop}\n3.1 P/\\Q : People want to know what's going on and questions are unavoidable\n~~~\n.Translate tells Carnap that you want a translation exercise. .Prop tells Carnap it should use its propositional equivalence checker to test if the solution provided by the student is equivalent to the solution you provide. The number 3.1 indicates the exercise number. It is followed by a model solution. The colon separates the solution from the text that will be presented for translation. The result of the above is:\n\n\n3.1\n\n\n\n\n\nEach Carnap code block takes a number of options as well, which are described in the linked pages above. The most important one is perhaps the system attribute, which determines the syntax and symbols used for sentences entered as solutions which Carnap will accept, and how Carnap formats formulas it displays to the student.\nFor instance,\n~~~{.SynChecker .Match system=\"LogicBookSD\"} \n1.1 (P /\\ Q) -&gt; R \n~~~\n~~~{.SynChecker .Match system=\"thomasBolducAndZachTFL2019\"} \n1.1 (P /\\ Q) -&gt; R \n~~~\nwill generate:\n\n\n1.1\n\n\n\n\n\n\n\n1.1\n\n\n\n\n\nThe attributes LogicBookSD and thomasBolducAndZachTFL correspond to the syntax and conventions of The Logic Book, and forall x: Calgary, respectively. The available system attributes are described on the Systems page.\nOptions common to all exercise types, such as how many points a problem is worth, are described on the Carnap Pandoc page. There you will also find a more in-depth description of the format of Carnap’s documents."
  },
  {
    "objectID": "quickstart.html#upload-and-test-your-document",
    "href": "quickstart.html#upload-and-test-your-document",
    "title": "1  Quick Start Guide",
    "section": "1.3 Upload and test your document",
    "text": "1.3 Upload and test your document\nOn your Instructor Page on Carnap, there is a Manage Uploaded Documents tab where you will upload your finished assignment documents.\n\n\n\nDocument Upload tab\n\n\nOnce a document is uploaded, it will show up in your Instructor Page in the Manage Uploaded Documents tab. If you click on the file name, Carnap will display the document to you the same way that students will see it. You might first have to go through a bit of proof-reading. If the page contains an error message instead of the problem you expect, it’s probably because you misspelled an option or did not use the correct syntax for your selected system."
  },
  {
    "objectID": "quickstart.html#set-up-a-course-and-assign-your-problems",
    "href": "quickstart.html#set-up-a-course-and-assign-your-problems",
    "title": "1  Quick Start Guide",
    "section": "1.4 Set up a course and assign your problems",
    "text": "1.4 Set up a course and assign your problems\nOnce you are ready to give your problem sets to students, you have to make a course for them to enrol in. You do this on your Instructor Page in the the Manage Courses card. You will provide your students with an enrolment link which you can find at the bottom of your class card. This video describes what this process looks like for a student. See the documentation of the Carnap Dashboard for more detail.\nWhen you (and your students) are ready, you can assign any of your uploaded documents to your students. Carnap will allow them to complete and submit them. Once a problem is submitted, Carnap records the point value you have given to the problems as a score for the student. Students can see on their Student Home page which problems the have submitted and how many points they earned. You can also (in the course card for your course) see a list of enrolled students. Below the student roster, there is a link to download grades (per assignment, per problem). Your course card will look something like this:\n\n\n\nThe course card"
  },
  {
    "objectID": "faq.html",
    "href": "faq.html",
    "title": "2  Frequently Asked Questions",
    "section": "",
    "text": "How can I help my students recognize subproof boundaries better?\n\nCarnap has a few options for indicating subproof boundaries. The two main methods are to either render the proof separately from the input, or to overlay indentation indicators that correspond to subproof boundaries.\nThe rendering option looks like this (details depending on the system):\n|1.Show Q-&gt;P\n|2.   Q         :AS\n|3.   P         :PR\n|4.:CD 3\nand the overlay option looks like this (details depending on the system):\n P       :AS\n P/\\P    :&I 1 1\n P       :&E 2\nP-&gt;P     :-&gt;I 1-3\nYou can find details about overlaying indentation guides here, and details about the rendering option here.\n\n\n\nHow can I encourage my students to slow down and think when writing derivations?\n\nThis is a good question. One option to discourage students from typing before they think is to slow down the rate at which they get feedback. You can require a button-press for feedback on a proof, or turn off feedback about correctness entirely by using the settings feedback=\"manual\" or feedback=\"syntaxonly\" respectively. Here’s the link for more details on the feedback settings.\n\n\n\nHow can I use Carnap to give students an exam?\n\nIf you’re using Carnap, an exam is an assignment just like any other assignment. But depending on the type of format you want your exam to have, you may want to set some options on that assignment.\nIf you’d like your students to be able to submit incorrect answers, rather than having Carnap warn them when something is wrong, then you can add exam to the options attribute of your exercises, writing them something like this:\n~~~{.ProofChecker options=\"fonts exam\" } \n1.1 :|-: P-&gt;P\n~~~\nAll the exercise types except for the syntax-checker support the exam option; you can also set other options to disable checking or allow only certain types of feedback on the unsubmitted work. Check the documentation for individual exercise types to get the details on how to do that.\nIf your students are allowed to submit incorrect answers, you might want to review them and assign partial credit. You can do that using the review area that’s associated with each assignment. There are also a few assignment settings that might also be helpful for an exam. In particular,\n\nyou can set a timer, so that exam needs to be completed in a certain number of minutes after its opened, and\nyou can set a “release date” for grades, so that students can only view grades after everyone has completed the exam.\n\nDetails on the review area, and assignment settings, can be found here: here.\nYou may also want to know how reset the exam timer for certain students, or how to offer accessibility accommodations for certain students. Information on how to do that can be found here\n\n\n\nHow can I adjust deadlines for assignments?\n\nThere are two major deadlines associated with an assignment. One is the due date. This is displayed on each student’s user page, and determines whether work counts as late. The other is the visible date. After the visible date passes, the assignment is no longer visible to the student, and can’t be accessed. You can configure both of these dates by pressing the small “gear” icon that appears next to the assignment listing in the “manage assignments” tab on the instructor page.\nYou can also adjust deadlines per-student in two ways. One is to offer the student an extension. You can do this by clicking the “calendar plus” icon that appears next to the student’s name in the class roster on your instructor page. The extension will override both the due-date and the visibility date for that student. You can also set a deadline adjustment policy for a specific student by clicking the “clock” icon next to the student’s name.\n\n\n\nHow can I control student credit for late assignments?\n\nBy default, students receive half-credit (rounding down) for problems that are submitted after the due date, but while the problem is still visible. However, late credit is configurable using the late-credit option, which applies to all exercises. You can set the late-credit option like this:\n~~~{.SomeProblemType late-credit=4} \n1.1 SOME PROBLEM\n~~~\n\n\n\nHow can I control when grades are released?\n\nOrdinarily, a student’s score for a problem is visible (on the student’s user page) immediately after the student submits a problem. In some situations (for example, during an exam), this can be undesirable.\nIf you want to release grades only after a certain time and date, then you can set a “Release Grades After” time when you create the assignment. You can also update this release time by pressing the “gear” icon next to the assignment on your instructor page, in the “manage assignments” tab.\n\n\n\nHow can I embed a video in an assignment?\n\nCarnap’s markdown dialect supports raw HTML, so you can embed videos by including them in the same way that you might include them in an ordinary webpage. There are two main options.\nIf your video is a file (a .mp4, mov, avi file or something similar) that you have uploaded to a file hosting service somewhere, then you can point a video tag at it by including something like this in your pandoc document:\n&lt;video controls\n    src=\"https://archive.org/download/day_the_earth_stood_still/day_the_earth_stood_still_512kb.mp4\"\n    width=\"560\"&gt;&lt;/video&gt;\nWhich will produce something like this (in browsers that support embedded videos):\n\n\nMore details on how to use &lt;video&gt; tags can be found here.\nNote: Please don’t upload video files to the Carnap site. We’re not designed to serve these. Video files will need to be hosted elsewhere.\nIf your video hosted at a site like youtube or vimeo, rather than at a file hosting service, then you can instead use an “embed code”. Instructions for obtaining an embed code for each of these services can be found here: for youtube, and for vimeo\nThe embed code, when you get it, should look a bit like this:\n&lt;iframe width=\"560\" height=\"315\"\n    src=\"https://www.youtube.com/embed/nfeWlHVyBZQ\" frameborder=\"0\"\n    allow=\"accelerometer; autoplay; clipboard-write; encrypted-media;\n    gyroscope; picture-in-picture\" allowfullscreen&gt;&lt;/iframe&gt;\nAnd should result in something like this\n\n\n\n\nWant to offer a documentation suggestion or report a typo? Use the issue tracker here!\nOr, if you just have a quick question that’s not addressed above, feel free to send an email to gleachkr@gmail.com—if your question comes up a lot, we’ll add it to the FAQ."
  },
  {
    "objectID": "dashboard.html#the-assignment-card",
    "href": "dashboard.html#the-assignment-card",
    "title": "3  Carnap’s Course Management Dashboard",
    "section": "3.1 The Assignment Card",
    "text": "3.1 The Assignment Card\nThe top of the assignment card looks like this:\n\nThere are four main tabs. The first one you want to look at is probably “Manage Courses”.\n\n3.1.1 Manage Courses\nWithin this tab, you can create a new course, by giving it a title, an optional description, a start-date, a total number of available points for the course, an end-date, and a time-zone. The time zone which is used to determine whether assignments have been received by a given due date and time. The start-date and end-date are used to determine when your course will be listed as an option for enrollment.\n\n\n\nCreating a new course\n\n\nOnce you’ve created a course, during the period between the start date and end date, it will:\n\nbe visible as an enrollment option for people creating new accounts, or for people editing their user information from their user pages;\nbecome visible to you as a target for assignments in the other tabs; and\nappear as a tab in your course card (see below).\n\nAfter the end-date of the course, the course will be archived at the bottom of the manage-courses tab, under the heading “Old Courses”. Once the course is archived, you’ll still be able to edit the course’s properties, download grades as a .csv file, and delete the course. If you need to reactivate an archived course, just set its end-date for some point in the future.\n\n\n3.1.2 Assign Textbook Problems\nWithin this tab, you can assign textbook problem sets from the Carnap book to your courses, setting particular due-dates and due-times. There are currently 17 problem sets available, but more are likely to appear in the future. Once a problem set is assigned to a given course, it will appear on the user-page of everyone enrolled in that course.\nYou can also delete assigned problem sets, and replace them with new ones. Deleting an assigned problem set does not delete submitted student work, so first deleting then replacing is a safe way to change the due-date of an assignment.\nBy default, submitted problems received on time receive 5 points each, and late submissions receive 2 points each. Both the point amount awarded for a given problem and the treatment of late problems can be customized—details in the documentation for pandoc markup.\nI find that leaving open the option to submit even very late work helps students who have fallen behind remain motivated, and gives them some incentive to do extra work that will make the later material easier for them to understand.\n\n\n3.1.3 Assign Uploaded Documents\nWithin this tab, you can assign documents created using Carnap’s pandoc markup. In order to assign a document, you need to first upload it in the Manage Uploaded Documents tab.\n\n\n\nAssigning an uploaded document\n\n\nCreating an assignment allows you to optionally associate a due-date, visibility range, grade release date, and description with the assignment.\nOnce an assignment is assigned to given course, it will appear on the user page of everyone enrolled in the course for the duration of the date and time range of you specify (or indefinitely, if no visibility range is given). It will not be possible for students to make new submissions after the assignment ceases to be visible.\nThe due-date affects when student work is counted as late, just like with a problem set. If the due date is omitted, then work can be turned in at any time for full credit. The grade release date determines when grades for the problems in this assignment will be released to students (before the release date, students will see that work has been submitted, but the point value will be listed as “-”). If it is omitted, scores will be released immediately.\nAssignments can also be equipped with access controls. Access controls require setting a password, which students will need to enter before first accessing the assignment. Access-controlled assignments can be hidden from the course. If hidden, they will not appear on the user page, but will still be accessible via their URL. It’s also possible to enter a time-limit for access controlled assignments. The time limit is measured from when the student enters first enters their password. After the limit expires the student will no longer be able to view the exam or submit problems. The time limit is based on a time-stamp of when the student began the exam, so it will expire after the designated period even if the student closes their browser.\nIn addition to creating assignments, you can also:\n\nedit the descriptions and due dates associated with assignments from this tab, by clicking the gear icon ;\nreview the work submitted in connection with this assignment, by clicking the pencil icon , and assign partial credit, if any of the problems from the assignment have been set to allow for incomplete submissions; and\ndelete assignments, by clicking the trashcan icon  next to the assignment. Deleting an assignment deletes all student work associated with that assignment, so be careful when doing this.\n\nSubmitted work for assignments is graded in much the same way as work submitted for textbook problem set. Each problem counts, by default, for five points on time or two points if late. Problems assigned a custom point value count for that value if received on time, and otherwise for half that value rounding down. Late point values can be customized by setting the late-credit attribute—for details, see the documentation for pandoc markup.\n\n\n3.1.4 Manage Uploaded Documents\nWithin this tab, you can upload and manage your documents.\n\n\n\nUploading a document\n\n\nDocuments can be of three kinds:\n\nProblem sets and other materials created using pandoc markup.\nCSS stylesheets for custom styling of your course materials.\nJS scripts for more sophisticated customization of your course materials.\n\nUploaded files will be interpreted as problem sets unless they have a filename extension that indicates they are something else, so unless they are called something like custom-stylesheet.css or my-script.js (because of the extensions .css and .js). For more information on how to apply custom styling and behavior, see the “other features” section in the documentation of Carnap’s pandoc markup.\nOnce documents are uploaded, they can also be assigned to students as problem sets, using the Assign Uploaded Documents tab.\nWhen you create a document, you’ll be able to select a “Sharing Scope”. There are four options: Public, Private, Instructors-Only, and Link-Only. The sharing scope affects whether your document can be accessed via the list of shared document that be found at carnap.io/shared. Public documents are listed and available to anyone, Instructor-Only documents are only listed and available to instructors, and Private documents are unlisted and only available to you, Link-Only documents are unlisted but available (via link) to anyone. The tags you assign to a document are also used to help organize the document in the shared documents list.\nYou can share the the link to the document that appears in your document listing, e.g., via email or your LMS. However, only Public and Link-Only documents will be accessible via this link to your students. Also, you should not use this link to share assignments or tests with your students. Instead, share the link to the assignment in the course card.\nThe sharing scope doesn’t affect whether you can assign the document to students. When a document is assigned to your class, students can access the assignment associated with the document, regardless of the sharing scope you set when you uploaded it. Note that documents you plan to assign with access controls (e.g., passwords or a time limit) should have their sharing scope set to Instructor-Only or Private, since otherwise they can be viewed without restrictions.\nAgain, to edit the attributes of an uploaded document, click the gear icon . You can also delete documents with the trashcan icon , or download them with the cloud icon ."
  },
  {
    "objectID": "dashboard.html#the-course-card",
    "href": "dashboard.html#the-course-card",
    "title": "3  Carnap’s Course Management Dashboard",
    "section": "3.2 The Course Card",
    "text": "3.2 The Course Card\nOnce you’ve created a course, the course card will look a bit like this:\n\n\n\nThe course card\n\n\nDifferent courses are available under different tabs.\nAt the top (“Assignments”) you will see a list of documents you have assigned to your course, sorted by name or by due date. You can share the link to the assignments given here with your students (e.g., in the LMS). Students have to be logged in to Carnap to be able to access assignments via this link, however.\nNext you see a list of students registered in your course and total scores earned by those students. You can click on each student’s email address to see details of their submitted problems and points earned. See below for the possible actions you can take for students using the bottons on the far right.\n\n3.2.1 Course Information\nBelow the table of students, you’ll see some course information, including the course title, points available, number of students registered, the start and end date for your course, the time zone, the textbook, whether the course is open for enrollment, an enrollment link you can give to students, and any co-instructors. You can update the course description, points available, start and end date, whether the course is open for enrollment, and the course textbook by clicking on “Edit Information”.\n\n3.2.1.1 Opening Enrollment for Your Students\nStudents who follow the enrollment link will be prompted to register (if they’re not already registered) and automatically enrolled in your course. A short video explaining the process for students is available here: youtu.be/lmkWcxqxEZk. Feel free to send your students this link along with the enrollment link.\n\n\n3.2.1.2 Choosing a Custom Textbook\nYou can also select a custom textbook for your course. A custom textbook is a Carnap document that students will be directed to when they click the “Book” link at the top of most pages (this overrides the ordinary behavior of directing students to the built-in Carnap textbook). The linked document would ordinarily function as a table of contents, directing students to various “chapters” (other assignments), containing problems that they can complete throughout the semester.\nWhen selecting a custom textbook, you’ll need to choose a document that has already been assigned to the course—so, you’ll want to assign the textbook first and then set it as the textbook for the course.\nOnce assigned, the textbook will not be shown in the “Upcoming Problems” section of your students’ user page. So you do not need to adjust the visibility of the assignment or mark it as hidden, in order to keep it from cluttering your assignment listings.\n\n\n\n3.2.2 Actions on Students\nA number of actions can be performed on individual students by clicking the icons in the “Actions” column:\n\nStudents can be dropped from a course by clicking the trashcan icon . A dropped student is removed from the course, but their data is otherwise intact. So if they are dropped by mistake, then can simply re-enroll.\nStudents can be emailed individually by clicking the “mail” icon  visible in the action column to the right of their name.\nAccessibility accommodations can be added for individual students by clicking the “clock” icon  to the right of the student’s name. A fixed number of minutes can be added to all of the students’ timed exams, their exam times can be extended by a given factor (for example, 1.5 for time-and-a-half) and a fixed number of hours can be added to all of their due-dates. Adjustments to due-dates do not affect visibility dates for assignments, only the treatment of late work. Changes to due-dates will be reflected on the posted due-date seen on the student’s user page.\nAlternate due dates can be issued to individual students, for specific assignments, by clicking the “calendar plus” icon  to the right of the student’s name. Alternate due dates will be reflected on the posted due-date seen on the student’s user page. Alternate due dates will affect whether an assignment is graded as late, and will override the visibility settings for that assignment, so that a student can continue to access the assignment and submit problems until their alternate due date expires. Assignments set as “hidden” however, will not be visible on the user page even if an alternate due date is set.\nAccess can be re-granted to timed assignments after the timer has expired, by clicking the “full hourglass” icon  to the right of the student’s name. Once access is re-granted, it will be as if the student never started the timed exam (although any work that they submitted on the first try will persist), so their next attempt at the exam will be timed in the same way as their first attempt.\n\n\n\n3.2.3 Adding A Co-Instructor\nAt the very bottom of the course card, you have the options of adding a co-instructor, editing a course’s information (including total points, description, and whether the course is open for enrollment), exporting grades, and also of deleting the course.\nCo-instructors are other instructors who have the same type of access to the course as the course creator. They may be useful if you have a TA or if you’re teaching a course with someone else. Co-instructors can be removed from within the course card by clicking the trash icon  next to their name. Removing a co-instructor will also remove all assignments created by that co-instructor and all student work submitted in response to those assignments, so always exercise caution when removing a co-instructor!\n\n\n3.2.4 Exporting Grades\nGrades are exported in .csv format, which most spreadsheet programs should be able to import. Grades can either be tabulated per-assignment (for import into a CMS, for example), or per-problem (for detailed analysis of course performance, or for more complex grading schemes). Students are identified by first name, last name, University ID (an arbitrary string, like their student ID number or other useful identifying information, that you can ask them to enter when registering), and their email address. If a student has not entered some piece of information, its absence is indicated with a question mark.\n\n\n3.2.5 Deleting a Course\nDeleting the course will delete all assignments associated with the course and all student work submitted in response to these assignments, so always exercise caution when deleting a course!"
  },
  {
    "objectID": "dashboard.html#footnotes",
    "href": "dashboard.html#footnotes",
    "title": "3  Carnap’s Course Management Dashboard",
    "section": "",
    "text": "I concede that tabbed cards are not the best UI metaphor. I’m open to suggestions on this one.↩︎"
  },
  {
    "objectID": "pandoc.html#pandoc-extensions",
    "href": "pandoc.html#pandoc-extensions",
    "title": "4  Carnap’s Pandoc MarkDown",
    "section": "4.1 Pandoc Extensions",
    "text": "4.1 Pandoc Extensions\nCarnap’s pandoc parser incorporates the following pandoc extensions:\n\nraw_html\nmarkdown_in_html_blocks\nauto_identifiers\ntex_math_dollars\nfenced_divs\nbracketed_spans\nfenced_code_blocks\nbacktick_code_blocks\nline_blocks\nfancy_lists\nstartnum\ndefinition_lists\nexample_lists\nsimple_tables\nmultiline_tables\nfootnotes\nfenced_code_attributes\ninline_code_attributes\nshortcut_reference_links\nlink_attributes\nyaml_metadata_block\ntask_lists\n\nFor more details, about each of these extensions, please see the Pandoc Users Guide."
  },
  {
    "objectID": "pandoc.html#exercises",
    "href": "pandoc.html#exercises",
    "title": "4  Carnap’s Pandoc MarkDown",
    "section": "4.2 Exercises",
    "text": "4.2 Exercises\n\n4.2.1 General Pattern\nCarnap’s exercises are created by including special code blocks within a pandoc document. A code block looks something like this:\n~~~ \nCONTENT GOES HERE\n~~~\nTo indicate which type of exercise you want to create, you apply classes and data attributes to the code block. That would look something like this:\n~~~{.SOMECLASS .ANOTHER attribute=\"value\"}\nlabel CONTENT GOES HERE\n~~~\nwith classes indicated by a leading ., and attributes assigned with the = sign, and surrounded by quotes.\nThe leading label within the body of the code block will be used to generate an anchor tag to your exercise, so that you can link directly to the exercise at the URL ASSIGNMENTURL#exercise-label where ASSIGNMENTURL is the URL for the assignment, and label is the label you gave to that particular exercise.\n\n\n4.2.2 Some common attributes\nHere are some common attributes that can be applied to to any exercise\n\n\n\n\nName\nEffect\n\n\n\n\npoints\nSets a custom point value\n\n\nlate-credit\nSets a custom point value for a late submission\n\n\nsubmission\nControls how work is submitted. Set to “none” to disable submission\n\n\noptions\nExercise-specific options\n\n\n\n\nthe options attribute might require some extra explanation. This attribute is set to a string of space separated words, indicating what special options are set for the exercise-block it is attached to. Different types of exercises allow for different options.\n\n\n4.2.3 Random problems\nWhen you create a problem set, the different problems within a code block will generally be assigned numbers or some other identifier. So you might write\n~~~ \n1.1 SOME PROBLEM\n~~~\nIf the same identifier is used for a contiguous series of problems (all part of the same code block and next to one another), then when the problem set is assigned and viewed by a student, one of the problems in the series will be chosen randomly and displayed. So, for example given\n~~~ \n1.1 PROBLEM A\n1.1 PROBLEM B\n~~~\nStudents will see PROBLEM A or PROBLEM B, but not both. A student reloading the page will continue to see the same problem, so if they see PROBLEM A on the first viewing, they’ll continue to see PROBLEM A.\nThe selection of a random problem only takes place when the document is viewed as an assignment, so when the document is viewed through the instructor’s “manage documents” tab, all the variant problems will be displayed.\n\n\n4.2.4 Choose-One problems\nIf more than one problem is given the same label but the problems are not part of the same code block or are not next to one another, then both problems will be displayed. However, within each assignment, a student can submit at most one problem with a given label. So if you want to give your students the option to choose just one of several problems to complete, you can set those problems to all share a single label.\n\n\n4.2.5 Exercise Types\nThere are currently eight types of exercises:\n\nSyntax Checking\nTranslation\nTruth Tables\nDerivations\nModel Checking\nQualitative Problems\nSequent Calculus Problems\nGentzen-Prawitz Natural Deduction Problems\n\nTo learn more about each one, follow the links above."
  },
  {
    "objectID": "pandoc.html#other-features",
    "href": "pandoc.html#other-features",
    "title": "4  Carnap’s Pandoc MarkDown",
    "section": "4.3 Other Features",
    "text": "4.3 Other Features\n\n4.3.1 Formula Parsing\nCarnap’s formula parser can be used to render and display formulas and sequents inline within a pandoc document. So for example, writing something like\n`AxF(x)\\/Ex-F(x)`{system=\"firstOrder\"}\nWill produce the output AxF(x)\\/Ex-F(x).\nAny system that’s available for derivations can be used in the formula parser. The available propositional systems are: prop montagueSC LogicBookSD LogicBookSDPlus hausmanSL howardSnyderSL ichikawaJenkinsSL hausmanSL magnusSL magnusSLPlus thomasBolducAndZachTFL thomasBolducAndZachTFL2019 gamutMPND, gamutIPND gamutPND gamutPNDPlus tomassiPL and hardegreeSL. The available first-order systems are: firstOrder montagueQC magnusQL thomasBolducAndZachFOL thomasBolducAndZachFOL2019 thomasBolducAndZachFOLPlus2019 LogicBookPD LogicBookPDPlus gamutND hausmanPL howardSnyderPL ichikawaJenkinsQL hardegreePL goldfarbAltND goldfarbNDPlus and goldfarbAltNDPlus. The available set theory systems are: elementarySetTheory and separativeSetTheory. The available second-order systems are: secondOrder and PolySecondOrder. The available propositional modal logic systems are: hardegreeL hardegreeK hardegreeT hardegreeB hardegreeD hardegree4 and hardegree5. The available predicate modal logic system is hardegreeMPL, and the available “world theory” system is hardegreeWTL.\n\n\n4.3.2 Custom CSS\nThe standard bootstrap CSS that is used for styling the appearance of an assignment can be overriden by including a css entry as part of a yaml metadata block within a carnap pandoc document.\nThe CSS entry can include either a url for a single CSS stylesheet, like so:\n---\ncss: https://ghcdn.rawgit.org/Carnap/Carnap-Contrib/main/css/hide-points.css \n--- \nor for several stylesheets, like so:\n---\ncss:\n- https://ghcdn.rawgit.org/Carnap/Carnap-Contrib/main/css/hide-points.css\n- https://ghcdn.rawgit.org/Carnap/Carnap-Contrib/main/css/another-stylesheet.css\n--- \nThe stylesheets can be hosted anywhere, including on the Carnap server. In order to host a stylesheet, just upload it as if it were a pandoc document, but be sure to give it the filetype extension “css”, so name it something like “mystylesheet.css”. You’ll then able able to access it with a metadata block of the form:\n--- \ncss:\n- https://carnap.io/shared/youremail@gmail.com/custom.css\n--- \nIf you wish to not just partly override the bootstrap css, but to completely disable it, adding your new css to a blank slate (other than the css used to style Carnap’s exercises), then you can instead use a base-css entry to set the new base css style. For example,\n--- \nbase-css: \n- https://static.carnap.io/css/tufte.css\n- https://static.carnap.io/css/tuftextra.css\n--- \nwill configure your document to have a tufte-like style, with no traces of bootstrap.\nFor more details about hosting your own stylesheets, please take a look at the documentation for the instructor dashboard.\n\n\n4.3.3 Custom JavaScript\nDocuments can also include links to custom JavaScript. This can be done using the raw_html pandoc extension to include a &lt;script&gt; tag, or by including the JS in a metadata block. Like a CSS entry, a JS entry entry can include either a url for a single CSS stylesheet, like so:\n---\njs: https://carnap.io/shared/myemail@university.edu/myjs.js\n--- \nor for several stylesheets, like so:\n---\njs:\n- https://carnap.io/shared/myemail@university.edu/myjs1.js\n- https://carnap.io/shared/myemail@university.edu/myjs2.js\n--- \nThe scripts can be hosted anywhere, including on the Carnap server. As with stylesheets, scripts can be uploaded as normal documents so long as they’re given the proper filetype extension (in this case, “.js” rather than “.css”)\n\n\n4.3.4 Templates\nCarnap can make use of pandoc’s advanced templating capabilities, documented here. To create a template, upload a file with the extension .template. Your template file should contain HTML, enriched with template variables of the kind described in pandoc’s documentation. To apply the template to a given document, include a template field in your document’s YAML metadata, followed by the name of the template file. So for example, you might have metadata of the form:\n---\njs: https://carnap.io/shared/myemail@university.edu/myjs.js\ntemplate: test.template\n---\nApplied to an uploaded document test.md. Then, when test.md is accessed as a document or an assignment, its contents will be interpolated into test.template as the value of the $body$ variable."
  },
  {
    "objectID": "awesome-carnap.html#assignment-resources",
    "href": "awesome-carnap.html#assignment-resources",
    "title": "5  Community resources for Carnap",
    "section": "5.1 Assignment resources",
    "text": "5.1 Assignment resources\n\nCarnap-Contrib - CSS stylesheets and JavaScript extensions for assignments"
  },
  {
    "objectID": "awesome-carnap.html#textbooks",
    "href": "awesome-carnap.html#textbooks",
    "title": "5  Community resources for Carnap",
    "section": "5.2 Textbooks",
    "text": "5.2 Textbooks\n\nforall x: UBC edition\nforall x: Calgary\nIntroductory Logic, by Sean Walsh"
  },
  {
    "objectID": "awesome-carnap.html#tools",
    "href": "awesome-carnap.html#tools",
    "title": "5  Community resources for Carnap",
    "section": "5.3 Tools",
    "text": "5.3 Tools\n\nCarnap command line interface and GitHub Action:\nAutomatically perform actions with the Carnap API such as uploading assignments"
  },
  {
    "objectID": "derivations.html#predefined-classes",
    "href": "derivations.html#predefined-classes",
    "title": "6  Derivations",
    "section": "6.1 Predefined classes",
    "text": "6.1 Predefined classes\nTo get started, it’s possible to create simple exercises in the propositional system of the Carnap book like this:\n~~~{.ProofChecker .Prop} \n1.1 P :|-: Q-&gt;P\n~~~\nWhere the :|-: again indicates a turnstile. The result is then:\n1.7 P:|-: Q-&gt;P\nSimilarly,\n~~~{.Playground .Prop} \n~~~\ngenerates\n\nThe class Prop specifies that we wish to use the propositional formal system of the Carnap book, and specifies a couple of UI-defaults for displaying proofs in that system. The currently available predefined classes are:\n\n\n\n\n\n\n\n\nClass Strings\nDescription\n\n\n\n\n.Prop, .FirstOrder, .SecondOrder, .PolySecondOrder, .MontagueSC,.MontagueQC, ElementaryST, SeparativeST\nMontague-Style systems, the first two of which are used in the Carnap book.\n\n\n.LogicBookSD, LogicBookSDPlus, LogicBookPD, .LogicBookPDPlus\nFitch style systems based on Bergmann Moore and Nelson’s Logic Book.\n\n\n.ForallxSL, .ForallxSLPlus, .ForallxQL\nFitch-style systems based on Magnus’s Forall x.\n\n\n.ZachTFL, .ZachTFL2019, .ZachFOL, .ZachFOL2019, .ZachFOLPlus2019\nFitch-style systems based on the Calgary Remix of Forall x.\n\n\n.IchikawaJenkinsSL, .IchikawaJenkinsQL\nFitch-style systems based on the Ichikawa-Jenkins Remix of Forall x.\n\n\n.GamutMPND, .GamutIPND, .GamutPND, .GamutPNDPlus .GamutND,\nFitch-style systems based on the systems used in Gamut’s Introduction to Logic, including minimal and intuitionistic fragments of propositional logic.\n\n\nHowardSnyderSL,HowardSnyderPL\nSystems based on Howard-Snyder’s The Power of Logic.\n\n\nHausmanSL,HausmanPL\nSystems based on Hausman’s Logic and Philosophy.\n\n\n.GoldfarbND, .GoldfarbAltND, .GoldfarbNDPlus, .GoldfarbAltNDPlus\nLemmon-style systems based on Goldfarb’s Deductive Logic.\n\n\n.TomassiPL\nLemmon-style system based on Tomassi’s Logic\n\n\n.HardegreeSL, .HardegreePL, .HardegreeWTL, .HardegreeL, .HardegreeK, .HardegreeT, .HardegreeB, .HardegreeD, .Hardegree4, .Hardegree5, .HardegreeMPL\nHardegree-style systems based on Hardegree’s Modal Logic\n\n\n.ZachPropEq\nChain of equivalence prover."
  },
  {
    "objectID": "derivations.html#advanced-usage",
    "href": "derivations.html#advanced-usage",
    "title": "6  Derivations",
    "section": "6.2 Advanced Usage",
    "text": "6.2 Advanced Usage\n\n6.2.0.1 Options\nLike the other exercises, derivations allow for points=VALUE and submission=\"none\".\nDerivations, however, currently have a little more depth than the other types of exercises. There are, correspondingly, more options available:\n\n\n\n\nName\nEffect\n\n\n\n\nfonts\nUses Fira Logic font, including ligatures for logical symbols\n\n\npopout\nMakes it possible to open the problem in a new window\n\n\nrender\nRenders a picture of the proof as you type\n\n\nindent\nAutomatically indents newlines to the level of the previous line\n\n\ntabindent\nInsert indent on tab press\n\n\nresize\nAutomatically resizes proof area\n\n\nexam\nAllows for submission of work which is incomplete or incorrect\n\n\n\n\nThese can all be included in the “options” string supplied to the options attribute of the code block, like this:\n~~~{.ProofChecker .Prop options=\"indent fonts popout resize render indent\"} \n1.8 P :|-: Q-&gt;P\n|1.Show Q-&gt;P\n|2.   Q:AS\n|3.   P:PR\n|4.:CD 3\n~~~\nThe result of the above is:\n1.8 P :|-: Q-&gt;P\n|1.Show Q-&gt;P\n|2.   Q:AS\n|3.   P:PR\n|4.:CD 3\nAn options string will override any options that are included by default in a given predefined class. For example, .Prop automatically turns on the resize option. However if we have just\n~~~{.ProofChecker .Prop options=\"indent\"} \n1.9 P :|-: Q-&gt;P \n~~~\nWe get a proofbox that resizes manually:\n1.9 P :|-: Q-&gt;P \n\n\n6.2.0.2 Partial Solutions\nA partial solution to a problem can be included by following a problem with a derivation that is line-by-line prefixed with the | character, optionally (for readability) followed by a line number followed by a period, like this:\n~~~{.ProofChecker .Prop} \n1.7 P :|-: Q-&gt;P\n|1.Show Q-&gt;P\n|2.   Q:AS\n|3.   P:PR\n|4.:CD 3\n~~~\nThis gives us:\n1.7 P :|-: Q-&gt;P\n|1.Show Q-&gt;P\n|2.   Q:AS\n|3.   P:PR\n|4.:CD 3\nEverything after the line number (or the | if you don’t use numbers) is included in the proof, so be careful about spaces!\nYou can also include a partial derivation without specific solution, by replacing .ProofChecker with .Playground, writing for example:\n~~~{.Playground .Prop} \n|1.Show Q-&gt;P\n|2.   Q:AS\n|3.   P:PR\n|4.:CD 3\n~~~\nwhich gives you a proof box that calculates what has been derived and displays it at the top, rather than calculating whether the derivation proves a given sequent, thus:\n|1.Show Q-&gt;P\n|2.   Q:AS\n|3.   ?:PR\n|4.:CD 3\n\n\n6.2.0.3 Feedback\nThe defaults for feedback (check the proof with every keypress) can also be overridden by setting the feedback attribute. The override options for feedback are\n\n\n\n\nName\nEffect\n\n\n\n\nmanual\nrequire a button-press for feedback\n\n\nsyntaxonly\nwarn about syntax errors, but do not check proof for correctness\n\n\nnone\ndo not offer feedback\n\n\n\n\nSo,\n~~~{.ProofChecker .Prop submission=\"none\" feedback=\"manual\"} \n1.10 P :|-: Q-&gt;P\n~~~\nproduces\n1.10 P :|-: Q-&gt;P\n\n\n6.2.0.4 Systems\nIf you don’t want to use a predefined class, you can set the system option manually. This will give you complete control over which options are set—only the ones you select will be active. So you would write something like:\n~~~{.ProofChecker system=\"prop\" submission=\"none\" feedback=\"manual\"} \n1.11 -Q :|-: Q-&gt;P\n~~~\nto produce\n1.11 -Q :|-: Q-&gt;P\nThe available propositional systems are: prop montagueSC LogicBookSD LogicBookSDPlus hausmanSL howardSnyderSL ichikawaJenkinsSL hausmanSL magnusSL magnusSLPlus thomasBolducAndZachTFL thomasBolducAndZachTFL2019 gamutMPND gamutIPND, gamutPND gamutPNDPlus tomassiPL and hardegreeSL. The available first-order systems are: firstOrder montagueQC magnusQL thomasBolducAndZachFOL thomasBolducAndZachFOL2019 thomasBolducAndZachFOLPlus2019 LogicBookPD LogicBookPDPlus gamutND hausmanPL howardSnyderPL ichikawaJenkinsQL hardegreePL goldfarbAltND goldfarbNDPlus and goldfarbAltNDPlus. The available set theory systems are: elementarySetTheory and separativeSetTheory. The available second-order systems are: secondOrder and PolySecondOrder. The available propositional modal logic systems are: hardegreeL hardegreeK hardegreeT hardegreeB hardegreeD hardegree4 and hardegree5. The available predicate modal logic system is hardegreeMPL, and the available “world theory” system is hardegreeWTL.\n\n\n6.2.0.5 Initialization\nThe init attribute may be set to “now” in order to check the proof as soon as it is loaded, instead of waiting for a user interaction.\n\n\n6.2.0.6 Indentation Guides\nBesides just the indentation guide created by setting guides in the options string, there are several more refined overlays available for increasing the readability of a typed proof. These are configured by setting the guides attribute. The available options for guides are:\n\n\n\n\nName\nEffect\n\n\n\n\nmontague\nMontague style guides below show lines\n\n\nfitch\nA fitch style proof overlay\n\n\nhausman\nA Hausman style proof overlay\n\n\nhoward-snyder\nA Howard-Snyder style proof overlay\n\n\nindent\nSimple indentation indicator guides\n\n\n\n\nSo,\n~~~{.Playground .ForallxSL guides=\"fitch\"} \n P       :AS\n P/\\P    :&I 1 1\n P       :&E 2\nP-&gt;P        :-&gt;I 1-3\n~~~\nProduces:\n P       :AS\n P/\\P    :&I 1 1\n P       :&E 2\nP-&gt;P     :-&gt;I 1-3"
  },
  {
    "objectID": "truth-tables.html#simple-truth-tables",
    "href": "truth-tables.html#simple-truth-tables",
    "title": "7  Truth Tables",
    "section": "7.1 Simple Truth Tables",
    "text": "7.1 Simple Truth Tables\nYou can create simple truth table problems, checking to see if a formula is a tautology, by also adding the class Simple, like so:\n~~~{.TruthTable .Simple}\n2.1 ((P/\\Q)\\/R)&lt;-&gt;((P\\/R)/\\(Q\\/R))\n~~~\nthe number 2.1 indicates the exercise number, and the formula is the one for which you will be constructing a truth table. This produces:\n\n\n2.1\n\n\n\n\n\nYou can also use a comma-separated list of formulas, like so:\n~~~{.TruthTable .Simple}\n2.2 (P/\\Q)\\/R, (P\\/R)/\\(Q\\/R)\n~~~\nThis example produces:\n\n\n2.2\n\n\n\n\n\nSimple truth tables can be (by default) checked for correctness, and will be considered correct when every row is filled in correctly. A problem can also be solved by indicating a counterexample to tautology. A row is considered a counterexample if all the formulas in the problem are false on that row."
  },
  {
    "objectID": "truth-tables.html#validity-truth-tables",
    "href": "truth-tables.html#validity-truth-tables",
    "title": "7  Truth Tables",
    "section": "7.2 Validity Truth Tables",
    "text": "7.2 Validity Truth Tables\nIf, instead of Simple, you add the class Validity, like so:\n~~~{.TruthTable .Validity}\n2.3 P :|-: ((P/\\Q)\\/R)&lt;-&gt;((P\\/R)/\\(Q\\/R))\n~~~\nthe result is a truth-table for checking the validity of an argument (in this case, P :|-: ((P/\\Q)\\/R)&lt;-&gt;((P\\/R)/\\(Q\\/R)), where :|-: is just a stylized way of typing out the turnstile). The above produces:\n\n\n2.3\n\n\n\n\n\nValidity truth-table problems can include comma-separated lists of formulas to both the left and right of the turnstile. For example,\n\n\n2.4\n\n\n\n\n\nproduces:\n~~~{.TruthTable .Validity}\n2.4 P,Q :|-: (P/\\Q), (P\\/R)/\\(Q\\/R)\n~~~\nValidity truth tables can be (by default) checked for correctness. A table is correct when every row has been filled in, with rows that are counterexamples to validity marked F, and rows that are not counterexamples to validity marked T. A counterexample to validity can also be provided directly by pressing the counterexample button and entering the truth values of the relevant row. A row is considered a counterexample to validity only if all the formulas to the left of the sequent are true, and all the formulas to the right of the sequent are false.1"
  },
  {
    "objectID": "truth-tables.html#partial-truth-tables",
    "href": "truth-tables.html#partial-truth-tables",
    "title": "7  Truth Tables",
    "section": "7.3 Partial Truth Tables",
    "text": "7.3 Partial Truth Tables\nYou can also create truth table problems that involve filling in a single row. To do this, add the class Partial, like so:\n~~~{.TruthTable .Partial}\n2.5 (P/\\Q), (P\\/R)/\\(Q\\/R)\n~~~\ncreating something like this:\n\n\n2.5\n\n\n\n\n\nBy default, the row is considered correct if it is filled in correctly, with any assignment of truth values to the atoms. However by using givens (see below), partial truth tables can be used to ask students to test for variety of different properties."
  },
  {
    "objectID": "truth-tables.html#advanced-usage",
    "href": "truth-tables.html#advanced-usage",
    "title": "7  Truth Tables",
    "section": "7.4 Advanced Usage",
    "text": "7.4 Advanced Usage\n\n7.4.0.1 Options\nIn addition to setting a custom point value or turning off submission by adding points=VALUE and submission=\"none\", several other options are available for truth tables:\n\n\n\n\nName\nEffect\n\n\n\n\nnocheck\nDisables the “check” button\n\n\nnocounterexample\nDisables the “counterexample” button\n\n\nexam\nAllows for submission of work which is incomplete or incorrect\n\n\nautoAtoms\nPrepopulates atomic sentence columns with truth values\n\n\nturnstilemark\nUses ✓ and ✗ rather than T and F under the turnstile\n\n\ndouble-turnstile\nDisplays a double turnstile (like so ⊨) rather than the single turnstile\n\n\nnegated-double-turnstile\nDisplays a negated double turnstile (like so ⊭) rather than the single turnstile\n\n\nimmutable\nMakes the truth table immutable (useful for displaying truth tables)\n\n\nnodash\nUses  rather than - in empty cells (useful for printing worksheets)\n\n\nstrictGivens\nMakes givens (see below) immutable\n\n\nhiddenGivens\nHides givens (see below)\n\n\n\n\nSo for example,\n~~~{.TruthTable .Validity options=\"nocheck nocounterexample\"}\n2.6 P :|-: Q\n~~~\nGenerates:\n\n\n2.6\n\n\n\n\n\n\n\n7.4.0.2 Counterexamples\nThere are also a number of options that affect what counts as a counterexample. these are set using the counterexample-to attribute. The options are:\n\n\n\n\nName\nCounterexample is\n\n\n\n\nvalidity\na situation in which all formulas are false\n\n\ntautology\nsame as validity\n\n\nequivalence\na situation in which two formulas have different truth values\n\n\ninconsistency\na situation in which all formulas are true\n\n\ncontradiction\nsame as inconsistency\n\n\n\n\nIn the case of simple truth tables, these apply to all formulas. In the case of validity truth tables, a counterexample is a situation in which the formulas to the left of the turnstile are all true, and the ones to the right of the turnstile have the counterexample property. Hence, a validity problem in which the counterexample is equivalence is basically using a truth table to test whether the formulas to the right of the turnstile are equivalent “under the assumption” that the formulas to the left of the turnstile are true.\nHere’s an example of a truth table looking for a counterexample to the equivalence of two formulas\n```{.TruthTable .Simple counterexample-to=\"equivalence\"}\n2.7 P&lt;-&gt;Q,  P-&gt;Q\n```\nwhich produces:\n\n\n2.7\n\n\n\n\n\n\n\n7.4.0.3 Systems\nThe way that formulas are parsed and displayed can also be customized. This is done by setting the system attribute to indicate which formal system you are drawing your syntax from. So for example,\n~~~{.TruthTable .Simple system=\"LogicBookSD\"}\n2.8 A &gt; B & C\n~~~\nwill generate:\n\n\n2.8\n\n\n\n\n\nThe available systems are: prop montagueSC LogicBookSD LogicBookSDPlus hausmanSL howardSnyderSL ichikawaJenkinsSL hausmanSL magnusSL magnusSLPlus thomasBolducAndZachTFL thomasBolducAndZachTFL2019 tomassiPL and hardegreeSL.\n\n\n7.4.0.4 Givens\nIt is also possible to give a “partial solution” to a truth table problem, in which the truth table is partly filled in, and the student needs either to complete it or correct it. To pre-populate simple and validity tables with “givens” in this way, write the truth table you want, preceded by the bar character |, after the problem. So,\n~~~{.TruthTable .Simple}\n2.9 P \\/~P\n|   T - FT\n|   F - TF\n~~~\nGenerates\n\n\n2.9\n\n   T - FT\n   F - TF\n\n\n\nYou do need to fill in every row entirely. If a row is the wrong length, or if there are the wrong number of rows, the table will not be pre-populated. If you wish to make the givens you assign immutable (to clarify that they are a hint, rather than something that needs to be corrected), you can use the strictGivens option.\nGivens behave similarly for partial truth tables. For example,\n~~~{.TruthTable .Partial}\n2.10 P \\/~P\n|   F - TF\n~~~\nwill produce:\n\n\n2.10\n\n   F - TF\n\n\n\nHowever: if a partial truth table is constructed with givens, then a solution will only be accepted if it is “consistent” with the givens. So in the above case, the only acceptable solution will be one that assigns T to P. The givens can be hidden, using hiddenGivens if you want to, for example, ask students to make a sentence truth and you want them to figure out the relation between the truth of a sentence and the truth value of the main connective.\nif you wish to hide some givens, but not others, you can use a colon to separate the sentences that will have visible truth values from those that will not. For example, you can write\n~~~{.TruthTable .Partial options=\"hiddenGivens\"}\n2.11 Q : Q-&gt;P\n|    T   TT -\n~~~\nto create a problem in which the student must make Q-&gt;P true under the assumption that Q is true. The result is like this:\n\n\n2.11\n\n    T   TT -\n\n\n\nso this can also be used to create problems in which students are responsible for filling in a certain row of the truth table.\nFinally, if more than one row of givens is provided to a partial truth table, then any solution which is compatible with any one of the rows will be accepted. So for example, you can write:\n~~~{.TruthTable .Partial options=\"hiddenGivens\"}\n2.12 P/\\Q, P\\/Q\n|    -T -  -F - \n|    -F -  -T - \n~~~\nIn order to ask students to provide a row that witnesses the inequivalence of these two sentences. The result will be:\n\n\n2.12\n\n    -T -  -F -\n    -F -  -T -\n\n\n\n\n\n7.4.0.5 Custom Marks\nThe marks for truth and falsity can be configured to something other than the usual T and F by setting the falseMark and trueMark attributes. So for example\n```{.TruthTable .Validity trueMark=\"1\" falseMark=\"0\"}\n2.13 P,Q:|-:P/\\Q\n```\nwill produce\n\n\n2.13\n\n\n\n\n\nThe handling of givens remains the same in the presence of a configured falseMark or trueMark attribute. So,for example\n```{.TruthTable .Validity trueMark=\"1\" falseMark=\"0\"}\n2.14 P,Q:|-:P/\\Q\n| TT----\n| FT----\n| TF----\n| FF----\n```\nwill produce\n\n\n2.14\n\nTT----\nFT----\nTF----\nFF----"
  },
  {
    "objectID": "truth-tables.html#footnotes",
    "href": "truth-tables.html#footnotes",
    "title": "7  Truth Tables",
    "section": "",
    "text": "There’s some arbitrariness in how we choose to think about the validity of multi-conclusion arguments. This approach is the most natural from the point of view of the sequent calculus.↩︎"
  },
  {
    "objectID": "translation.html#propositional-logic",
    "href": "translation.html#propositional-logic",
    "title": "8  Translations",
    "section": "8.1 Propositional Logic",
    "text": "8.1 Propositional Logic\nYou can create propositional logic translation problems by also adding the class Prop, like so:\n~~~{.Translate .Prop}\n3.1 P/\\Q : People want to know what's going on and questions are unavoidable\n~~~\nThe number 3.1 indicates the exercise number, and the colon separates the solution from the text that will be presented for translation. The result of the above is:\n\n\n3.1\n\n\n\n\n\nTo complete it, replace the text to the left of the submit solution button with your translation, press return to check, and then press “Submit Solution”. Propositional translations are considered correct if they are logically equivalent to the original answer. So for example, Q/\\P will be accepted above."
  },
  {
    "objectID": "translation.html#first-order-translation",
    "href": "translation.html#first-order-translation",
    "title": "8  Translations",
    "section": "8.2 First-Order Translation",
    "text": "8.2 First-Order Translation\nIt is also possible to create first-order translation problems using the class FOL, thus:\n~~~{.Translate .FOL}\n3.2 AxF(x) : Everything is fine\n~~~\nwith the result:\n\n\n3.2\n\n\n\n\n\nThese are completed as above. Equivalence of first-order sentences is undecidable, so we can’t check it, but we can catch most cases of “equivalent” translations by using some rewriting rules.1 So, for example ~Ex~F(x) will be accepted above."
  },
  {
    "objectID": "translation.html#exact-translations",
    "href": "translation.html#exact-translations",
    "title": "8  Translations",
    "section": "8.3 Exact Translations",
    "text": "8.3 Exact Translations\nUsing the class Exact, you can also create “translations” that don’t accept logically equivalent answers. These may be useful if you wish to, for example, ask a student what the missing premise in some inference is. So, for example you might write\n~~~{.Translate .Exact}\n3.3 P : To make a modus ponens inference with P→Q, you need...\n~~~\nto generate:\n\n\n3.3\n\n\n\n\n\nExact translations use the same syntax as Prop by default, but can be configured to use a large number of alternative syntaxes (see below)"
  },
  {
    "objectID": "translation.html#systems",
    "href": "translation.html#systems",
    "title": "8  Translations",
    "section": "8.4 Systems",
    "text": "8.4 Systems\nThe way that formulas are parsed can also be customized. This is done by setting the system attribute to indicate which formal system you are drawing your syntax from. So for example,\n~~~{.Translate .FOL system=\"magnusQL\"}\n3.5 AxBx : Everything is bananas\n~~~\nwill generate:\n\n\n3.5\n\n\n\n\n\nFor first-order translations, the available systems are: firstOrder montagueQC magnusQL thomasBolducAndZachFOL thomasBolducAndZachFOL2019 LogicBookPD LogicBookPDPlus hausmanPL howardSnyderPL ichikawaJenkinsQL hardegreePL goldfarbAltND goldfarbNDPlus and goldfarbAltNDPlus.\nFor propositional translations, the available systems are: prop montagueSC LogicBookSD LogicBookSDPlus hausmanSL howardSnyderSL ichikawaJenkinsSL hausmanSL magnusSL magnusSLPlus thomasBolducAndZachTFL thomasBolducAndZachTFL2019 tomassiPL and hardegreeSL.\nFor exact translations, the available systems are all of the above, together with modal logic systems .HardegreeSL .HardegreePL .HardegreeWTL, .HardegreeL .HardegreeK .HardegreeT .HardegreeB .HardegreeD .Hardegree4 .Hardegree5, second order systems .SecondOrder .PolySecondOrder, and set theory systems ElementaryST and SeparativeST"
  },
  {
    "objectID": "translation.html#advanced-usage",
    "href": "translation.html#advanced-usage",
    "title": "8  Translations",
    "section": "8.5 Advanced usage",
    "text": "8.5 Advanced usage\n\n8.5.0.1 Multiple Solutions\nIf you wish to allow students to find one translation of a sentence that admits several formalizations, you can use a comma-separated list of admissible solutions. So,\n~~~{.Translate .FOL}\n3.4 (P /\\ Q) \\/ R, P/\\(Q\\/R) : Jack jumped the fence and was caught by the watchman or got away.\n~~~\ngenerates\n\n\n3.4\n\n\n\n\n\n\n\n8.5.0.2 Options and Attributes\nIn addition to allowing for custom point values with points=VALUE, and turning off submission with submission=\"none\", translations also have the following options\n\n\n\n\nName\nEffect\n\n\n\n\nnocheck\nDisables checking solutions\n\n\nexam\nAllows for submission of work which is incomplete or incorrect\n\n\nchecksyntax\nWhen exam is active, blocks submission of syntactically incorrect work\n\n\n\n\nThese can be included in the space separated list supplied to the options attribute.\n\n\n8.5.0.3 Translation tests\nFinally, you can impose one or more extra tests on a translation. This is done by setting the tests attribute to indicate which tests you wish to require the translation to pass. The available tests for propositional translations are\n\n\n\n\nName\nEffect\n\n\n\n\nCNF\nRequires conjunctive normal form\n\n\nDNF\nRequires disjunctive normal form\n\n\nmaxCon:N\nRequires that the translation contain N or fewer connectives\n\n\nmaxNot:N\nRequires that the translation contain N or fewer negations\n\n\nmaxAnd:N\nRequires that the translation contain N or fewer conjunctions\n\n\nmaxIff:N\nRequires that the translation contain N or fewer biconditionals\n\n\nmaxIf:N\nRequires that the translation contain N or fewer conditionals\n\n\nmaxOr:N\nRequires that the translation contain N or fewer disjunctions\n\n\nmaxFalse:N\nRequires that the translation contain N or fewer falsity constants\n\n\nmaxAtom:N\nRequires that the translation contain N or fewer atomic sentences\n\n\n\n\nThe available tests for first-order translations are all the propositional tests, plus:\n\n\n\n\nName\nEffect\n\n\n\n\nPNF\nRequires prenex normal form\n\n\n\n\nWhen using multiple tests, their names must be separated by spaces, so for example,\n~~~{.Translate .FOL tests=\"PNF maxNeg:0\"}\n3.6 ~Ex~F(x) : Nothing is not bananas.\n~~~\nwill generate:\n\n\n3.6\n\n\n\n\n\n\n\n8.5.0.4 Partial Solutions\nIt’s possible to include a partial solution to a translation problem, by including the partial solution after a | following the problem. So for example,\n~~~{.Translate .FOL options=\"nocheck\"}\n3.7 AxF(x) : Everything is fine\n| For all x, x is fine\n~~~\nGenerates\n\n\n3.7"
  },
  {
    "objectID": "translation.html#footnotes",
    "href": "translation.html#footnotes",
    "title": "8  Translations",
    "section": "",
    "text": "the procedure is roughly as follows:\n\nusing the standard rules of passage, drive quantifiers in as far as possible in both the submitted solution \\(S_0\\), and in the target sentence \\(T_0\\), generating two result sentences \\(S_1\\),\\(T_1\\)\nusing the standard rules of passage, pull out quantifiers as far as possible, in every possible way, generating a set \\(S_2\\) of sentences from \\(S_1\\), and a set of sentences \\(T_2\\) from \\(T_1\\)\nallowing permutation of quantifiers within blocks, look for pairs of sentences \\((S_3,T_3)\\) with matching quantifier prefixes. Canonically rename the variables. Check the matricies of the resulting formulas for propositional equivalence.\n\n↩︎"
  },
  {
    "objectID": "modelchecker.html#simple-countermodels",
    "href": "modelchecker.html#simple-countermodels",
    "title": "9  Countermodels",
    "section": "9.1 Simple Countermodels",
    "text": "9.1 Simple Countermodels\nYou can create simple countermodel problems, checking to see if one or more formulas are true in a constructed model like this:\n```{.CounterModeler .Simple}\n1.1 AxF(x), ExG(x)\n```\nThe result will be:\n1.1 AxF(x), ExG(x)\nHere is an example with some more interesting vocabulary:\n```{.CounterModeler .Simple}\n1.2 AxAy(f(x,y) = f(y,x))\n```\nProducing:\n1.2 AxAy(f(x,y) = f(y,x))\nThe domain of the model must consist of one or more natural numbers. The tuples making up the extensions of predicate and relation symbols are comma-separated and enclosed in brackets, parentheses, or &lt;&gt; pairs, like this: [0,0] or this &lt;1,1&gt;. The tuples themselves should be separated by commas, like this: [0,0],[1,0].\nThe extension of each constant must be a natural number. The extension of a given function symbol will be a comma-separated list of tuples as above but with the arguments separated from the value by a semicolon, thus: [0,0;1].\nFormulas containing free variables are treated as equivalent to their universal closures."
  },
  {
    "objectID": "modelchecker.html#validity-countermodels",
    "href": "modelchecker.html#validity-countermodels",
    "title": "9  Countermodels",
    "section": "9.2 Validity Countermodels",
    "text": "9.2 Validity Countermodels\nYou can create a countermodel problem for showing invalidity like this:\n```{.CounterModeler .Validity}\n1.3 AxEyF(x,y) :|-: ExAyF(y,x)\n```\nCreating:\n1.3 AxEyF(x,y) :|-: ExAyF(y,x)\nValidity countermodel problems can include comma-separated lists of formulas to both the left and right of the turnstile. A countermodel is successful if it makes all the formulas to the left of the turnstile true and all the formulas to the right of the turnstile false."
  },
  {
    "objectID": "modelchecker.html#constraint-countermodels",
    "href": "modelchecker.html#constraint-countermodels",
    "title": "9  Countermodels",
    "section": "9.3 Constraint Countermodels",
    "text": "9.3 Constraint Countermodels\nYou can create a countermodel with some implicit constraints on the allowable models like this:\n```{.CounterModeler .Constraint }\n1.4 ExEy(not x = y) : AxAyF(x,y)\n```\nResulting in:\n1.4 ExEy(not x = y) : AxAyF(x,y)\nA countermodel with implicit constraints is successful if it makes all the formulas to the right and the left of the : true."
  },
  {
    "objectID": "modelchecker.html#advanced-usage",
    "href": "modelchecker.html#advanced-usage",
    "title": "9  Countermodels",
    "section": "9.4 Advanced Usage",
    "text": "9.4 Advanced Usage\n\n9.4.0.1 Options\nIn addition to setting a custom point value or turning off submission by adding points=VALUE and submission=\"none\", several other options are available for countermodels:\n\n\n\n\n\n\nName\nEffect\n\n\n\n\nnocheck\nDisables the “check” button\n\n\nexam\nAllows for submission of work which is incomplete or incorrect\n\n\nstrictGivens\nMakes givens immutable (see below)\n\n\ndouble-turnstile\nDisplays a double turnstile (like so ⊨) rather than the single turnstile\n\n\nnegated-double-turnstile\nDisplays a negated double turnstile (like so ⊭) rather than the single turnstile\n\n\n\n\n\n9.4.0.2 Counterexamples\nThere are also a number of options that affect what counts as a successful countermodel. these are set using the counterexample-to attribute. The options are:\n\n\n\n\nName\nCounterexample is\n\n\n\n\nvalidity\na situation in which all formulas are false\n\n\ntautology\nSame as validity\n\n\nequivalence\na situation in which two formulas have different truth values\n\n\ninconsistency\na situation in which all formulas are true\n\n\n\n\nIn the case of simple countermodels, these apply to all formulas. In the case of validity countermodels, a successful countermodel is a situation in which the formulas to the left of the turnstile are all true, and the ones to the right of the turnstile have the counterexample property. Similarly in the case of a constraint countermodel problem—all the constraints must be true, and the other formulas must have the counterexample property.\n\n\n9.4.0.3 Systems\nThe way that formulas are parsed and displayed can also be customized. This is done by setting the system attribute to indicate which formal system you are drawing your syntax from. So for example,\n~~~{.CounterModeler .Simple  system=\"LogicBookPD\"}\n1.5 (Ax)(Ax-&gt;Bx)\n~~~\nwill generate:\n1.5 (Ax)(Ax-&gt;Bx)\nThe available systems are firstOrder montagueQC magnusQL thomasBolducAndZachFOL thomasBolducAndZachFOL2019 thomasBolducAndZachFOLPlus LogicBookPD LogicBookPDPlus hausmanPL howardSnyderPL ichikawaJenkinsQL hardegreePL goldfarbAltND goldfarbNDPlus and goldfarbAltNDPlus.\n\n\n9.4.0.4 Givens\nIt is also possible to give a “partial solution” to a countermodeling problem, in which the model is partly filled in, and the student needs either to complete it or correct it. To pre-populate models with “givens” in this way, write each field you want filled in, preceded by the bar character | and followed by a colon and what you want it filled in with, like this:\n```{.CounterModeler .Simple}\n1.1 AxF(x), ExG(x)\n| Domain : 0,1,2\n| F(_) : 1,2\n| a : 1\n```\nWhich will produce:\n1.1 AxF(x), ExG(x), H(a)\n| Domain : 0,1,2\n| F(_) : 1,2\n| a : 1\nThe field-names for the givens should match how the field-names would be displayed in the exercise.\nOrdinarily, givens function as hints. However, you can make it impossible for students to change them (thereby turning them into requirements) by adding the strictGivens option to your problem. Use this, for instance, to require students to use a specific domain, or to prevent them from making universal sentences vacuously true."
  },
  {
    "objectID": "gentzen-ND.html#available-systems",
    "href": "gentzen-ND.html#available-systems",
    "title": "10  Gentzen-Prawitz Natural Deduction",
    "section": "10.1 Available Systems",
    "text": "10.1 Available Systems\nAt the moment, four systems are available:\n\n\n\n\nSystem\nDescription\n\n\n\n\npropNK\nA system based on the propositional fragment of Gentzen’s NK\n\n\npropNJ\nA system based on the propositional fragment of Gentzen’s NJ\n\n\nopenLogicNK\nThe propositional fragement of the Open Logic project’s natural deduction\n\n\nopenLogicFOLNK\nThe full (first-order with equality) Open Logic project natural deduction\n\n\nopenLogicArithNK\nopenLogicFOLNK for the language of arithmetic\n\n\nopenLogicExArithNK\nopenLogicFOLNK for the language of arithmetic with arbitrary predicates and functions\n\n\nopenLogicSTNK\nopenLogicFOLNK for the basic language of set theory with arbitrary predicates and functions\n\n\nopenLogicExSTNK\nopenLogicFOLNK for the basic language of set theory\n\n\nopenLogicESTNK\nopenLogicFOLNK for an extended language of set theory\n\n\nopenLogicExESTNK\nopenLogicFOLNK for an extended language of set theory with arbitrary predicates and functions\n\n\nopenLogicSSTNK\nopenLogicFOLNK for an extended language of set theory with separation abstracts\n\n\nopenLogicExSSTNK\nopenLogicFOLNK for an extended language of set theory with separation abstracts and arbitrary predicates and functions\n\n\n\n\nExercises are given by specifying the system, and the sequent to be proved. So an exercise can be constructed like so:\n```{.TreeDeduction .propNK}\n1.1 P\\/Q, ~P :|-: Q \n```\nwhich produces:\n1.1 P\\/Q, ~P :|-: Q \nInstead of .propNK etc, you can also use system=\"propNK\".\n(Remember to click on a node in order to interact, and to press Ctrl-Enter to create the first child node)\nA completed proof will look like this:\n1.2 :|-: (P-&gt;Q)-&gt;((R-&gt;P)-&gt;(R-&gt;Q))\n| {\n|   \"label\": \"(P-&gt;Q)-&gt;((R-&gt;P)-&gt;(R-&gt;Q))\",\n|   \"rule\": \"-&gt;I(1)\",\n|   \"ident\": 0,\n|   \"forest\": [\n|     {\n|       \"label\": \"(R-&gt;P)-&gt;(R-&gt;Q)\",\n|       \"rule\": \"-&gt;I(2)\",\n|       \"ident\": 1,\n|       \"forest\": [\n|         {\n|           \"label\": \"R-&gt;Q\",\n|           \"rule\": \"-&gt;I(3)\",\n|           \"ident\": 2,\n|           \"forest\": [\n|             {\n|               \"label\": \"Q\",\n|               \"rule\": \"-&gt;E\",\n|               \"ident\": 3,\n|               \"forest\": [\n|                 {\n|                   \"label\": \"P-&gt;Q\",\n|                   \"rule\": \"(1)\",\n|                   \"ident\": 4,\n|                   \"forest\": [\n|                     {\n|                       \"label\": \"\",\n|                       \"rule\": \"\",\n|                       \"ident\": 5,\n|                       \"forest\": []\n|                     }\n|                   ]\n|                 },\n|                 {\n|                   \"label\": \"P\",\n|                   \"rule\": \"-&gt;E\",\n|                   \"ident\": 6,\n|                   \"forest\": [\n|                     {\n|                       \"label\": \"R-&gt;P\",\n|                       \"rule\": \"(2)\",\n|                       \"ident\": 7,\n|                       \"forest\": [\n|                         {\n|                           \"label\": \"\",\n|                           \"rule\": \"\",\n|                           \"ident\": 8,\n|                           \"forest\": []\n|                         }\n|                       ]\n|                     },\n|                     {\n|                       \"label\": \"R\",\n|                       \"rule\": \"(3)\",\n|                       \"ident\": 9,\n|                       \"forest\": [\n|                         {\n|                           \"label\": \"\",\n|                           \"rule\": \"\",\n|                           \"ident\": 10,\n|                           \"forest\": []\n|                         }\n|                       ]\n|                     }\n|                   ]\n|                 }\n|               ]\n|             }\n|           ]\n|         }\n|       ]\n|     }\n|   ]\n| }\nWith rule names to the right of inference lines, and assumptions labeled to the right of the rule citation (with or without parentheses). Discharged assumptions are marked using an inference with empty premise, and the assumption label on its own to the right of the inference line."
  },
  {
    "objectID": "gentzen-ND.html#rules-for-.propnj-and-.propnk",
    "href": "gentzen-ND.html#rules-for-.propnj-and-.propnk",
    "title": "10  Gentzen-Prawitz Natural Deduction",
    "section": "10.2 Rules for .propNJ and .propNK",
    "text": "10.2 Rules for .propNJ and .propNK\nHere’s a brief summary of NJ’s propositional rules. The notation [ψ]/φ indicates that an assumption ψ can be discharged from the subproof establishing φ\n\n\n\n\nRule\nPremises\nConclusion\n\n\n\n\n∧I\nφ, ψ\nφ∧ψ\n\n\n∧E\nφ∧ψ\nφ OR ψ\n\n\n∨I\nφ\nφ∨ψ OR ψ∨φ\n\n\n∨E\nφ∨ψ, [φ]/χ, [ψ]/χ\nχ\n\n\n→I\n[φ]/ψ\nφ→ψ\n\n\n→E\nφ,φ→ψ\nψ\n\n\n¬I\n[φ]/⊥\n¬φ\n\n\n¬E\nφ, ¬φ\n⊥\n\n\n¬E\n⊥\nφ\n\n\n\n\nNK results from the addition of one more rule:\n\n\n\n\nRule\nPremises\nConclusion\n\n\n\n\nLEM\n\nφ∨¬φ\n\n\n\n\nThe syntax of formulas accepted for is that for the propositional systems for Kalish & Montague/The Carnap Book in the Systems Reference."
  },
  {
    "objectID": "gentzen-ND.html#rules-for-open-logic-systems",
    "href": "gentzen-ND.html#rules-for-open-logic-systems",
    "title": "10  Gentzen-Prawitz Natural Deduction",
    "section": "10.3 Rules for Open Logic Systems",
    "text": "10.3 Rules for Open Logic Systems\nFor the systems .openLogicNK, etc., the rules are:\n\n\n\n\nRule\nPremises\nConclusion\n\n\n\n\n∧I\nφ, ψ\nφ∧ψ\n\n\n∧E\nφ ∧ ψ\nφ OR ψ\n\n\n∨I\nφ\nφ∨ψ OR ψ∨φ\n\n\n∨E\nφ∨ψ, [φ]/χ, [ψ]/χ\nχ\n\n\n→I\n[φ]/ψ\nφ→ψ\n\n\n→E\nφ,φ→ψ\nψ\n\n\n↔︎I\n[φ]/ψ, [ψ]/φ\nφ↔︎ψ\n\n\n↔︎E\nφ↔︎ψ, φ\nψ\n\n\n\nφ↔︎ψ, ψ\nφ\n\n\n¬I\n[φ]/⊥\n¬φ\n\n\n¬E\nφ, ¬φ\n⊥\n\n\nX\n⊥\nφ\n\n\nIP\n[¬φ]/⊥\nφ\n\n\n\n\nFor the first order systems, we also have the rules:\n\n\n\n\nRule\nPremises\nConclusion\n\n\n\n\n∀I\nφ(a)\n∀x φ(x)\n\n\nVE\n∀x φ(x)\nφ(t)\n\n\n∃I\nφ(t)\n∃x φ(x)\n\n\n∃E\n∃x φ(x), [φ(a)]/ψ\nψ\n\n\n=I\n\nt=t\n\n\n=E\nφ(t),t=s\nφ(s)\n\n\n\n\nThe syntax of accepted for the Open Logic systems is described in the Systems Reference. The natural deduction systems for arithmetic and set theory only differ in the syntax; there are no axioms.\nHere is an example of a derivation in the language of arithmetic:\n|{\"ident\":7,\"label\":\"Ax ~ x &lt; 0\",\"rule\":\"AI\",\"forest\":[{\"ident\":11,\"label\":\"~ a &lt; 0\",\"rule\":\"~I 1\",\"forest\":[{\"ident\":11,\"label\":\"_|_\",\"rule\":\"~E\",\"forest\":[{\"ident\":12,\"label\":\"Ez z' + a = 0\",\"rule\":\"-&gt;E\",\"forest\":[{\"ident\":14,\"label\":\"a &lt; 0\",\"rule\":\"1\",\"forest\":[{\"ident\":51,\"label\":\"\",\"rule\":\"\",\"forest\":[]}]},{\"ident\":15,\"label\":\"a &lt; 0 -&gt; Ez z'+a = 0\",\"rule\":\"-&gt;I 2\",\"forest\":[{\"ident\":52,\"label\":\"Ez z'+a = 0\",\"rule\":\"&lt;-&gt;E\",\"forest\":[{\"ident\":52,\"label\":\"a &lt; 0 &lt;-&gt; Ez z'+a = 0\",\"rule\":\"AE\",\"forest\":[{\"ident\":53,\"label\":\"Ay(a &lt; y &lt;-&gt; Ez z'+a = y)\",\"rule\":\"AE\",\"forest\":[{\"ident\":54,\"label\":\"AxAy(x &lt; y &lt;-&gt; Ez z'+x = y)\",\"rule\":\"\",\"forest\":[]}]}]},{\"ident\":62,\"label\":\"a &lt; 0\",\"rule\":\"2\",\"forest\":[{\"ident\":63,\"label\":\"\",\"rule\":\"\",\"forest\":[]}]}]}]}]},{\"ident\":13,\"label\":\"~Ez z' + a = 0\",\"rule\":\"AE\",\"forest\":[{\"ident\":64,\"label\":\"Ax~Ez z' + x = 0\",\"rule\":\"\",\"forest\":[]}]}]}]}]}"
  },
  {
    "objectID": "gentzen-ND.html#advanced-usage",
    "href": "gentzen-ND.html#advanced-usage",
    "title": "10  Gentzen-Prawitz Natural Deduction",
    "section": "10.4 Advanced Usage",
    "text": "10.4 Advanced Usage\n\n10.4.1 Options\nIn addition to the standard points=VALUE and submission=\"none\" options, Gentzen-Prawitz natural deduction exercises allow for you to set init=\"now\" to have proofchecking begin as soon as the proof is loaded (rather than waiting for input) as well as the following allowed arguments to options=\"…\":\n\n\n\n\nOption name\nEffect\n\n\n\n\nprepopulate\nPrepopulates the endformula of an exercises with the conclusion to be shown\n\n\ndisplayJSON\nCtrl-? will toggle display of an editable JSON representation of the proof\n\n\n\n\n\n\n10.4.2 Runtime Axioms and Rules\nThe “extended” mathematical systems, openLogicExArithNK openLogicExSTNK openLogicExESTNK and openLogicExSSTNK can be equipped with extra axioms and rules. To set an axiom or a rule for a system, include an option of the form axiom-NAME=\"RULEVARIANTS\" where NAME is the name that you want your axiom or rule to have, and RULEVARIANTS is a semicolon-separated list of sequents representing the variant schematic forms of the rule. The rule should be cited as Ax-NAME. Axiom names are case-insensitive, so don’t rely on upper or lower-case variants of names to distinguish rules.\nWhen entering the schematic sequents representing the forms of a rule, you should indicate which sentence letters, constants, and function symbols are to be read as schematic by preceding each such symbol with a prime, like so: 'P. So, for example:\n~~~{.TreePlayground .openLogicExArithNK init=\"now\" axiom-flip=\"'P('a*'b) :|-: 'P('b*'a); 'P('a+'b) :|-: 'P('b+'a)\"}\n{ \"ident\": 13, \"label\": \"a+b=c\", \"rule\": \"Ax-flip\", \"forest\": [\n    { \"ident\": 15, \"label\": \"b+a=c\", \"rule\": \"\", \"forest\": [] }\n]}\n~~~\nwill produce:\n{ \"ident\": 13, \"label\": \"a+b=c\", \"rule\": \"Ax-flip\", \"forest\": [\n    { \"ident\": 15, \"label\": \"b+a=c\", \"rule\": \"\", \"forest\": [] }\n]}\n\n\n10.4.3 JSON Serialization\nHere’s an incomplete proof, showing how to use the displayJSON option:\n1.1 P\\/Q, ~P :|-: Q\n| {\"ident\":12,\"label\":\"Q\",\"rule\":\"\\\\/E\", \"forest\":[\n|   {\"ident\":13,\"label\":\"P\\\\/Q\",\"rule\":\"\", \"forest\":[]},\n|   {\"ident\":14,\"label\":\"Q\",\"rule\":\"(1)\",  \"forest\":[\n|       {\"ident\":17,\"label\":\"\",\"rule\":\"\",\"forest\":[]}\n|   ]},\n|   {\"ident\":15,\"label\":\"Q\",\"rule\":\"?\",\"forest\":[\n|       {\"ident\":18,\"label\":\"?\",\"rule\":\"\",\"forest\":[]}\n|   ]}\n| ]}\nTo show the JSON representation, click to focus one of the input areas in the proof and press Ctrl-?. To edit the deduction by editing the JSON, try replacing one of the Qs in the JSON panel with a P. The deduction will update to reflect the JSON, so long as the JSON is a well-formed representation of a deduction.\nThe above was generated with\n```{.TreeDeduction .propNK init=\"now\" options=\"displayJSON\"}\n1.1 P\\/Q, ~P :|-: Q \n| {\"ident\":12,\"label\":\"Q\",\"rule\":\"\\\\/E\", \"forest\":[\n|   {\"ident\":13,\"label\":\"P\\\\/Q\",\"rule\":\"\", \"forest\":[]},\n|   {\"ident\":14,\"label\":\"Q\",\"rule\":\"(1)\",  \"forest\":[\n|       {\"ident\":17,\"label\":\"\",\"rule\":\"\",\"forest\":[]}\n|   ]},\n|   {\"ident\":15,\"label\":\"Q\",\"rule\":\"?\",\"forest\":[\n|       {\"ident\":18,\"label\":\"?\",\"rule\":\"\",\"forest\":[]}\n|   ]}\n| ]}\n```\nThe displayJSON option is useful for saving and communicating proofs, since one can reproduce a proof by pasting its JSON representation into the panel where the JSON representation is displayed. It’s also useful for creating exercises in which the problems are partially completed, since, as in the example above, one can prefill an exercise by supplying a JSON representation below the statement of the problem.\n\n\n10.4.4 Playgrounds\nOne can generate a Gentzen-Prawitz playground (where there is no goal, but where what you’ve proved is displayed) using something like the following:\n```{.TreePlayground .propNK init=\"now\" options=\"displayJSON\"}\n| {\"ident\":12,\"label\":\"Q\",\"rule\":\"\\\\/E (1) (2)\",\"forest\":[\n|   {\"ident\":13,\"label\":\"P\\\\/Q\",\"rule\":\"\",\"forest\":[]},\n|   {\"ident\":14,\"label\":\"Q\",\"rule\":\"(1)\",\"forest\":[\n|       {\"ident\":17,\"label\":\"\",\"rule\":\"\",\"forest\":[]}\n|   ]},\n|   {\"ident\":15,\"label\":\"Q\",\"rule\":\"-E\",\"forest\":[\n|       {\"ident\":18,\"label\":\"!?\",\"rule\":\"-E\",\"forest\":[\n|           {\"ident\":24,\"label\":\"P\",\"rule\":\"(2)\",\"forest\":[\n|               {\"ident\":27,\"label\":\"\",\"rule\":\"\",\"forest\":[]}\n|           ]},\n|           {\"ident\":25,\"label\":\"-P\",\"rule\":\"\",\"forest\":[]}\n|       ]}\n|   ]}\n| ]}\n```\nThe result, in this case, will be:\n| {\"ident\":12,\"label\":\"Q\",\"rule\":\"\\\\/E (1) (2)\",\"forest\":[\n|   {\"ident\":13,\"label\":\"P\\\\/Q\",\"rule\":\"\",\"forest\":[]},\n|   {\"ident\":14,\"label\":\"Q\",\"rule\":\"(1)\",\"forest\":[\n|       {\"ident\":17,\"label\":\"\",\"rule\":\"\",\"forest\":[]}\n|   ]},\n|   {\"ident\":15,\"label\":\"Q\",\"rule\":\"-E\",\"forest\":[\n|       {\"ident\":18,\"label\":\"!?\",\"rule\":\"-E\",\"forest\":[\n|           {\"ident\":24,\"label\":\"P\",\"rule\":\"(2)\",\"forest\":[\n|               {\"ident\":27,\"label\":\"\",\"rule\":\"\",\"forest\":[]}\n|           ]},\n|           {\"ident\":25,\"label\":\"-P\",\"rule\":\"\",\"forest\":[]}\n|       ]}\n|   ]}\n| ]}\nTry editing the proof to see how the displayed sequent changes!"
  },
  {
    "objectID": "sequent-calculus.html#available-systems",
    "href": "sequent-calculus.html#available-systems",
    "title": "11  Sequent Calculus Deductions",
    "section": "11.1 Available Systems",
    "text": "11.1 Available Systems\nAt the moment, four systems are available:\n\n\n\n\nSystem\nDescription\n\n\n\n\npropLK\nA system based on the propositional fragment of Gentzen’s LK\n\n\npropLJ\nA system based on the propositional fragment of Gentzen’s LJ\n\n\nfoLK\nA system based on the full first order system of LK\n\n\nfoLJ\nA system based on the full first order system of LJ\n\n\n\n\nExercises are given by specifying the desired endsequent. So an exercise can be constructed like so:\n```{.Sequent .propLK}\n1.1 P-&gt;Q, Q-&gt;R :|-: P-&gt;R\n```\nwhich produces:\n1.1 P-&gt;Q, Q-&gt;R :|-: P-&gt;R\n(Remember to click on a node in order to interact, and to press Ctrl-Enter to create the first child node)\nA completed proof will look like this:\n1.2 P, P-&gt;Q :|-: Q\n| {\"ident\":11,\"label\":\"P-&gt;Q,P:|-:Q\",\"rule\":\"-&gt;L\",\"forest\":[{\"ident\":12,\"label\":\"Q,P:|-:Q\",\"rule\":\"Cut\",\"forest\":[{\"ident\":13,\"label\":\"R,P,Q:|-:Q\",\"rule\":\"XL\",\"forest\":[{\"ident\":58,\"label\":\"Q,P,R:|-:Q\",\"rule\":\"WL\",\"forest\":[{\"ident\":59,\"label\":\"Q:|-:Q\",\"rule\":\"Ax\",\"forest\":[{\"ident\":14,\"label\":\"\",\"rule\":\"\",\"forest\":[]}]}]}]},{\"ident\":14,\"label\":\"Q,P:|-:Q,R\",\"rule\":\"XR\",\"forest\":[{\"ident\":57,\"label\":\"Q,P:|-:R,Q\",\"rule\":\"WR\",\"forest\":[{\"ident\":10,\"label\":\"Q,P:|-:Q\",\"rule\":\"WL\",\"forest\":[{\"ident\":12,\"label\":\"Q:|-:Q\",\"rule\":\"Ax\",\"forest\":[{\"ident\":13,\"label\":\"\",\"rule\":\"\",\"forest\":[]}]}]}]}]}]},{\"ident\":15,\"label\":\"P:|-:Q,P\",\"rule\":\"WR\",\"forest\":[{\"ident\":16,\"label\":\"P:|-:P\",\"rule\":\"Ax\",\"forest\":[{\"ident\":11,\"label\":\"\",\"rule\":\"\",\"forest\":[]}]}]}]}\nWith :|-: indicating a turnstile, and rule names to the right of inference lines."
  },
  {
    "objectID": "sequent-calculus.html#rules-for-lk-and-lj",
    "href": "sequent-calculus.html#rules-for-lk-and-lj",
    "title": "11  Sequent Calculus Deductions",
    "section": "11.2 Rules for LK and LJ",
    "text": "11.2 Rules for LK and LJ\nHere’s a brief summary of LK’s propositional “operational” rules:\n\n\n\n\nRule\nPremise Sequents\nConclusion Sequent\n\n\n\n\n&R\nΓ ⊢ Δ,φ ; Γ ⊢ Δ,ψ\nΓ ⊢ Δ, φ & ψ\n\n\n&L\nφ, Γ ⊢ Δ\nφ & ψ, Γ ⊢ Δ\n\n\n&L\nψ, Γ ⊢ Δ\nφ & ψ, Γ ⊢ Δ\n\n\n∨L\nφ, Γ ⊢ Δ ; ψ, Γ ⊢ Δ\nφ ∨ ψ, Γ ⊢ Δ\n\n\n∨R\nΓ ⊢ Δ, φ\nΓ ⊢ Δ, φ ∨ ψ\n\n\n∨R\nΓ ⊢ Δ, ψ\nΓ ⊢ Δ, φ ∨ ψ\n\n\n→L\nΓ ⊢ Δ, φ; ψ, Γ ⊢ Δ\nφ → ψ, Γ ⊢ Δ\n\n\n→R\nφ, Γ ⊢ Δ, ψ\nΓ ⊢ Δ, φ → ψ\n\n\n¬L\nΓ ⊢ Δ, φ\n¬φ, Γ ⊢ Δ\n\n\n¬R\nφ, Γ ⊢ Δ\nΓ ⊢ Δ, ¬φ\n\n\n\n\nSome structural rules (interchange, and contraction) are applied automatically to the parts of the sequent that match the Γ and Δ, so there is some room for a little bit of laxness there.1\nThe following explicit structural inferences are allowed:\n\n\n\n\nRule\nPremise Sequents\nConclusion Sequent\n\n\n\n\nCR\nΓ ⊢ Δ\nΓ ⊢ Δ\n\n\nCL\nΓ ⊢ Δ\nΓ ⊢ Δ\n\n\nXR\nΓ ⊢ Δ\nΓ ⊢ Δ\n\n\nXL\nΓ ⊢ Δ\nΓ ⊢ Δ\n\n\nWR\nΓ ⊢ Δ\nΓ ⊢ Δ,Δ’\n\n\nWL\nΓ ⊢ Δ\nΓ,Γ’ ⊢ Δ\n\n\nCut\nφ, Γ ⊢ Δ ; Γ’ ⊢ Δ’,φ\nΓ,Γ’ ⊢ Δ,Δ’\n\n\nAx\n\nφ ⊢ φ\n\n\n\n\nThe contraction and exchange rules are actually redundant here, because of the fact that structural rules are applied automatically to the formulas substituted in for Γ,Δ. They’re included here for presentation. Weakening is modified to allow for an arbitrary number of new formulas to be added.\nThe first order system for LK adds the following rules to the above:\n\n\n\n\nRule\nPremise Sequents\nConclusion Sequent\n\n\n\n\n∀L\nφ(τ), Γ ⊢ Δ\n∀υφ(υ), Γ ⊢ Δ\n\n\n∃L\nφ(τ), Γ ⊢ Δ\n∃υφ(υ), Γ ⊢ Δ\n\n\n∀R\nΓ ⊢ Δ, φ(τ)\nΓ ⊢ Δ, ∀υφ(υ)\n\n\n∃R\nΓ ⊢ Δ, φ(τ)\nΓ ⊢ Δ, ∃υφ(υ)\n\n\n\n\nThe usual eigenvariable restrictions apply to ∀L and ∃R: the term τ must be a constant or variable that does not occur anywhere in the conclusion of the inference (i.e. not in Γ,Δ, or φ(υ)).\nThe propositional and first-order systems for LJ are just like those for LK with the additional restriction that at most one formula can occur on the right hand side of a sequent."
  },
  {
    "objectID": "sequent-calculus.html#syntax-for-lk-and-lj",
    "href": "sequent-calculus.html#syntax-for-lk-and-lj",
    "title": "11  Sequent Calculus Deductions",
    "section": "11.3 Syntax for LK and LJ",
    "text": "11.3 Syntax for LK and LJ\nAs usual, in writing formulas and inference rules, any of &,∧ or /\\ can be used for conjunction, and any of ∨, v, and \\/ can be used for disjunction. Any of -&gt; or → can be used for the conditional, and any of ¬, -, or ~ for negation. Sentence letters are P through W or P with subscripts like so: P_1. Predicates are F through L, or F with a subscript. Variables are v through z or x with a subscript and constants are a through e or c with a subscript."
  },
  {
    "objectID": "sequent-calculus.html#advanced-usage",
    "href": "sequent-calculus.html#advanced-usage",
    "title": "11  Sequent Calculus Deductions",
    "section": "11.4 Advanced Usage",
    "text": "11.4 Advanced Usage\n\n11.4.1 Options\nIn addition to the standard points=VALUE and submission=\"none\" options, sequent calculus exercises allow for you to set init=\"now\" to have proofchecking begin as soon as the proof is loaded (rather than waiting for input) as well as the following options:\n\n\n\n\nName\nEffect\n\n\n\n\ndisplayJSON\nCtrl-? will toggle display of an editable JSON representation of the proof\n\n\n\n\n\n\n11.4.2 JSON Serialization\nProof 1.2 above was generated using the displayJSON option, with the following invocation:\n```{.Sequent .propLK init=\"now\" options=\"displayJSON\"}\n1.2 P, P-&gt;Q :|-: Q\n| {\"ident\":11,\"label\":\"P-&gt;Q,P:|-:Q\",\"rule\":\"-&gt;L\",\"forest\":[{\"ident\":12,\"label\":\"Q,P:|-:Q\",\"rule\":\"Cut\",\"forest\":[{\"ident\":13,\"label\":\"R,P,Q:|-:Q\",\"rule\":\"XL\",\"forest\":[{\"ident\":58,\"label\":\"Q,P,R:|-:Q\",\"rule\":\"WL\",\"forest\":[{\"ident\":59,\"label\":\"Q:|-:Q\",\"rule\":\"Ax\",\"forest\":[{\"ident\":14,\"label\":\"\",\"rule\":\"\",\"forest\":[]}]}]}]},{\"ident\":14,\"label\":\"Q,P:|-:Q,R\",\"rule\":\"XR\",\"forest\":[{\"ident\":57,\"label\":\"Q,P:|-:R,Q\",\"rule\":\"WR\",\"forest\":[{\"ident\":10,\"label\":\"Q,P:|-:Q\",\"rule\":\"WL\",\"forest\":[{\"ident\":12,\"label\":\"Q:|-:Q\",\"rule\":\"Ax\",\"forest\":[{\"ident\":13,\"label\":\"\",\"rule\":\"\",\"forest\":[]}]}]}]}]}]},{\"ident\":15,\"label\":\"P:|-:Q,P\",\"rule\":\"WR\",\"forest\":[{\"ident\":16,\"label\":\"P:|-:P\",\"rule\":\"Ax\",\"forest\":[{\"ident\":11,\"label\":\"\",\"rule\":\"\",\"forest\":[]}]}]}]}\n```\nThe displayJSON option is useful for saving and communicating proofs, since one can reproduce a proof by pasting its JSON representation into the panel where the JSON representation is displayed. It’s also useful for creating exercises in which the problems are partially completed, since, as in the example above, one can prefill an exercise by supplying a JSON representation below the statement of the problem (beginning each line of the JSON with a bar character |).\n\n\n11.4.3 Playgrounds\nYou can generate a sequent calculus playground (where there is no goal, but where what you’ve proved is displayed) using something like the following:\n```{.SequentPlayground .propLK init=\"now\" options=\"displayJSON\"}\n{\"ident\":11,\"label\":\"P-&gt;Q,P:|-:Q\",\"rule\":\"-&gt;L\",\"forest\":[{\"ident\":12,\"label\":\"Q,P:|-:Q\",\"rule\":\"Cut\",\"forest\":[{\"ident\":13,\"label\":\"R,P,Q:|-:Q\",\"rule\":\"XL\",\"forest\":[{\"ident\":58,\"label\":\"Q,P,R:|-:Q\",\"rule\":\"WL\",\"forest\":[{\"ident\":59,\"label\":\"Q:|-:Q\",\"rule\":\"Ax\",\"forest\":[{\"ident\":14,\"label\":\"\",\"rule\":\"\",\"forest\":[]}]}]}]},{\"ident\":14,\"label\":\"Q,P:|-:Q,R\",\"rule\":\"XR\",\"forest\":[{\"ident\":57,\"label\":\"Q,P:|-:R,Q\",\"rule\":\"WR\",\"forest\":[{\"ident\":10,\"label\":\"Q,P:|-:Q\",\"rule\":\"WL\",\"forest\":[{\"ident\":12,\"label\":\"Q:|-:Q\",\"rule\":\"Ax\",\"forest\":[{\"ident\":13,\"label\":\"\",\"rule\":\"\",\"forest\":[]}]}]}]}]}]},{\"ident\":15,\"label\":\"P:|-:Q,P\",\"rule\":\"WR\",\"forest\":[{\"ident\":16,\"label\":\"P:|-:P\",\"rule\":\"Ax\",\"forest\":[{\"ident\":11,\"label\":\"\",\"rule\":\"\",\"forest\":[]}]}]}]}\n```\nOr like:\n```{.SequentPlayground .propLK init=\"now\" options=\"displayJSON\"}\n```\nThe result, in the first case, will be:\n{\"ident\":11,\"label\":\"P-&gt;Q,P:|-:Q\",\"rule\":\"-&gt;L\",\"forest\":[{\"ident\":12,\"label\":\"Q,P:|-:Q\",\"rule\":\"Cut\",\"forest\":[{\"ident\":13,\"label\":\"R,P,Q:|-:Q\",\"rule\":\"XL\",\"forest\":[{\"ident\":58,\"label\":\"Q,P,R:|-:Q\",\"rule\":\"WL\",\"forest\":[{\"ident\":59,\"label\":\"Q:|-:Q\",\"rule\":\"Ax\",\"forest\":[{\"ident\":14,\"label\":\"\",\"rule\":\"\",\"forest\":[]}]}]}]},{\"ident\":14,\"label\":\"Q,P:|-:Q,R\",\"rule\":\"XR\",\"forest\":[{\"ident\":57,\"label\":\"Q,P:|-:R,Q\",\"rule\":\"WR\",\"forest\":[{\"ident\":10,\"label\":\"Q,P:|-:Q\",\"rule\":\"WL\",\"forest\":[{\"ident\":12,\"label\":\"Q:|-:Q\",\"rule\":\"Ax\",\"forest\":[{\"ident\":13,\"label\":\"\",\"rule\":\"\",\"forest\":[]}]}]}]}]}]},{\"ident\":15,\"label\":\"P:|-:Q,P\",\"rule\":\"WR\",\"forest\":[{\"ident\":16,\"label\":\"P:|-:P\",\"rule\":\"Ax\",\"forest\":[{\"ident\":11,\"label\":\"\",\"rule\":\"\",\"forest\":[]}]}]}]}\nand in the second will be:\n\nTry editing each proof, and see how the displayed sequent changes!"
  },
  {
    "objectID": "sequent-calculus.html#footnotes",
    "href": "sequent-calculus.html#footnotes",
    "title": "11  Sequent Calculus Deductions",
    "section": "",
    "text": "Variations on the sequent calculus without this simplification will be supported in the future.↩︎"
  },
  {
    "objectID": "qualitative.html#short-answer",
    "href": "qualitative.html#short-answer",
    "title": "12  Qualitative Problems",
    "section": "12.1 Short Answer",
    "text": "12.1 Short Answer\nTo create a short-answer problem, use the class ShortAnswer, and simply provide a short answer question, like so:\n```{.QualitativeProblem .ShortAnswer}\n1.1 How are you feeling today?\n```\nThe number indicates the exercise number. This is immediately followed by the question. The result will be:\n1.1 How are you feeling today?\nStudent submissions to short-answer prompts will be recorded, but by default will not be assigned any credit. They will, however, be visible in the review section for the assignment, so it will be possible to assign them partial credit, as if they were an exam problem. The behavior for awarding credit can also be configured with the give-credit option, see Advanced Usage below."
  },
  {
    "objectID": "qualitative.html#multiple-choice",
    "href": "qualitative.html#multiple-choice",
    "title": "12  Qualitative Problems",
    "section": "12.2 Multiple Choice",
    "text": "12.2 Multiple Choice\nTo create a multiple-choice problem, use the class MultipleChoice, and provide a question along with a set of answers (one per line), like so:\n```{.QualitativeProblem .MultipleChoice}\n1.2 How are you feeling today?\n| Good!\n| +OK!\n| Meh.\n```\nThe answers should be typed as you want them to be displayed. Carnap doesn’t currently render formulas or LaTeX within multiple choice answers, and HTML escape codes like &or; will cause some trouble for the answer-parser. If you want to include a formula with symbols, just use the symbols directly in the answer. You can copy-paste from here: ¬,→,∧,∨,∀,∃.\nAnswers marked with a + or a * will be accepted as correct. Answers marked with a - or a + will be pre-selected. So the result of the above is:\n1.2 How are you feeling today?\n| Good!\n| +OK!\n| Meh.\nWhich has “OK!” preselected and just one correct answer, namely “OK!”."
  },
  {
    "objectID": "qualitative.html#multiple-selection",
    "href": "qualitative.html#multiple-selection",
    "title": "12  Qualitative Problems",
    "section": "12.3 Multiple Selection",
    "text": "12.3 Multiple Selection\nTo create a multiple-selection problem, use the class MultipleSelection,\nTo create a multiple-choice problem, use the class MultipleChoice, and provide a question along with a set of answers (one per line), like so:\n```{.QualitativeProblem .MultipleSelection}\n1.2 How are you feeling today?\n| - Bad!\n| + OK!\n| * I contain multitudes.\n```\nAs above, answers should be typed as you want them displayed.\nAnswers marked with a + or a * must be selected for a correct answer, and other answers must not be selected. Answers marked with a - or a + will be pre-selected. So the result of the above is:\n1.2 How are you feeling today?\n| - Bad!\n| + OK!\n| * I contain multitudes."
  },
  {
    "objectID": "qualitative.html#numerical",
    "href": "qualitative.html#numerical",
    "title": "12  Qualitative Problems",
    "section": "12.4 Numerical",
    "text": "12.4 Numerical\nTo create a numerical problem, use the class .Numerical and provide a question and answer, in the format ANSWER : QUESTION, optionally pre-filling with hint written below the question, like so:\n```{.QualitativeProblem .Numerical}\n1.3 8 : How many bits in a byte?\n| 2^3\n```\nThe above produces:\n1.3 8 : How many bits in a byte?\n| 2^3\nAnswers must be given as decimal expressions or fractions (so, the above \\(2^3\\) won’t be accepted without being evaluated). They’ll be saved as decimal expressions."
  },
  {
    "objectID": "qualitative.html#advanced-usage",
    "href": "qualitative.html#advanced-usage",
    "title": "12  Qualitative Problems",
    "section": "12.5 Advanced Usage",
    "text": "12.5 Advanced Usage\n\n12.5.0.1 Options and Attributes\nIn addition to allowing for turning off submission with submission=\"none\", qualitative problems also have the following options, which can be configured using the options field, for example setting options=\"exam\" or options=\"exam check\". See the general pandoc documentation for more details.\n\n\n\n\nName\nEffect\n\n\n\n\nexam\nAllows for submission of work which is incomplete or incorrect\n\n\ncheck\nAdds a button which checks results without submitting\n\n\n\n\nThis won’t have any effect on a short-answer question, since there’s no notion of “correct” to apply. Qualitative questions also permit assigning custom point values with the points=VALUE, like most other graded problems.\nShort answer questions also accept a give-credit option, which has the following available settings\n\n\n\n\nName\nEffect\n\n\n\n\nonSubmission\nCounts all submissions as correct\n\n\n\n\nso, adding give-credit=\"onSubmisson\" to a short answer question will award credit automatically for any submission.\nFor more complicated formatting of multiple choice and multiple selection options, you can also use the content-format option, which has the following available settings\n\n\n\n\nName\nEffect\n\n\n\n\nhtml\nApplies html tags that appear in the answer options\n\n\n\n\nSo, for example, one can write:\n```{.QualitativeProblem .MultipleChoice options=\"check\" content-format=\"html\"}\n1. \"Truth\" is:\n| a &lt;b&gt;propery&lt;/b&gt; of propositions\n| a logical &lt;b&gt;object&lt;/b&gt;\n| *A five-letter word\n```\nto generate\n1. \"Truth\" is:\n| a &lt;b&gt;propery&lt;/b&gt; of propositions\n| a logical &lt;b&gt;object&lt;/b&gt;\n| *A five-letter word"
  },
  {
    "objectID": "truth-tree.html#setting-another-system",
    "href": "truth-tree.html#setting-another-system",
    "title": "13  Truth Trees (Semantic Tableaux)",
    "section": "13.1 Setting another system",
    "text": "13.1 Setting another system\nBy default, truth trees operate on Ichikawa-Jenkins SL. You can change this to something else using the checkFunction attribute (default value is \"checkIchikawaJenkinsSLTableau\").\nFor example,\n```{.TruthTree .Prop checkFunction=\"checkIchikawaJenkinsQLTableau\"}\n1.1 P,P-&gt;Q,~Q\n```"
  },
  {
    "objectID": "syntax-check.html#syntax-check-options",
    "href": "syntax-check.html#syntax-check-options",
    "title": "14  Syntax Check Exercises",
    "section": "14.1 Syntax Check Options",
    "text": "14.1 Syntax Check Options\nYou can require explicit “parsing of atoms” (pressing return with when an atom is highlighted to acknowledge that it contains no connectives) by including adding parseAtoms in the options attribute. So for example,\n~~~{.SynChecker .MatchClean submission=\"none\" options=\"parseAtoms\"} \n1.3 P-&gt;Q\n~~~\nGenerates\n\n\n1.3"
  },
  {
    "objectID": "systems.html",
    "href": "systems.html",
    "title": "Supported Systems",
    "section": "",
    "text": "Todo:\nThe available set theory systems are: elementarySetTheory and separativeSetTheory. The available propositional modal logic systems are: hardegreeL hardegreeK hardegreeT hardegreeB hardegreeD hardegree4 and hardegree5. The available predicate modal logic system is hardegreeMPL, and the available “world theory” system is hardegreeWTL."
  },
  {
    "objectID": "systems.html#bergmann-moore-nelson-the-logic-book",
    "href": "systems.html#bergmann-moore-nelson-the-logic-book",
    "title": "Supported Systems",
    "section": "Bergmann, Moore & Nelson, The Logic Book",
    "text": "Bergmann, Moore & Nelson, The Logic Book\n\nSentential logic\nFor the corresponding proof systems, see here.\n\nSelected with system=\"...\": LogicBookSD LogicBookSDPlus\nSentence letters:A…Z\nBrackets allowed (, )\nAssociative \\(\\land\\), \\(\\lor\\): left\nConnectives:\n\n\n\n\nConnective\nKeyboard\n\n\n\n\n⊃\n-&gt;, =&gt;,&gt;\n\n\n&\n/\\, &, and\n\n\n∨\n\\/, |, or\n\n\n↔︎\n&lt;-&gt;, &lt;=&gt;\n\n\n~\n-, ~, not\n\n\n\nExample:\n`A /\\ B /\\ (C_1 -&gt; (~R_2 \\/ (S &lt;-&gt; T)))`{system=\"LogicBookSD\"}\nproduces A /\\ B /\\ (C_1 -&gt; (~R_2 \\/ (S &lt;-&gt; T))).\n\n\nPredicate logic\n\nSelected with system=\"...\": LogicBookPD\nSentence letters: A … Z\nPredicate symbols: A …Z\nConstant symbols: a … v\nFunction symbols: no\nVariables: w…z\nAtomic formulas: \\(Fax\\)\nIdentity: no\nQuantifiers: \\((\\forall x)\\), \\((\\exists x)\\)\n\nQuantifiers:\n\n\n\nConnective\nKeyboard\n\n\n\n\n∀\nA\n\n\n∃\nE\n\n\n\nExample:\n`(Ax)(Gabx -&gt; (Ew)(Hxw /\\ P))`{system=\"LogicBookPD\"}\nproduces (Ax)(Gabx -&gt; (Ew)(Hx /\\ P))\n\n\nPredicate logic with equality\n\nSelected with system=\"...\": LogicBookPDE\nFunction symbols: a…t\nVariables: w…z\n\n\n\n\nConnective\nKeyboard\n\n\n\n\n=\n=\n\n\n\nExample:\n`(Ax)(Gabx -&gt; (Ew)(Hxw /\\ P /\\ ~f(x)=w))`{system=\"LogicBookPDE\"}\nproduces (Ax)(Gabx -&gt; (Ew)(Hxw /\\ P /\\ ~f(x)=w))"
  },
  {
    "objectID": "systems.html#bonevac-deduction",
    "href": "systems.html#bonevac-deduction",
    "title": "Supported Systems",
    "section": "Bonevac, Deduction",
    "text": "Bonevac, Deduction\n\nSentential logic\n\nSelected with system=\"...\": bonevacSL\nSentence letters: a…z\nBrackets allowed (, )\nAssociative \\(\\land\\), \\(\\lor\\): no\nConnectives:\n\n\n\n\nConnective\nKeyboard\n\n\n\n\n→\n-&gt;, =&gt;, &gt;\n\n\n&\n/\\, &, and\n\n\n∨\n\\/, |, or\n\n\n↔︎\n&lt;-&gt;, &lt;=&gt;\n\n\n¬\n-, ~, not\n\n\n\nExample:\n`(a & b) & (c_1 -&gt; (~r_2 \\/ (s &lt;-&gt; t)))`{system=\"bonevacSL\"}\nproduces (a /\\ b) /\\ (c_1 -&gt; (~r_2 \\/ (s &lt;-&gt; t))).\n\n\nQuantificational logic\n\nSelected with system=\"...\": bonevacQL\nSentence letters: none\nPredicate symbols: A …Z\nConstant symbols: a … w\nFunction symbols: none\nVariables: x…z\nAtomic formulas: \\(Fax\\)\nIdentity: =\nQuantifiers: \\(\\forall x\\), \\(\\exists x\\)\n\nQuantifiers:\n\n\n\nConnective\nKeyboard\n\n\n\n\n∀\nA\n\n\n∃\nE\n\n\n=\n=\n\n\n\nExample:\n`Ax(Gabx -&gt; Ey(Hxy & Pa & ~x=v))`{system=\"bonevacQL\"}\nproduces Ax(Gabx -&gt; Ey(Hxy & Pa & ~x=v))"
  },
  {
    "objectID": "systems.html#gallow-forall-x-pittsburgh",
    "href": "systems.html#gallow-forall-x-pittsburgh",
    "title": "Supported Systems",
    "section": "Gallow, forall x: Pittsburgh",
    "text": "Gallow, forall x: Pittsburgh\nFor the corresponding proof systems, see here.\n\nSentential logic\n\nSelected with system=\"...\": gallowSL\nSentence letters: A…Z\nBrackets allowed (, ), [, ]\nAssociative \\(\\land\\), \\(\\lor\\): left\n\n\n\n\nConnective\nKeyboard\n\n\n\n\n→\n-&gt;, =&gt;, &gt;\n\n\n∧\n/\\, &, and\n\n\n∨\n\\/, |, or\n\n\n↔︎\n&lt;-&gt;, &lt;=&gt;\n\n\n¬\n-, ~, not\n\n\n⊥\n!?, _|_\n\n\n\nExample:\n`A /\\ B /\\ (C_1 -&gt; (~R_2 \\/ [S &lt;-&gt; T]))`{system=\"gallowSL\"}\nproduces A /\\ B /\\ (C_1 -&gt; (~R_2 \\/ [_|_ &lt;-&gt; T])).\n\n\nFirst-order logic\n\nSelected with system=\"...\": gallowPL\nSentence letters: A …. Z\nPredicate symbols: A …Z\nConstant symbols: a … v\nFunction symbols: none\nVariables: w…z\nIdentity: no\nAtomic formulas: \\(Fax\\)\nQuantifiers: \\(\\forall x\\), \\(\\exists x\\)\n\nQuantifiers:\n\n\n\nConnective\nKeyboard\n\n\n\n\n∀\nA\n\n\n∃\nE\n\n\n\nExample:\n`Ax(Gabx -&gt; Ew((Hxw /\\ P) /\\ Qs))`{system=\"gallowPL\"}\nproduces Ax(Gabx -&gt; Ew((Hxw /\\ P) /\\ Qs))"
  },
  {
    "objectID": "systems.html#gamut-logic-language-and-meaning",
    "href": "systems.html#gamut-logic-language-and-meaning",
    "title": "Supported Systems",
    "section": "Gamut, Logic, Language, and Meaning",
    "text": "Gamut, Logic, Language, and Meaning\n\nPropositional logic\n\nSelected with system=\"...\": gamutIPND gamutPND gamutPNDPlus\nSentence letters: a…z\nBrackets allowed (, )\nAssociative \\(\\land\\), \\(\\lor\\): no\nConnectives:\n\n\n\n\nConnective\nKeyboard\n\n\n\n\n→\n-&gt;, =&gt;, &gt;\n\n\n∧\n/\\, &, and\n\n\n∨\n\\/, |, or\n\n\n↔︎\n&lt;-&gt;, &lt;=&gt;\n\n\n¬\n-, ~, not\n\n\n⊥\n!?, _|_\n\n\n\nExample:\n`(a /\\ b) /\\ (c_1 -&gt; (~r_2 \\/ (_|_ &lt;-&gt; t)))`{system=\"gamutIPND\"}\nproduces (a /\\ b) /\\ (c_1 -&gt; (~r_2 \\/ (_|_ &lt;-&gt; t))).\n\n\nPredicate logic\n\nSelected with system=\"...\": gamutND\nSentence letters: none\nPredicate symbols: A …Z\nConstant symbols: a … r\nFunction symbols: none\nVariables: s…z\nAtomic formulas: \\(Fax\\)\nIdentity: =\nQuantifiers: \\(\\forall x\\), \\(\\exists x\\)\n\nQuantifiers:\n\n\n\nConnective\nKeyboard\n\n\n\n\n∀\nA\n\n\n∃\nE\n\n\n=\n=\n\n\n\nExample:\n`Ax(Gabx -&gt; Ew(Hxw /\\ (_|_ \\/ ~x=w)))`{system=\"gamutND\"}\nproduces Ax(Gabx -&gt; Ew(Hxw /\\ (_|_ \\/ ~x=w)))"
  },
  {
    "objectID": "systems.html#goldfarb-deductive-logic",
    "href": "systems.html#goldfarb-deductive-logic",
    "title": "Supported Systems",
    "section": "Goldfarb, Deductive Logic",
    "text": "Goldfarb, Deductive Logic\n\nPropositional logic\n\nSelected with system=\"...\": goldfarbPropND\nSentence letters: a…z\nBrackets allowed (, )\nAssociative \\(\\land\\), \\(\\lor\\): no\nConnectives:\n\n\n\n\nConnective\nKeyboard\n\n\n\n\n⊃\n&gt;, -&gt;, ⊃, →\n\n\n∙\n., ∧, ∙\n\n\n∨\n\\/, |, or\n\n\n≡\n&lt;-&gt;, &lt;=&gt;, &lt;&gt;\n\n\n-\n-, ~, not\n\n\n⊥\n!?, _|_\n\n\n\nExample:\n`(a /\\ b) /\\ (c_1 -&gt; (~r_2 \\/ (_|_ &lt;-&gt; t)))`{system=\"goldfarbPropND\"}\nproduces (a /\\ b) /\\ (c_1 -&gt; (~r_2 \\/ (_|_ &lt;-&gt; t))).\n\n\nPredicate logic\n\nSelected with system=\"...\": goldfarbND\nSentence letters: none\nPredicate symbols: A …Z\nConstant symbols: none\nFunction symbols: none\nVariables: a … z\nAtomic formulas: \\(Fxy\\)\nIdentity: no\nQuantifiers: \\((\\forall x)\\), \\((\\exists x)\\)\n\nQuantifiers:\n\n\n\nConnective\nKeyboard\n\n\n\n\n∀\nA\n\n\n∃\nE\n\n\n\nExample:\n`(Ax)(Gabx -&gt; (Ew)(Hxw /\\ P))`{system=\"goldfarbND\"}\nproduces Ax(Gax -&gt; Ew(Hxw /\\ Pw))"
  },
  {
    "objectID": "systems.html#hardegree-symbolic-logic",
    "href": "systems.html#hardegree-symbolic-logic",
    "title": "Supported Systems",
    "section": "Hardegree, Symbolic Logic",
    "text": "Hardegree, Symbolic Logic\n\nSentential logic\n\nSelected with system=\"...\": hardegreeSL\nSentence letters: A … Z\nBrackets allowed (, )\nAssociative \\(\\land\\), \\(\\lor\\): left\nConnectives:\n\n\n\n\nConnective\nKeyboard\n\n\n\n\n→\n-&gt;, =&gt;,&gt;\n\n\n&\n/\\, &, and\n\n\n∨\n\\/, |, or\n\n\n↔︎\n&lt;-&gt;, &lt;=&gt;\n\n\n~\n-, ~, not\n\n\n⨳\n!?, _|_\n\n\n\nExample:\n`A & G & (R_1 -&gt; (~R_2 \\/ (_|_ &lt;-&gt; T)))`{system=\"hardegreeSL\"}\nproduces A & G & (R_1 -&gt; (~R_2 \\/ (_|_ &lt;-&gt; T))).\n\n\nPredicate logic\n\nSelected with system=\"...\": hardegreePL\nSentence letters: none\nPredicate symbols: A …Z\nConstant symbols: a … s\nFunction symbols: none\nVariables: t…z\nAtomic formulas: \\(Fax\\)\nIdentity: no\nQuantifiers: \\(\\forall x\\), \\(\\exists x\\)\n\nQuantifiers:\n\n\n\nConnective\nKeyboard\n\n\n\n\n∀\nA\n\n\n∃\nE\n\n\n\nExample:\n`Ax(Gabx -&gt; Ev(Hxe & Ov & _|_))`{system=\"hardegreePL\"}\nproduces Ax(Gabx -&gt; Ev(Hxe & Ov & _|_))"
  },
  {
    "objectID": "systems.html#hausman-kahane-tidman-logic-and-philosophy",
    "href": "systems.html#hausman-kahane-tidman-logic-and-philosophy",
    "title": "Supported Systems",
    "section": "Hausman, Kahane & Tidman, Logic and Philosophy",
    "text": "Hausman, Kahane & Tidman, Logic and Philosophy\n\nSentential logic\n\nSelected with system=\"...\": hausmanSL\nSentence letters: A…Z\nBrackets allowed [, ], (, ), {, }, (only in that order)\nAssociative \\(\\land\\), \\(\\lor\\): no\nConnectives:\n\n\n\n\nConnective\nKeyboard\n\n\n\n\n⊃\n⊃, →,&gt;\n\n\n∙\n., ∧, ∙\n\n\n∨\n\\/, |, or\n\n\n≡\n&lt;-&gt;, &lt;=&gt;, &lt;&gt;\n\n\n~\n-, ~, not\n\n\n\nExample:\n`[A . B] . [C_1 &gt; (~R_2 \\/ {S &lt;&gt; T})]`{system=\"hausmanSL\"}\nproduces [A . B] . [C_1 &gt; (~R_2 \\/ {S &lt;&gt; T})].\n\n\nPredicate logic\n\nSelected with system=\"...\": hausmanPL\nSentence letters: A … Z\nPredicate symbols: A …Z\nConstant symbols: a … t\nFunction symbols: no\nVariables: u…z\nAtomic formulas: \\(Fax\\)\nIdentity: =\nQuantifiers: \\((x)\\), \\((\\exists x)\\)\n\nQuantifiers:\n\n\n\nConnective\nKeyboard\n\n\n\n\n∃\nE\n\n\n=\n=\n\n\n\nExample:\n`(x)[Gabx &gt; (Eu)(Hxu . {P \\/ ~x=u})]`{system=\"hausmanPL\"}\nproduces (x)[Gabx &gt; (Eu)(Hxu . {P \\/ ~x=u})]"
  },
  {
    "objectID": "systems.html#howard-snyder-howard-snyder-wasserman-the-power-of-logic",
    "href": "systems.html#howard-snyder-howard-snyder-wasserman-the-power-of-logic",
    "title": "Supported Systems",
    "section": "Howard-Snyder, Howard-Snyder & Wasserman, The Power of Logic",
    "text": "Howard-Snyder, Howard-Snyder & Wasserman, The Power of Logic\n\nSentential logic\n\nSelected with system=\"...\": howardSnyderSL\nSentence letters: A…Z\nWith subscripts: ?\nBrackets allowed (, ), [, ], {, }\nAssociative \\(\\land\\), \\(\\lor\\): no\nConnectives:\n\n\n\n\nConnective\nKeyboard\n\n\n\n\n→\n-&gt;, =&gt;,&gt;\n\n\n∙\n., ∧, ∙\n\n\n∨\n\\/, |, or\n\n\n↔︎\n&lt;-&gt;, &lt;=&gt;, &lt;&gt;\n\n\n~\n-, ~, not\n\n\n\nExample:\n`(A . B) . [C_1 -&gt; (~R_2 \\/ {S &lt;-&gt; T})]`{system=\"howardSnyderSL\"}\nproduces (A . B) . [C_1 -&gt; (~R_2 \\/ {S &lt;-&gt; T})].\n\n\nPredicate logic\n\nSelected with system=\"...\": howardSnyderPL\nSentence letters: A … Z\nPredicate symbols: A …Z\nConstant symbols: a … u\nFunction symbols: no\nVariables: v…z\nAtomic formulas: \\(Fax\\)\nIdentity: =\nQuantifiers: \\((x)\\), \\((\\exists x)\\)\n\nQuantifiers:\n\n\n\nConnective\nKeyboard\n\n\n\n\n∃\nE\n\n\n=\n=\n\n\n\nExample:\n`(x)[Gabx -&gt; (Ev)(Hxv . (P \\/ ~x=v))]`{system=\"howardSnyderPL\"}\nproduces (x)[Gabx -&gt; (Ev)(Hxv . (P \\/ ~x=v))]"
  },
  {
    "objectID": "systems.html#hurley-concise-introduction-to-logic",
    "href": "systems.html#hurley-concise-introduction-to-logic",
    "title": "Supported Systems",
    "section": "Hurley, Concise Introduction to Logic",
    "text": "Hurley, Concise Introduction to Logic\n\nSentential logic\n\nSelected with system=\"...\": hurleySL\nSentence letters: A…Z\nWith subscripts: ?\nBrackets allowed (, ), [, ], {, }\nAssociative \\(\\land\\), \\(\\lor\\): no\nConnectives:\n\n\n\n\nConnective\nKeyboard\n\n\n\n\n⊃\n⊃, →,&gt;\n\n\n∙\n., ∧, ∙\n\n\n∨\n\\/, |, or\n\n\n≡\n&lt;-&gt;, &lt;=&gt;, &lt;&gt;\n\n\n~\n-, ~, not\n\n\n\nExample:\n`(A . B) . [C_1 &gt; (~R_2 \\/ {S &lt;-&gt; T})]`{system=\"hurleySL\"}\nproduces (A . B) . [C_1 &gt; (~R_2 \\/ {S &lt;-&gt; T})].\n\n\nPredicate logic\n\nSelected with system=\"...\": hurleyPL\nSentence letters: A … Z\nPredicate symbols: A …Z\nConstant symbols: a … w\nFunction symbols: no\nVariables: x…z\nAtomic formulas: \\(Fax\\)\nIdentity: =\nQuantifiers: \\((x)\\), \\((\\exists x)\\)\n\nQuantifiers:\n\n\n\nConnective\nKeyboard\n\n\n\n\n∃\nE\n\n\n=\n=\n\n\n\nExample:\n`(x)[Gabx &gt; (Ey)(Hxy . {P \\/ ~x=y})]`{system=\"hurleyPL\"}\nproduces (x)[Gabx &gt; (Ey)(Hxy . {P \\/ ~x=y})]"
  },
  {
    "objectID": "systems.html#ichikawa-jenkins-forall-x-ubc",
    "href": "systems.html#ichikawa-jenkins-forall-x-ubc",
    "title": "Supported Systems",
    "section": "Ichikawa-Jenkins, forall x: UBC",
    "text": "Ichikawa-Jenkins, forall x: UBC\n\nSentential logic\n\nSelected with system=\"...\": ichikawaJenkinsSL\nSentence letters: A…Z\nBrackets allowed (, ), [, ]\nAssociative \\(\\land\\), \\(\\lor\\): yes\nConnectives:\n\n\n\n\nConnective\nKeyboard\n\n\n\n\n⊃\n-&gt;, =&gt;,&gt;\n\n\n&\n/\\, &, and\n\n\n∨\n\\/, |, or\n\n\n≡\n&lt;-&gt;, &lt;=&gt;\n\n\n¬\n-, ~, not\n\n\n\nExample:\n`A /\\ B /\\ (C_1 -&gt; (~R_2 \\/ [S &lt;-&gt; T]))`{system=\"ichikawaJenkinsSL\"}\nproduces A /\\ B /\\ (C_1 -&gt; (~R_2 \\/ [S &lt;-&gt; T])).\n\n\nQuantificational logic\n\nSelected with system=\"...\": ichikawaJenkinsQL\nSentence letters: none\nPredicate symbols: A …Z\nConstant symbols: a … w\nFunction symbols: none\nVariables: x…z\nAtomic formulas: \\(Fax\\)\nIdentity: =\nQuantifiers: \\(\\forall x\\), \\(\\exists x\\)\n\nQuantifiers:\n\n\n\nConnective\nKeyboard\n\n\n\n\n∀\nA\n\n\n∃\nE\n\n\n=\n=\n\n\n\nExample:\n`Ax(Gabx -&gt; Ey(Hxy /\\ Pa /\\ ~x=y))`{system=\"ichikawaJenkinsQL\"}\nproduces Ax(Gabx -&gt; Ey(Hxy /\\ (Pa /\\ ~x=y)))"
  },
  {
    "objectID": "systems.html#johnson-forall-x-mississippi-state",
    "href": "systems.html#johnson-forall-x-mississippi-state",
    "title": "Supported Systems",
    "section": "Johnson, forall x: Mississippi State",
    "text": "Johnson, forall x: Mississippi State\nFor the corresponding proof systems, see here.\n\nSelected with system=\"...\": johnsonSL\nSentence letters: A…Z\nBrackets allowed (, ), [, ]\nAssociative \\(\\land\\), \\(\\lor\\): yes\nConnectives:\n\n\n\n\nConnective\nKeyboard\n\n\n\n\n→\n-&gt;, =&gt;,&gt;\n\n\n&\n/\\, &, and\n\n\n∨\nv, \\/, |, or\n\n\n↔︎\n&lt;-&gt;, &lt;=&gt;\n\n\n¬\n-, ~, not\n\n\n\nExample:\n`A & B & (C_1 -&gt; (~R_2 \\/ [S &lt;-&gt; T]))`{system=\"johnsonSL\"}\nproduces A & B & (C_1 -&gt; (~R_2 \\/ [S &lt;-&gt; T]))."
  },
  {
    "objectID": "systems.html#leach-krouse-the-carnap-book",
    "href": "systems.html#leach-krouse-the-carnap-book",
    "title": "Supported Systems",
    "section": "Leach-Krouse, The Carnap Book",
    "text": "Leach-Krouse, The Carnap Book"
  },
  {
    "objectID": "systems.html#kalish-montague-logic",
    "href": "systems.html#kalish-montague-logic",
    "title": "Supported Systems",
    "section": "Kalish & Montague, Logic",
    "text": "Kalish & Montague, Logic\nFor the corresponding proof systems, see here.\n\nPropositional logic\n\nSelected with system=\"...\": prop, montagueSC\nSentence letters: P … W\nBrackets allowed (, )\nAssociative \\(\\land\\), \\(\\lor\\): left\nConnectives:\n\n\n\n\nConnective\nKeyboard\n\n\n\n\n→\n-&gt;, =&gt;,&gt;\n\n\n∧\n/\\, &, and\n\n\n∨\n\\/, |, or\n\n\n↔︎\n&lt;-&gt;, &lt;=&gt;\n\n\n¬\n-, ~, not\n\n\n\nExample:\n`P /\\ Q /\\ (R_1 -&gt; (~R_2 \\/ (S &lt;-&gt; T)))`{system=\"prop\"}\nproduces P /\\ Q /\\ (R_1 -&gt; (~R_2 \\/ (S &lt;-&gt; T))).\n\n\nFirst-order logic\n\nSelected with system=\"...\": firstOrder, montagueQC\nSentence letters: P … W\nPredicate symbols: F …O\nConstant symbols: a … e\nFunction symbols: f … h\nVariables: v…z\nAtomic formulas: \\(F(a,x)\\)\nIdentity: =\nQuantifiers: \\(\\forall x\\), \\(\\exists x\\)\n\nQuantifiers:\n\n\n\nConnective\nKeyboard\n\n\n\n\n∀\nA\n\n\n∃\nE\n\n\n=\n=\n\n\n\nExample:\n`Ax(G(a,f(b),x) -&gt; Ev(H(x,v) /\\ P /\\ ~(x=v)))`{system=\"firstOrder\"}\nproduces Ax(G(a,f(b),x) -&gt; Ev(H(x,v) /\\ P /\\ ~(x=v)))\n\n\nMonadic second-order logic\n\nSelected with system=\"...\": secondOrder\nSecond-order variables: X … Z\n\nSymbols:\n\n\n\nConnective\nKeyboard\n\n\n\n\nλ\n\\\n\n\n\nExample:\nExample:\n`AX(\\x[Ey(F(y) /\\ X(x))](a))`{system=\"secondOrder\"}\nproduces AX(\\x[Ey(F(y) /\\ X(x))](a))\n\n\nPolyadic second-order logic\n\nSelected with system=\"...\": polyadicSecondOrder\nSecond-order variables: Xn … Zn\nArity: given by \\(n\\)\n\nExample:\n`AX2(\\x[Ay(F(y) -&gt; X2(x,y))](a))`{system=\"polyadicSecondOrder\"}\nproduces AX2(\\x[Ay(F(y) -&gt; X2(x,y))](a))"
  },
  {
    "objectID": "systems.html#magnus-forall-x",
    "href": "systems.html#magnus-forall-x",
    "title": "Supported Systems",
    "section": "Magnus, forall x",
    "text": "Magnus, forall x\n\nSentential logic\n\nSelected with system=\"...\": magnusSL magnusSLPlus\nSentence letters: A…Z\nBrackets allowed (, ), [, ]\nAssociative \\(\\land\\), \\(\\lor\\): yes\nConnectives:\n\n\n\n\nConnective\nKeyboard\n\n\n\n\n→\n-&gt;, =&gt;,&gt;\n\n\n&\n/\\, &, and\n\n\n∨\n\\/, |, or\n\n\n↔︎\n&lt;-&gt;, &lt;=&gt;\n\n\n¬\n-, ~, not\n\n\n\nExample:\n`A & B & (C_1 -&gt; (~R_2 \\/ [S &lt;-&gt; T]))`{system=\"magnusSL\"}\nproduces A & B & (C_1 -&gt; (~R_2 \\/ [S &lt;-&gt; T])).\n\n\nQuantificational logic\n\nSelected with system=\"...\": magnusQL\nSentence letters: none\nPredicate symbols: A …Z\nConstant symbols: a … w\nFunction symbols: none\nVariables: x…z\nAtomic formulas: \\(Fax\\)\nIdentity: =\nQuantifiers: \\(\\forall x\\), \\(\\exists x\\)\n\nQuantifiers:\n\n\n\nConnective\nKeyboard\n\n\n\n\n∀\nA\n\n\n∃\nE\n\n\n=\n=\n\n\n\nExample:\n`Ax(Gabx -&gt; Ey(Hxy & Pa & ~x=v))`{system=\"magnusQL\"}\nproduces Ax(Gabx -&gt; Ey(Hxy & Pa & ~x=v))"
  },
  {
    "objectID": "systems.html#open-logic-project",
    "href": "systems.html#open-logic-project",
    "title": "Supported Systems",
    "section": "Open Logic Project",
    "text": "Open Logic Project\nPlain propositional and first-order logic uses the same syntax as the TFL and FOL systems of forall x: Calgary, 2019+ version (see below. The parser for openLogicNK and openLogicLK is synonymous with thomasBolducAndZachTFL2019; and openLogicFOLNK and openLogicFOLLK with thomasBolducAndZachFOL2019.\nTwo OLP proof systems are supported: sequent calculus and natural deduction.\nIn addition, there are special systems supporting the language of arithmetic and the language of set theory.\n\nArithmetic\n\nSelected with system=\"...\": openLogicArithNK\nPredicate symbols: &lt; (two-place, infix)\nConstant symbols: a … r, 0\nFunction symbols: ' (one-place, postfix), +, * (two-place, infix)\nVariables: s…z\nIdentity: =, ≠\n\n\n\n\nSymbol\nKeyboard\n\n\n\n\n×\n*\n\n\n≠\n!=\n\n\n\nExample:\n`AxAy x * y' = (x * y) + y /\\ Ax(0!=x -&gt; 0&lt;x)`{system=\"openLogicArithNK\"}\nproduces AxAy x * y' = (x * y) + y /\\ Ax(0!=x -&gt; 0&lt;x)\n\n\nExtended Arithmetic\n\nSelected with system=\"...\": openLogicExArithNK\nPredicate symbols: strings beginning with uppercase letter, &lt; (two-place, infix)\nConstant symbols: strings beginning with lowercase letter, 0\nFunction symbols: strings beginning with lowercase letter, ' (one-place, postfix), +, * (two-place, infix)\nVariables: s…z\nIdentity: =, ≠\n\n\n\n\nSymbol\nKeyboard\n\n\n\n\n×\n*\n\n\n≠\n!=\n\n\n\nExample:\n`Q_1(0,0') /\\ Ax(0&lt;x -&gt; Sq_a(0,x))`{system=\"openLogicExArithNK\"}\nproduces Q_1(0,0') /\\ Ax(0&lt;x -&gt; Sq_a(0,x))\n\n\nSet theory\n\nSelected with system=\"...\": openLogicSTNK\nPredicate symbols: ∈ (two-place, infix)\nConstant symbols: a … r\nVariables: s…z\nIdentity: =, ≠\n\nThe system openLogicExSTNK is like the above but adds arbitrary string predicates and function symbols:\n\nSelected with system=\"...\": openLogicExESTNK\nPredicate symbols: strings beginning with uppercase letter\nConstant symbols: strings beginning with lowercase letter\nFunction symbols: strings beginning with lowercase letter\n\n\n\n\nSymbol\nKeyboard\n\n\n\n\n∈\n&lt;&lt;, &lt;e\n\n\n≠\n!=\n\n\n\nExample:\n`Ex(Ay ~y&lt;&lt;x /\\ Az(z!=x -&gt; Eu u&lt;&lt;z))`{system=\"openLogicSTNK\"}\nproduces Ex(Ay ~y&lt;&lt;x /\\ Az(z!=x -&gt; Eu u&lt;&lt;z))\n\n\nExtended set theory\n\nSelected with system=\"...\": openLogicESTNK, openLogicExESTNK\nPredicate symbols: ∈, ⊆ (two-place, infix)\nConstant symbols: ∅, a … r\nFunction symbols: ∪, ∩, /, Pow (two-place, infix)\nVariables: s…z\nIdentity: =, ≠\n\nThe system openLogicExESTNK is like the above but adds arbitrary string predicates and function symbols:\n\nSelected with system=\"...\": openLogicExESTNK\nPredicate symbols: strings beginning with uppercase letter\nConstant symbols: strings beginning with lowercase letter\nFunction symbols: strings beginning with lowercase letter\n\n\n\n\nSymbol\nKeyboard\n\n\n\n\n∅\n{}, empty\n\n\n∈\n&lt;&lt;, &lt;e, in\n\n\n⊆\n&lt;(, &lt;s, within, sub\n\n\n∪\nU, cup\n\n\n∩\nI, cap\n\n\n/\n\\\n\n\nPow\nP\n\n\n≠\n!=\n\n\n\nExample:\n`Ex(Ay ~y&lt;&lt;x /\\ Az(z!={} -&gt; Eu u &lt;( P(z)))`{system=\"openLogicESTNK\"}\nproduces Ex(Ay ~y&lt;&lt;x /\\ Az(z!={} -&gt; Eu u &lt;( P(z)))"
  },
  {
    "objectID": "systems.html#thomas-bolduc-zach-forall-x-calgary",
    "href": "systems.html#thomas-bolduc-zach-forall-x-calgary",
    "title": "Supported Systems",
    "section": "Thomas-Bolduc & Zach, forall x: Calgary",
    "text": "Thomas-Bolduc & Zach, forall x: Calgary\nFor the corresponding proof systems, see here.\n\nFall 2019 and after\nThe 2019 systems refer to the syntax used in forall x: Carnap, Fall 2019 and after. The TFL system allows leaving out extra parentheses in conjunctions and disjunctions of more than 2 sentences. The pre-2019 systems do not, so can be used if stricter parenthesis rules are desired.\nThe major change is in the syntax of the FOL systems, which wrap arguments in parentheses. This allows support of function symbols and terms. The FOL2019 system also allows entering negated identities as x != y. This is not done in forall x: Calgary, but is the convention in the Open Logic Project.\n\nTruth-functional logic\n\nSelected with system=\"...\": thomasBolducAndZachTFL2019\nSentence letters: A…Z\nBrackets allowed (, ), [, ]\nAssociative \\(\\land\\), \\(\\lor\\): left\n\n\n\n\nConnective\nKeyboard\n\n\n\n\n→\n-&gt;, =&gt;, &gt;\n\n\n∧\n/\\, &, and\n\n\n∨\n\\/, |, or\n\n\n↔︎\n&lt;-&gt;, &lt;=&gt;\n\n\n¬\n-, ~, not\n\n\n⊥\n!?, _|_\n\n\n\nExample:\n`A /\\ B /\\ (C_1 -&gt; (~R_2 \\/ [S &lt;-&gt; T]))`{system=\"thomasBolducAndZachTFL2019\"}\nproduces A /\\ B /\\ (C_1 -&gt; (~R_2 \\/ [_|_ &lt;-&gt; T])).\n\n\nFirst-order logic\n\nSelected with system=\"...\": thomasBolducAndZachFOL2019, thomasBolducAndZachFOLPlus2019\nSentence letters: A …. Z\nPredicate symbols: A …Z\nConstant symbols: a … r\nFunction symbols: a…t\nVariables: s…z\nAtomic formulas: \\(F(a,x)\\)\nIdentity: =, ≠\nQuantifiers: \\(\\forall x\\), \\(\\exists x\\)\n\nQuantifiers:\n\n\n\nConnective\nKeyboard\n\n\n\n\n∀\nA\n\n\n∃\nE\n\n\n=\n=\n\n\n≠\n!=\n\n\n\nExample:\n`Ax(G(a,f(b),x) -&gt; Es(H(x,s) /\\ P /\\ x!=s))`{system=\"thomasBolducAndZachFOL2019\"}\nproduces Ax(G(a,f(b),x) -&gt; Es(H(x,s) /\\ P /\\ x!=s))\n\n\n\npre-Fall 2019\nThese syntax conventions were in force before the Fall 2019 edition of forall x: Calgary. They are still useful: (a) They coincide with the syntax conventions of Tim Button’s forall x: Cambridge and the text by Sean Ebbels-Duggan. (b) The TFL system requires all parentheses be included and displays with all parentheses. So it can be used in exercises that require TFL sentences be entered or displayed without bracketing conventions.\n\nTruth-functional logic\n\nSelected with system=\"...\": thomasBolducAndZachTFL, ebelsDugganTFL\nSentence letters: A…Z\nBrackets allowed (, ), [, ]\nAssociative \\(\\land\\), \\(\\lor\\): no\nConnectives:\n\n\n\n\nConnective\nKeyboard\n\n\n\n\n→\n-&gt;, =&gt;, &gt;\n\n\n∧\n/\\, &, and\n\n\n∨\n\\/, |, or\n\n\n↔︎\n&lt;-&gt;, &lt;=&gt;\n\n\n¬\n-, ~, not\n\n\n⊥\n!?, _|_\n\n\n\nExample:\n`(A /\\ B) /\\ (C_1 -&gt; (~R_2 \\/ [_|_ &lt;-&gt; T]))`{system=\"thomasBolducAndZachTFL\"}\nproduces (A /\\ B) /\\ (C_1 -&gt; (~R_2 \\/ [_|_ &lt;-&gt; T])).\nExample:\n`(A /\\ B) /\\ (C_1 -&gt; (~R_2 \\/ [_|_ &lt;-&gt; T]))`{system=\"ebelsDugganTFL\"}\nproduces (A /\\ B) /\\ (C_1 -&gt; (~R_2 \\/ [_|_ &lt;-&gt; T])).\n\n\nFirst-order logic\n\nSelected with system=\"...\": thomasBolducAndZachFOL\nSentence letters: A …. Z\nPredicate symbols: A …Z\nConstant symbols: a … r\nFunction symbols: none\nVariables: s…z\nAtomic formulas: \\(Fax\\)\nIdentity: =\nQuantifiers: \\(\\forall x\\), \\(\\exists x\\)\n\nQuantifiers:\n\n\n\nConnective\nKeyboard\n\n\n\n\n∀\nA\n\n\n∃\nE\n\n\n=\n=\n\n\n\nExample:\n`Ax(Gabx -&gt; Es(Hxs /\\ P /\\ ~x=s))`{system=\"thomasBolducAndZachFOL\"}\nproduces Ax(Gabx -&gt; Es(Hxs /\\ (P \\/ ~x=s)))"
  },
  {
    "objectID": "systems.html#tomassi-logic",
    "href": "systems.html#tomassi-logic",
    "title": "Supported Systems",
    "section": "Tomassi, Logic",
    "text": "Tomassi, Logic\n\nPropositional logic\n\nSelected with system=\"...\": tomassiPL\nSentence letters: P … W\nBrackets allowed (, )\nAssociative \\(\\land\\), \\(\\lor\\): left\nConnectives:\n\n\n\n\nConnective\nKeyboard\n\n\n\n\n→\n-&gt;, =&gt;,&gt;\n\n\n&\n/\\, &, and\n\n\n∨\n\\/, |, or\n\n\n↔︎\n&lt;-&gt;, &lt;=&gt;\n\n\n~\n-, ~, not\n\n\n\nExample:\n`P /\\ Q /\\ (R_1 -&gt; (~R_2 \\/ (S &lt;-&gt; T)))`{system=\"tomassiPL\"}\nproduces P /\\ Q /\\ (R_1 -&gt; (~R_2 \\/ (S &lt;-&gt; T))).\n\n\nPredicate logic\n\nSelected with system=\"...\": tomassiQL\nSentence letters: none\nPredicate symbols: A …Z\nConstant symbols: a … t\nFunction symbols: none\nVariables: u…z\nAtomic formulas: \\(Fax\\)\nIdentity: =\nQuantifiers: \\(\\forall x\\), \\(\\exists x\\)\n\nQuantifiers:\n\n\n\nConnective\nKeyboard\n\n\n\n\n∀\nA\n\n\n∃\nE\n\n\n=\n=\n\n\n\nExample:\n`Ax[Gabx -&gt; Ev(Hxv /\\ Pr /\\ ~(x=v))]`{system=\"tomassiQL\"}\nproduces Ax[Gabx -&gt; Ev(Hxv /\\ Pr /\\ ~(x=v))]"
  },
  {
    "objectID": "equivalences.html#notation",
    "href": "equivalences.html#notation",
    "title": "15  Chains of equivalences",
    "section": "15.1 Notation",
    "text": "15.1 Notation\nThe system uses the parser/syntax of forall x: Calgary and the Open Logic Text.\nThe different admissible keyboard abbreviations for the different connectives are as follows:\n\n\n\n\nConnective\nKeyboard\n\n\n\n\n→\n-&gt;, =&gt;, &gt;\n\n\n∧\n/\\, &, and\n\n\n∨\n\\/, |, or\n\n\n↔︎\n&lt;-&gt;, &lt;=&gt;\n\n\n¬\n-, ~, not\n\n\n⊥\n!?, _|_\n\n\n∀\nA, @\n\n\n∃\nE, 3\n\n\n\n\nProofs consist of a series of lines. Every line contains a formula followed by a : and then a rule abbreviation. The first line is justified by :PR. The available rules are all equivalences, and can be applied to subformulas of a given formula. It is assumed that every line follows from the immediately preceding line by one of the equivalence rules below."
  },
  {
    "objectID": "equivalences.html#equivalences-for-tfl-propositional-logic",
    "href": "equivalences.html#equivalences-for-tfl-propositional-logic",
    "title": "15  Chains of equivalences",
    "section": "15.2 Equivalences for TFL (propositional logic)",
    "text": "15.2 Equivalences for TFL (propositional logic)\nThe equivalence proof checker is selected using .ZachPropEq.\nEx1 A \\/ ~(B \\/ C) :|-: (A \\/ ~C) /\\ (A \\/ ~B)\n|A \\/ ~(B \\/ C) :PR\n|A \\/ ~(C \\/ B) :Comm\n|A \\/ (~C /\\ ~B) :DeM\n|(A \\/ ~C) /\\ (A \\/ ~B) :Dist\nThe following exchange rules are allowed. They can be used within a propositional context Φ, and in both directions. In other words, any formula occurrence on the left of the table below can be replaced by the corresponding formula on the right, and vice versa.\n\n\n\n\nRule\nAbbreviation\nPremises\nConclusion\n\n\n\n\nDouble Negation\nDN\n\\(¬¬φ\\)\n\\(φ\\)\n\n\nConditional\nCond\n\\((φ→ψ)\\)\n\\((¬φ∨ψ)\\)\n\n\n\n\n\\((¬φ→ψ)\\)\n\\((φ∨ψ)\\)\n\n\nBiconditional Exchange\nBicond\n\\((φ↔ψ)\\)\n\\(((φ→ψ)∧(ψ→φ))\\)\n\n\nDeMorgan’s Laws\nDeM\n\\(¬(φ∧ψ)\\)\n\\((¬φ∨¬ψ)\\)\n\n\n\n\n\\(¬(φ∨ψ)\\)\n\\((¬φ∧¬ψ)\\)\n\n\nCommutativity\nComm\n\\((φ∧ψ)\\)\n\\((ψ∧φ)\\)\n\n\n\n\n\\((φ∨ψ)\\)\n\\((ψ∨φ)\\)\n\n\nAssociativity\nAssoc\n\\((φ∧(ψ∧χ))\\)\n\\(((φ∧ψ)∧χ)\\)\n\n\n\n\n\\((φ∨(ψ∨χ))\\)\n\\(((φ∨ψ)∨χ)\\)\n\n\nDistributivity\nDist\n\\((φ∨(ψ∧χ))\\)\n\\(((φ∨ψ)∧(φ∨χ))\\)\n\n\n\n\n\\((φ∧(ψ∨χ))\\)\n\\(((φ∧ψ)∨(φ∧χ))\\)\n\n\n\n\n\\(((φ∧ψ)∨(φ∧χ))\\)\n\\((φ∧(ψ∨χ))\\)\n\n\nIdempotence\nId\n\\((φ∧φ)\\)\n\\(φ\\)\n\n\n\n\n\\((φ∨φ)\\)\n\\(φ\\)\n\n\nAbsorption\nAbs\n\\((φ∧(φ∨ψ))\\)\n\\(φ\\)\n\n\n\n\n\\((φ∨(φ∧ψ))\\)\n\\(φ\\)\n\n\nSimplification\nSimp\n\\((φ∧(ψ∨¬ψ))\\)\n\\(φ\\)\n\n\n\n\n\\((φ∨(ψ∧¬ψ))\\)\n\\(φ\\)\n\n\n\n\n\\((φ∨(ψ∨¬ψ))\\)\n\\((ψ∨¬ψ)\\)\n\n\n\n\n\\((φ∧(ψ∧¬ψ))\\)\n\\((ψ∧¬ψ)\\)\n\n\n\n\nThe rules for distributivity, absorption, and simplification allow for implicit commutativity, so e.g., Distr also allows replacing \\((ψ∧χ)∨φ\\) by \\((ψ∨φ)∧(χ∨φ)\\), and Simp allows replacing \\((¬ψ∨ψ)∧φ\\) by \\(φ\\).\nIf the conclusion of the target entailment is left empty, and the tests option is set, the checker will accept any proof where the last line meets the test. So for instance, to require students to transform a sentence into conjunctive normal form, you would assign\n```{.ProofChecker .ZachPropEq tests=\"CNF\"}\nEx1 A \\/ ~(B \\/ C) :|-: \n|A \\/ ~(B \\/ C) :PR\n```\nEx1 A \\/ ~(B \\/ C) :|-: \n|A \\/ ~(B \\/ C) :PR\nA proof playground is also supported.\n```{.Playground .ZachPropEq}\n```\n\nThe available tests are the same as for translation exercises, and can be combined. If combined, multiple tests have to be separated by spaces. Tests also work on playgrounds.\n\n\n\n\nName\nEffect\n\n\n\n\nCNF\nRequires conjunctive normal form\n\n\nDNF\nRequires disjunctive normal form\n\n\nmaxCon:N\nRequires that the translation contain N or fewer connectives\n\n\nmaxNot:N\nRequires that the translation contain N or fewer negations\n\n\nmaxAnd:N\nRequires that the translation contain N or fewer conjunctions\n\n\nmaxIff:N\nRequires that the translation contain N or fewer biconditionals\n\n\nmaxIf:N\nRequires that the translation contain N or fewer conditionals\n\n\nmaxOr:N\nRequires that the translation contain N or fewer disjunctions\n\n\nmaxFalse:N\nRequires that the translation contain N or fewer falsity constants\n\n\nmaxAtom:N\nRequires that the translation contain N or fewer atomic sentences"
  },
  {
    "objectID": "equivalences.html#the-fol-systems",
    "href": "equivalences.html#the-fol-systems",
    "title": "15  Chains of equivalences",
    "section": "15.3 The FOL Systems",
    "text": "15.3 The FOL Systems\nThe system .ZachFOLEq extends the rules of .ZachPropEq by equivalence rules for quantifiers, also applied in arbitrary contexts Φ, and in either direction. Those are:\n\n\n\n\nRule\nAbbreviation\nPremises\nConclusion\n\n\n\n\nVariable Renaming\nVR\n\\(∀ x\\,φ(x)\\)\n\\(∀ y\\,φ(y)\\)\n\n\n\n\n\\(∃ x\\,φ(x)\\)\n\\(∃ y\\,φ(y)\\)\n\n\nQuantifier Exchange\nQX\n\\(∀ x∀ y\\,φ(x,y)\\)\n\\(∀ y∀ x\\,φ(y)\\)\n\n\n\n\n\\(∃ x∃ y\\,φ(x,y)\\)\n\\(∃ y∃ x\\,φ(x,y)\\)\n\n\nQuantifier Negation\nQN\n\\(¬∀xφ(x)\\)\n\\(∃x¬φ(x)\\)\n\n\n\n\n\\(¬∃xφ(x)\\)\n\\(∀x¬φ(x)\\)\n\n\nQuantifier Distribution\nQD\n\\(∀ x(φ(x) ∧ ψ(x))\\)\n\\(∀ x\\,φ(x) ∧ ∀ x\\,ψ(x)\\)\n\n\n\n\n\\(∃ x(φ(x) ∨ ψ(x))\\)\n\\(∃ x\\,φ(x) ∨ ∃ x\\,ψ(x)\\)\n\n\nQuantifier Shift for \\(∀\\)\nQSA\n\\(∀ x(φ(x) ∧ ψ)\\)\n\\(∀ x\\,φ(x) ∧ ψ\\)\n\n\n\n\n\\(∀ x(φ(x) ∨ ψ)\\)\n\\(∀ x\\,φ(x) ∨ ψ\\)\n\n\n\n\n\\(∀ x(φ(x) → ψ)\\)\n\\(∃ x\\,φ(x) → ψ\\)\n\n\n\n\n\\(∀ x(ψ → φ(x))\\)\n\\(ψ → ∀ x\\,φ(x)\\)\n\n\nQuantifier Shifts for \\(∃\\)\nQSE\n\\(∃ x(φ(x) ∧ ψ)\\)\n\\(∃ x\\,φ(x) ∧ ψ\\)\n\n\n\n\n\\(∃ x(φ(x) ∨ ψ)\\)\n\\(∃ x\\,φ(x) ∨ ψ\\)\n\n\n\n\n\\(∃ x(φ(x) → ψ)\\)\n\\(∀ x\\,φ(x) → ψ\\)\n\n\n\n\n\\(∃ x(ψ → φ(x))\\)\n\\(ψ → ∃ x\\,φ(x)\\)\n\n\n\n\nNote that Carnap actually considers all formulas equal up to renaming of bound variables. Thus, the VR rules are provided just for completeness (and will allow any number of renamings of bound variables). Any variable renaming necessary to apply a quantifier shift can be done implicitly without first invoking the VR rule.\nTesting of correctness can become quite slow, so it is recommended to not do this on every button press and use feedback=\"manual\" instead.\nThe FOL system has an additional test, PNF, that requires the final line to be in prenex normal form.\n```{.ProofChecker .ZachFOLEq options=\"resize\" feedback=\"manual\" tests=\"PNF\"}\nEx2 ~(Ax P(x) &lt;-&gt; Ey Q(y)) :|-: \n|~(Ax P(x) &lt;-&gt; Ey Q(y)) :PR\n```\nEx2 ~(Ax P(x) &lt;-&gt; Ey Q(y)) :|-: \n|~(Ax P(x) &lt;-&gt; Ey Q(y)) :PR\n|~((Ax P(x) -&gt; Ey Q(y)) /\\ (Ey Q(y) -&gt; Ax P(x))) :Bicond\n|~(Ax P(x) -&gt; Ey Q(y)) \\/ ~(Ey Q(y) -&gt; Ax P(x)) :DeM\n|~(Ax P(x) -&gt; Ey Q(y)) \\/ ~Ay( Q(y) -&gt; Ax P(x)) :QSA\n|~(Ax P(x) -&gt; Ey Q(y)) \\/ ~AyAx( Q(y) -&gt;  P(x)) :QSA\n|~(Ax P(x) -&gt; Ey Q(y)) \\/ Ey~Ax( Q(y) -&gt;  P(x)) :QN\n|~(Ax P(x) -&gt; Ey Q(y)) \\/ EyEx~( Q(y) -&gt;  P(x)) :QN\n|(Ax P(x) /\\ ~Ey Q(y)) \\/ EyEx~( Q(y) -&gt;  P(x)) :Cond\n|(Ax P(x) /\\ Ay~ Q(y)) \\/ EyEx~( Q(y) -&gt;  P(x)) :QN\n|(Ax P(x) /\\ Ax~ Q(x)) \\/ EyEx~( Q(y) -&gt;  P(x)) :VR\n|Ax(P(x) /\\ ~Q(x)) \\/ EyEx~( Q(y) -&gt;  P(x)) :QD\n|Ey[Ax(P(x) /\\ ~Q(x)) \\/ Ex~( Q(y) -&gt;  P(x))] :QSE\n|EyEx[Ax(P(x) /\\ ~Q(x)) \\/ ~( Q(y) -&gt;  P(x))] :QSE"
  },
  {
    "objectID": "forallx-msu.html#notation",
    "href": "forallx-msu.html#notation",
    "title": "16  Natural deduction in the forall x: Mississippi State systems",
    "section": "16.1 Notation",
    "text": "16.1 Notation\nThe different admissible keyboard abbreviations for the different connectives are as follows:\n\n\n\n\nConnective\nKeyboard\n\n\n\n\n→\n-&gt;, =&gt;,&gt;\n\n\n&\n/\\, and\n\n\n∨\nv, \\/, |, or\n\n\n↔︎\n&lt;-&gt;, &lt;=&gt;\n\n\n¬\n-, ~, not\n\n\n\n\nThe available sentence letters are \\(A\\) through \\(Z\\), together with the infinitely many subscripted letters \\(P_1, P_2,\\ldots\\) written P_1, P_2 and so on.\nProofs consist of a series of lines. A line is either an assertion line containing a formula followed by a : and then a justification for that formula, or a separator line containing two dashes, thus: --. A justification consists of a rule abbreviation followed by zero or more numbers (citations of particular lines) and pairs of numbers separated by a dash (citations of a subproof contained within the given line range).\nA subproof is begun by increasing the indentation level. The first line of a subproof should be more indented than the containing proof, and the lines directly contained in this subproof should maintain this indentation level. (Lines indirectly contained, by being part of a sub-sub-proof, will need to be indented more deeply.) The subproof ends when the indentation level of the containing proof is resumed; hence, two contiguous sub-proofs of the same containing proof can be distinguished from one another by inserting a separator line between them at the same level of indentation as the containing proof. The final unindented line of a derivation will serve as the conclusion of the entire derivation.\nHere’s an example derivation, using the TFL system .JohnsonSL:\nEx ~P \\/ (R & Q) :|-: P -&gt; Q\n|~P \\/ (R & Q) :PR\n|    P :AS\n|    ~~P :DN 2\n|    R & Q :\\/E 1,3\n|    Q :&E 4\n|P -&gt; Q :-&gt;I 2-5\nOr, with a Fitch-style guides overlay (activated with guides=\"fitch\"):\nEx ~P \\/ (R & Q) :|-: P -&gt; Q\n|~P \\/ (R & Q) :PR\n|    P :AS\n|    ~~P :DN 2\n|    R & Q :\\/E 1,3\n|    Q :&E 4\n|P -&gt; Q :-&gt;I 2-5\nThere is also a playground mode:\n\nThe system for Johnson’s forall x: Mississippi State (the system used in a proofchecker constructed with .JohnsonSL in Carnap’s Pandoc Markup) has the following set of rules for direct inferences:\n\n\n\n\nRule\nAbbreviation\nPremises\nConclusion\n\n\n\n\nAnd-Elim\n∧E\n\\(φ∧ψ\\)\n\\(φ/ψ\\)\n\n\nAnd-Intro\n∧I\n\\(φ,ψ\\)\n\\(φ∧ψ\\)\n\n\nOr-Elim\n∨E\n\\(¬ψ, φ∨ψ\\)\n\\(φ\\)\n\n\n\n\n\\(¬φ, φ∨ψ\\)\n\\(ψ\\)\n\n\nOr-Intro\n∨I\n\\(φ\\)\n\\(φ∨ψ\\)\n\n\n\n\n\\(ψ\\)\n\\(φ∨ψ\\)\n\n\nConditional-Elim\n→E\n\\(φ,φ→ψ\\)\n\\(ψ\\)\n\n\nBiconditional-Elim\n↔︎E\n\\(φ, φ↔ψ\\)\n\\(ψ\\)\n\n\n\n\n\\(ψ, φ↔ψ\\)\n\\(φ\\)\n\n\nBiconditional-Intro\n↔︎I\n\\(φ→ψ, ψ→φ\\)\n\\(φ↔ψ\\)\n\n\nDouble Negation\nDN\n\\(φ\\)\n\\(¬¬φ\\)\n\n\nReiteration\nR\n\\(φ\\)\n\\(φ\\)\n\n\n\n\nWe also have four rules for indirect inferences:\n\n→I, which justifies an assertion of the form \\(φ→ψ\\) by citing a subproof beginning with the assumption \\(φ\\) and ending with the conclusion \\(ψ\\);\n¬I, which justifies an assertion of the form \\(¬φ\\) by citing a subproof beginning with the assumption \\(φ\\) and ending with a pair of lines \\(ψ\\),\\(¬ψ\\).\n¬E, which justifies an assertion of the form φ by citing a subproof beginning with the assumption \\(¬φ\\) and ending with a pair of lines \\(ψ\\),\\(¬ψ\\).\n\nFinally, PR can be used to justify a line asserting a premise, and AS can be used to justify a line making an assumption. A note about the reason for an assumption can be included in the rendered proof by writing A/NOTETEXTHERE rather than AS for an assumption. Assumptions are only allowed on the first line of a subproof."
  },
  {
    "objectID": "forallx-pitt.html#truth-functional-logic",
    "href": "forallx-pitt.html#truth-functional-logic",
    "title": "17  Natural Deduction in the forall x: Pittsburgh systems",
    "section": "17.1 Truth-functional logic",
    "text": "17.1 Truth-functional logic\n\n17.1.1 Notation\nThe different admissible keyboard abbreviations for the different connectives are as follows:\n\n\n\n\nConnective\nKeyboard\n\n\n\n\n→\n-&gt;, =&gt;, &gt;\n\n\n∧\n/\\, &, and\n\n\n∨\n\\/, |, or\n\n\n↔︎\n&lt;-&gt;, &lt;=&gt;\n\n\n¬\n-, ~, not\n\n\n⊥\n!?, _|_\n\n\n\n\nThe available sentence letters are \\(A\\) through \\(Z\\), together with the infinitely many subscripted letters \\(P_1, P_2,\\ldots\\) written P_1, P_2 and so on.\nProofs consist of a series of lines. A line is either an assertion line containing a formula followed by a : and then a justification for that formula, or a separator line containing two dashes, thus: --. A justification consists of a rule abbreviation followed by zero or more numbers (citations of particular lines) and pairs of numbers separated by a dash (citations of a subproof contained within the given line range).\nA subproof is begun by increasing the indentation level. The first line of a subproof should be more indented than the containing proof, and the lines directly contained in this subproof should maintain this indentation level. (Lines indirectly contained, by being part of a sub-sub-proof, will need to be indented more deeply.) The subproof ends when the indentation level of the containing proof is resumed; hence, two contiguous sub-proofs of the same containing proof can be distinguished from one another by inserting a separator line between them at the same level of indentation as the containing proof. The final unindented line of a derivation will serve as the conclusion of the entire derivation.\nHere’s an example derivation, using the system .GallowSL:\nEx :|-: (A \\/ B) -&gt; (B \\/ A)\n|   A \\/ B:AS\n|      A:AS\n|      B \\/ A:\\/I 2\n|   --\n|      B:AS\n|      B \\/ A:\\/I 5\n|   B \\/ A:\\/E 1,2-3,5-6\n|(A \\/ B) -&gt; (B \\/ A):-&gt;I 1-7\nOr, .GallowSLPlus with a Fitch-style guides overlay (activated with guides=\"fitch\"):\n|   A \\/ B:AS\n|      A:AS\n|      B \\/ A:\\/I 2\n|   --\n|      B:AS\n|      B \\/ A:\\/I 5\n|   B \\/ A:\\/E 1,2-3,5-6\n|(A \\/ B) -&gt; (B \\/ A):-&gt;I 1-7\nSimple indent guides overlay (activated with guides=\"indent\") with system .GallowPL:\n|   A \\/ B:AS\n|      A:AS\n|      B \\/ A:\\/I 2\n|   --\n|      B:AS\n|      B \\/ A:\\/I 5\n|   B \\/ A:\\/E 1,2-3,5-6\n|(A \\/ B) -&gt; (B \\/ A):-&gt;I 1-7\n\n\n17.1.2 The SL systems\nThe system .GallowSLPlus allows all rules below. .GallowSL is like .GallowSLPlus except it disallows all derived rules, i.e., the only allowed rules are R, and the I and E rules for the connectives and for ⊥.\nIt has the following set of rules for direct inferences:\n\nBasic rules:\n\n\n\nRule\nAbbreviation\nPremises\nConclusion\n\n\n\n\nAnd-Elim.\n∧E\n\\(φ∧ψ\\)\n\\(φ/ψ\\)\n\n\nAnd-Intro.\n∧I\n\\(φ,ψ\\)\n\\(φ∧ψ\\)\n\n\nOr-Intro\n∨I\n\\(φ/ψ\\)\n\\(φ∨ψ\\)\n\n\nContradiction-Intro\n⊥I\n\\(φ,¬φ\\)\n\\(⊥\\)\n\n\nContradiction-Elim\n⊥E\n\\(⊥\\)\n\\(ψ\\)\n\n\nBiconditional-Elim\n↔︎E\n\\(φ/ψ,φ↔ψ\\)\n\\(ψ/φ\\)\n\n\nReiteration\nR\n\\(φ\\)\n\\(φ\\)\n\n\n\nDerived rules:\n\n\n\nRule\nAbbreviation\nPremises\nConclusion\n\n\n\n\nDisjunctive Syllogism\nDS\n\\(¬ψ/¬φ,φ∨ψ\\)\n\\(φ/ψ\\)\n\n\nModus Tollens\nMT\n\\(φ→ψ,¬ψ\\)\n\\(¬φ\\)\n\n\nDouble Negation Elim.\nDNE\n\\(¬¬φ\\)\n\\(φ\\)\n\n\nDeMorgan’s Laws\nDeM\n\\(¬(φ∧ψ)\\)\n\\(¬φ∨¬ψ\\)\n\n\n\n\n\\(¬(φ∨ψ)\\)\n\\(¬φ∧¬ψ\\)\n\n\n\n\n\\(¬φ∨¬ψ\\)\n\\(¬(φ∧ψ)\\)\n\n\n\n\n\\(¬φ∧¬ψ\\)\n\\(¬(φ∨ψ)\\)\n\n\n\n\nWe also have five rules for indirect inferences:\n\n→I, which justifies an assertion of the form \\(φ→ψ\\) by citing a subproof beginning with the assumption \\(φ\\) and ending with the conclusion \\(ψ\\);\n↔︎I, which justifies an assertion of the form \\(φ↔ψ\\) by citing two subproofs, beginning with assumptions \\(φ\\), \\(ψ\\), respectively, and ending with conclusions \\(ψ\\), \\(φ\\), respectively;\n¬I, which justifies an assertion of the form \\(¬φ\\) by citing a subproof beginning with the assumption \\(φ\\) and ending with a conclusion \\(⊥\\).\n∨E, which justifies an assertion of the form φ by citing a disjunction \\(ψ∨χ\\) and two subproofs beginning with assumptions \\(ψ,χ\\) respectively and each ending with the conclusion \\(φ\\).\n¬E (indirect proof), which justifies an assertion of the form \\(φ\\) by citing a subproof beginning with the assumption \\(¬φ\\) and ending with a conclusion \\(⊥\\).\nLEM (Law of the Excluded Middle), which justifies an assertion of the form \\(ψ\\) by citing two subproofs beginning with assumptions \\(φ,¬φ\\) respectively and each ending with the conclusion \\(ψ\\). LEM is a derived rule.\n\nFinally, PR can be used to justify a line asserting a premise, and AS can be used to justify a line making an assumption. A note about the reason for an assumption can be included in the rendered proof by writing A/NOTETEXTHERE rather than AS for an assumption. Assumptions are only allowed on the first line of a subproof."
  },
  {
    "objectID": "forallx-pitt.html#predicate-logic",
    "href": "forallx-pitt.html#predicate-logic",
    "title": "17  Natural Deduction in the forall x: Pittsburgh systems",
    "section": "17.2 Predicate logic",
    "text": "17.2 Predicate logic\nThere are two proof systems corresponding to the Pittsburgh remix of forall x. All of them allow sentence letters in first-order formulas. The available relation symbols are the same as for SL: \\(A\\) through \\(Z\\), together with the infinitely many subscripted letters \\(F_1, F_2,\\ldots\\) written F_1, F_2 etc. However, the available constants and function symbols are only \\(a\\) through \\(v\\), together with the infinitely many subscripted letters \\(c_1, c_2,\\ldots\\) written c_1, c_2,…. The available variables are \\(w\\) through \\(z\\), with the infinitely many subscripted letters \\(x_1, x_2,\\ldots\\) written x_1, x_2,….\n\n\n\n\nConnective\nKeyboard\n\n\n\n\n∀\nA, @\n\n\n∃\nE, 3\n\n\n\n\nThe predicate logic system .GallowPL of forall x: Pittsburgh extend the rules of the system .GallowSL with the following set of new basic rules:\n\n\n\n\n\n\n\n\n\n\nRule\nAbbreviation\nPremises\nConclusion\n\n\n\n\nExistential Introduction\n∃I\n\\(φ(σ)\\)\n\\(∃xφ(x)\\)\n\n\nUniversal Elimination\n∀E\n\\(∀xφ(x)\\)\n\\(φ(σ)\\)\n\n\nUniversal Introduction\n∀E\n\\(φ(σ)\\)\n\\(∀xφ(x)\\)\n\n\n\n\nWhere Universal Introduction is subject to the restriction that \\(σ\\) must not appear in \\(φ(x)\\), or any undischarged assumption or in any premise of the proof.1\nThere is one new rule for indirect derivations: ∃E, which justifies an assertion \\(ψ\\) by citing an assertion of the form \\(∃xφ(x)\\) and a subproof beginning with the assumption \\(φ(σ)\\) and ending with the conclusion \\(ψ\\), where \\(σ\\) does not appear in \\(ψ, ∃xφ(x)\\), or in any of the undischarged assumptions or premises of the proof.\nThe proof system .GallowPLPlus for the Pittsburgh version of forall x adds, in addition to the (basic and derived) rules of .GallowPL, the rules\n\n\n\n\n\n\n\n\n\n\nRule\nAbbreviation\nPremises\nConclusion\n\n\n\n\nConversion of Quantifiers\nCQ\n\\(¬∀xφ(x)\\)\n\\(∃x¬φ(x)\\)\n\n\n\n\n\\(∃x¬φ(x)\\)\n\\(¬∀xφ(x)\\)\n\n\n\n\n\\(¬∃xφ(x)\\)\n\\(∀x¬φ(x)\\)\n\n\n\n\n\\(∀x¬φ(x)\\)\n\\(¬∃xφ(x)\\)"
  },
  {
    "objectID": "forallx-pitt.html#footnotes",
    "href": "forallx-pitt.html#footnotes",
    "title": "17  Natural Deduction in the forall x: Pittsburgh systems",
    "section": "",
    "text": "Technically, Carnap checks only the assumptions and premises that are used in the derivation of \\(φ(σ)\\). This has the same effect in terms of what’s derivable, but is a little more lenient.↩︎"
  },
  {
    "objectID": "forallx-yyc.html#truth-functional-logic",
    "href": "forallx-yyc.html#truth-functional-logic",
    "title": "18  Natural deduction in the forall x: Calgary systems",
    "section": "18.1 Truth-functional logic",
    "text": "18.1 Truth-functional logic\n\n18.1.1 Notation\nThe different admissible keyboard abbreviations for the different connectives are as follows:\n\n\n\n\nConnective\nKeyboard\n\n\n\n\n→\n-&gt;, =&gt;, &gt;\n\n\n∧\n/\\, &, and\n\n\n∨\n\\/, |, or\n\n\n↔︎\n&lt;-&gt;, &lt;=&gt;\n\n\n¬\n-, ~, not\n\n\n⊥\n!?, _|_\n\n\n\n\nThe available sentence letters are \\(A\\) through \\(Z\\), together with the infinitely many subscripted letters \\(P_1, P_2,\\ldots\\) written P_1, P_2 and so on.\nProofs consist of a series of lines. A line is either an assertion line containing a formula followed by a : and then a justification for that formula, or a separator line containing two dashes, thus: --. A justification consists of a rule abbreviation followed by zero or more numbers (citations of particular lines) and pairs of numbers separated by a dash (citations of a subproof contained within the given line range).\nA subproof is begun by increasing the indentation level. The first line of a subproof should be more indented than the containing proof, and the lines directly contained in this subproof should maintain this indentation level. (Lines indirectly contained, by being part of a sub-sub-proof, will need to be indented more deeply.) The subproof ends when the indentation level of the containing proof is resumed; hence, two contiguous sub-proofs of the same containing proof can be distinguished from one another by inserting a separator line between them at the same level of indentation as the containing proof. The final unindented line of a derivation will serve as the conclusion of the entire derivation.\nHere’s an example derivation, using the TFL system .ZachTFL:\nEx :|-: (A \\/ B) -&gt; (B \\/ A)\n|   A \\/ B:AS\n|      A:AS\n|      B \\/ A:\\/I 2\n|   --\n|      B:AS\n|      B \\/ A:\\/I 5\n|   B \\/ A:\\/E 1,2-3,5-6\n|(A \\/ B) -&gt; (B \\/ A):-&gt;I 1-7\nOr, with a Fitch-style guides overlay (activated with guides=\"fitch\"):\n|   A \\/ B:AS\n|      A:AS\n|      B \\/ A:\\/I 2\n|   --\n|      B:AS\n|      B \\/ A:\\/I 5\n|   B \\/ A:\\/E 1,2-3,5-6\n|(A \\/ B) -&gt; (B \\/ A):-&gt;I 1-7\nSimple indent guides overlay (activated with guides=\"indent\"):\n|   A \\/ B:AS\n|      A:AS\n|      B \\/ A:\\/I 2\n|   --\n|      B:AS\n|      B \\/ A:\\/I 5\n|   B \\/ A:\\/E 1,2-3,5-6\n|(A \\/ B) -&gt; (B \\/ A):-&gt;I 1-7\n\n\n18.1.2 The TFL systems\nThe system .ZachTFL allows all rules below. .ZachTFL2019 is like .ZachTFL except it disallows all derived rules, i.e., the only allowed rules are R, X, IP, and the I and E rules for the connectives.\nIt has the following set of rules for direct inferences:\n\nBasic rules:\n\n\n\nRule\nAbbreviation\nPremises\nConclusion\n\n\n\n\nAnd-Elim.\n∧E\n\\(φ∧ψ\\)\n\\(φ/ψ\\)\n\n\nAnd-Intro.\n∧I\n\\(φ,ψ\\)\n\\(φ∧ψ\\)\n\n\nOr-Intro\n∨I\n\\(φ/ψ\\)\n\\(φ∨ψ\\)\n\n\nNegation-Elim\n¬E\n\\(φ,¬φ\\)\n\\(⊥\\)\n\n\nExplosion\nX\n\\(⊥\\)\n\\(ψ\\)\n\n\nBiconditional-Elim\n↔︎E\n\\(φ/ψ,φ↔ψ\\)\n\\(ψ/φ\\)\n\n\n\nDerived rules:\n\n\n\nRule\nAbbreviation\nPremises\nConclusion\n\n\n\n\nReiteration\nR\n\\(φ\\)\n\\(φ\\)\n\n\nDisjunctive Syllogism\nDS\n\\(¬ψ/¬φ,φ∨ψ\\)\n\\(φ/ψ\\)\n\n\nModus Tollens\nMT\n\\(φ→ψ,¬ψ\\)\n\\(¬φ\\)\n\n\nDouble Negation Elim.\nDNE\n\\(¬¬φ\\)\n\\(φ\\)\n\n\nDeMorgan’s Laws\nDeM\n\\(¬(φ∧ψ)\\)\n\\(¬φ∨¬ψ\\)\n\n\n\n\n\\(¬(φ∨ψ)\\)\n\\(¬φ∧¬ψ\\)\n\n\n\n\n\\(¬φ∨¬ψ\\)\n\\(¬(φ∧ψ)\\)\n\n\n\n\n\\(¬φ∧¬ψ\\)\n\\(¬(φ∨ψ)\\)\n\n\n\n\nWe also have five rules for indirect inferences:\n\n→I, which justifies an assertion of the form \\(φ→ψ\\) by citing a subproof beginning with the assumption \\(φ\\) and ending with the conclusion \\(ψ\\);\n↔︎I, which justifies an assertion of the form \\(φ↔ψ\\) by citing two subproofs, beginning with assumptions \\(φ\\), \\(ψ\\), respectively, and ending with conclusions \\(ψ\\), \\(φ\\), respectively;\n¬I, which justifies an assertion of the form \\(¬φ\\) by citing a subproof beginning with the assumption \\(φ\\) and ending with a conclusion \\(⊥\\).\n∨E, which justifies an assertion of the form φ by citing a disjunction \\(ψ∨χ\\) and two subproofs beginning with assumptions \\(ψ,χ\\) respectively and each ending with the conclusion \\(φ\\).\nIP (indirect proof), which justifies an assertion of the form \\(φ\\) by citing a subproof beginning with the assumption \\(¬φ\\) and ending with a conclusion \\(⊥\\).\nLEM (Law of the Excluded Middle), which justifies an assertion of the form \\(ψ\\) by citing two subproofs beginning with assumptions \\(φ,¬φ\\) respectively and each ending with the conclusion \\(ψ\\). LEM is a derived rule.\n\nFinally, PR can be used to justify a line asserting a premise, and AS can be used to justify a line making an assumption. A note about the reason for an assumption can be included in the rendered proof by writing A/NOTETEXTHERE rather than AS for an assumption. Assumptions are only allowed on the first line of a subproof."
  },
  {
    "objectID": "forallx-yyc.html#first-order-logic",
    "href": "forallx-yyc.html#first-order-logic",
    "title": "18  Natural deduction in the forall x: Calgary systems",
    "section": "18.2 First-order logic",
    "text": "18.2 First-order logic\nThere are three proof systems corresponding to the Calgary remix of forall x. All of them allow sentence letters in first-order formulas. The available relation symbols are the same as for TFL: \\(A\\) through \\(Z\\), together with the infinitely many subscripted letters \\(F_1, F_2,\\ldots\\) written F_1, F_2 etc. However, the available constants and function symbols are only \\(a\\) through \\(r\\), together with the infinitely many subscripted letters \\(c_1, c_2,\\ldots\\) written c_1, c_2,…. The available variables are \\(s\\) through \\(z\\), with the infinitely many subscripted letters \\(x_1, x_2,\\ldots\\) written x_1, x_2,….\nAs of the Fall 2019 edition of forall x: Calgary, the syntax for first-order formulas has arguments to predicates in parentheses and with commas (e.g., \\(F(a, b)\\)); prior to that edition, the convention was the same as in the original and Cambridge editions of forall x (e.g., \\(Fab\\)).\n\n\n\n\nConnective\nKeyboard\n\n\n\n\n∀\nA, @\n\n\n∃\nE, 3\n\n\n=\n=\n\n\n\n\nThe first-order forall x: Calgary systems for FOL extend the rules of the system TFL with the following set of new basic rules:\n\n\n\n\n\n\n\n\n\n\nRule\nAbbreviation\nPremises\nConclusion\n\n\n\n\nExistential Introduction\n∃I\n\\(φ(σ)\\)\n\\(∃xφ(x)\\)\n\n\nUniversal Elimination\n∀E\n\\(∀xφ(x)\\)\n\\(φ(σ)\\)\n\n\nUniversal Introduction\n∀E\n\\(φ(σ)\\)\n\\(∀xφ(x)\\)\n\n\nEquality Introduction\n=I\n\n\\(σ=σ\\)\n\n\nEquality Elimination\n=E\n\\(σ=τ,φ(σ)/φ(τ)\\)\n\\(φ(τ)/φ(σ)\\)\n\n\n\n\nWhere Universal Introduction is subject to the restriction that \\(σ\\) must not appear in \\(φ(x)\\), or any undischarged assumption or in any premise of the proof.1\nThere is one new rule for indirect derivations: ∃E, which justifies an assertion \\(ψ\\) by citing an assertion of the form \\(∃xφ(x)\\) and a subproof beginning with the assumption \\(φ(σ)\\) and ending with the conclusion \\(ψ\\), where \\(σ\\) does not appear in \\(ψ, ∃xφ(x)\\), or in any of the undischarged assumptions or premises of the proof.\nThe original proof system for the Calgary version of forall x, .ZachFOL adds, in addition to the (basic and derived) rules of .ZachTFL, the rules\n\n\n\n\n\n\n\n\n\n\nRule\nAbbreviation\nPremises\nConclusion\n\n\n\n\nConversion of Quantifiers\nCQ\n\\(¬∀xφ(x)\\)\n\\(∃x¬φ(x)\\)\n\n\n\n\n\\(∃x¬φ(x)\\)\n\\(¬∀xφ(x)\\)\n\n\n\n\n\\(¬∃xφ(x)\\)\n\\(∀x¬φ(x)\\)\n\n\n\n\n\\(∀x¬φ(x)\\)\n\\(¬∃xφ(x)\\)\n\n\n\n\nThe 2019 versions of the FOL systems use the new syntax, i.e., \\(F(a, b)\\) instead of \\(Fab\\). The system .ZachFOL2019 allows only the basic rules of the TFL system and the basic rules of FOL. The system .ZachFOLPlus2019 allows the basic and derived rules of .ZachTFL and the CQ rules listed above.\nIn summary:\n\n\n\n\nSystem\nTFL Rules\nFOL Syntax\nFOL Rules\n\n\n\n\n.ZachTFL\nBasic + Derived\n\n\n\n\n.ZachFOL\nBasic + Derived\nFab\nBasic + CQ\n\n\n.ZachTFL2019\nBasic\n\n\n\n\n.ZachFOL2019\nBasic\nF(a,b)\nBasic\n\n\n.ZachFOLPlus2019\nBasic + Derived\nF(a,b)\nBasic + CQ"
  },
  {
    "objectID": "forallx-yyc.html#footnotes",
    "href": "forallx-yyc.html#footnotes",
    "title": "18  Natural deduction in the forall x: Calgary systems",
    "section": "",
    "text": "Technically, Carnap checks only the assumptions and premises that are used in the derivation of \\(φ(σ)\\). This has the same effect in terms of what’s derivable, but is a little more lenient.↩︎"
  },
  {
    "objectID": "forallx.html#notation",
    "href": "forallx.html#notation",
    "title": "19  Natural deduction in the original forall x systems",
    "section": "19.1 Notation",
    "text": "19.1 Notation\nThe different admissible keyboard abbreviations for the different connectives are as follows:\n\n\n\n\nConnective\nKeyboard\n\n\n\n\n→\n-&gt;, =&gt;,&gt;\n\n\n&\n/\\, &, and\n\n\n∨\n\\/, |, or\n\n\n↔︎\n&lt;-&gt;, &lt;=&gt;\n\n\n¬\n-, ~, not\n\n\n\n\nThe available sentence letters are \\(A\\) through \\(Z\\), together with the infinitely many subscripted letters \\(P_1, P_2,\\ldots\\) written P_1, P_2 and so on.\nProofs consist of a series of lines. A line is either an assertion line containing a formula followed by a : and then a justification for that formula, or a separator line containing two dashes, thus: --. A justification consists of a rule abbreviation followed by zero or more numbers (citations of particular lines) and pairs of numbers separated by a dash (citations of a subproof contained within the given line range).\nA subproof is begun by increasing the indentation level. The first line of a subproof should be more indented than the containing proof, and the lines directly contained in this subproof should maintain this indentation level. (Lines indirectly contained, by being part of a sub-sub-proof, will need to be indented more deeply.) The subproof ends when the indentation level of the containing proof is resumed; hence, two contiguous sub-proofs of the same containing proof can be distinguished from one another by inserting a separator line between them at the same level of indentation as the containing proof. The final unindented line of a derivation will serve as the conclusion of the entire derivation.\nHere’s an example derivation, using system SL of P.D. Magnus forall x, activated in Carnap by .ForallxSL:\nEx :|-: (A \\/ B) -&gt; (B \\/ A)\n|   A \\/ B:AS\n|      A:AS\n|      B \\/ A:\\/I 2\n|   --\n|      B:AS\n|      B \\/ A:\\/I 5\n|   B \\/ A:\\/E 1,2-3,5-6\n|(A \\/ B) -&gt; (B \\/ A):-&gt;I 1-7\nOr, with a Fitch-style guides overlay (activated with guides=\"fitch\"):\n|   A \\/ B:AS\n|      A:AS\n|      B \\/ A:\\/I 2\n|   --\n|      B:AS\n|      B \\/ A:\\/I 5\n|   B \\/ A:\\/E 1,2-3,5-6\n|(A \\/ B) -&gt; (B \\/ A):-&gt;I 1-7\nThere is also a playground mode:"
  },
  {
    "objectID": "forallx.html#sentential-logic",
    "href": "forallx.html#sentential-logic",
    "title": "19  Natural deduction in the original forall x systems",
    "section": "19.2 Sentential logic",
    "text": "19.2 Sentential logic\n\n19.2.1 forall x System SL\nThe minimal system SL for P.D. Magnus’ forall x (the system used in a proofchecker constructed with .ForallxSL in Carnap’s Pandoc Markup) has the following set of rules for direct inferences:\n\n\n\n\nRule\nAbbreviation\nPremises\nConclusion\n\n\n\n\nAnd-Elim\n∧E\n\\(φ∧ψ\\)\n\\(φ/ψ\\)\n\n\nAnd-Intro\n∧I\n\\(φ,ψ\\)\n\\(φ∧ψ\\)\n\n\nOr-Elim\n∨E\n\\(¬ψ, φ∨ψ\\)\n\\(φ\\)\n\n\n\n\n\\(¬φ, φ∨ψ\\)\n\\(ψ\\)\n\n\nOr-Intro\n∨I\n\\(φ\\)\n\\(φ∨ψ\\)\n\n\n\n\n\\(ψ\\)\n\\(φ∨ψ\\)\n\n\nConditional-Elim\n→E\n\\(φ,φ→ψ\\)\n\\(ψ\\)\n\n\nBiconditional-Elim\n↔︎E\n\\(φ, φ↔ψ\\)\n\\(ψ\\)\n\n\n\n\n\\(ψ, φ↔ψ\\)\n\\(φ\\)\n\n\nReiteration\nR\n\\(φ\\)\n\\(φ\\)\n\n\n\n\nWe also have four rules for indirect inferences:\n\n→I, which justifies an assertion of the form \\(φ→ψ\\) by citing a subproof beginning with the assumption \\(φ\\) and ending with the conclusion \\(ψ\\);\n↔︎I, which justifies an assertion of the form φ↔︎ψ by citing two subproofs, beginning with assuptions \\(φ\\), \\(ψ\\), respectively, and ending with conclusions \\(ψ\\), \\(φ\\), respectively;\n¬I, which justifies an assertion of the form \\(¬φ\\) by citing a subproof beginning with the assumption \\(φ\\) and ending with a pair of lines \\(ψ\\),\\(¬ψ\\).\n¬E, which justifies an assertion of the form φ by citing a subproof beginning with the assumption \\(¬φ\\) and ending with a pair of lines \\(ψ\\),\\(¬ψ\\).\n\nFinally, PR can be used to justify a line asserting a premise, and AS can be used to justify a line making an assumption. A note about the reason for an assumption can be included in the rendered proof by writing A/NOTETEXTHERE rather than AS for an assumption. Assumptions are only allowed on the first line of a subproof.\n\n\n19.2.2 forall x System SL Plus\nThe extended system SL Plus for P.D. Magnus’ forall x (the system used in a proofchecker constructed with .ForallxSLPlus in Carnap’s Pandoc Markup) also adds the following rules:\n\n\n\n\nRule\nAbbreviation\nPremises\nConclusion\n\n\n\n\nDilemma\nDIL\n\\(φ∨ψ,φ→χ,ψ→χ\\)\n\\(χ\\)\n\n\nHypothetical Syllogism\nHS\n\\(φ→ψ, ψ→χ\\)\n\\(φ→χ\\)\n\n\nModus Tollens\nMT\n\\(φ→ψ,¬ψ\\)\n\\(¬φ\\)\n\n\n\nAs well as the following exchange rules, which can be used within a propositional context Φ:\n\n\n\nRule\nAbbreviation\nPremises\nConclusion\n\n\n\n\nCommutativity\nComm\n\\(Φ(φ∧ψ)\\)\n\\(Φ(ψ∧φ)\\)\n\n\n\n\n\\(Φ(φ∨ψ)\\)\n\\(Φ(ψ∨φ)\\)\n\n\n\n\n\\(Φ(φ↔ψ)\\)\n\\(Φ(ψ↔φ)\\)\n\n\nDouble Negation\nDN\n\\(Φ(φ)/Φ(¬¬φ)\\)\n\\(Φ(¬¬φ)/Φ(φ)\\)\n\n\nMaterial Conditional\nMC\n\\(Φ(φ→ψ)\\)\n\\(Φ(¬φ∨ψ)\\)\n\n\n\n\n\\(Φ(¬φ∨ψ)\\)\n\\(Φ(φ→ψ)\\)\n\n\n\n\n\\(Φ(φ∨ψ)\\)\n\\(Φ(¬φ→ψ)\\)\n\n\n\n\n\\(Φ(¬φ→ψ)\\)\n\\(Φ(φ∨ψ)\\)\n\n\nBiConditional Exchange\n↔︎ex\n\\(Φ(φ↔ψ)\\)\n\\(Φ(φ→ψ∧ψ→φ)\\)\n\n\n\n\n\\(Φ(φ→ψ∧ψ→φ)\\)\n\\(Φ(φ↔ψ)\\)\n\n\nDeMorgan’s Laws\nDeM\n\\(Φ(¬(φ∧ψ))\\)\n\\(Φ(¬φ∨¬ψ)\\)\n\n\n\n\n\\(Φ(¬(φ∨ψ))\\)\n\\(Φ(¬φ∧¬ψ)\\)\n\n\n\n\n\\(Φ(¬φ∨¬ψ)\\)\n\\(Φ(¬(φ∧ψ))\\)\n\n\n\n\n\\(Φ(¬φ∧¬ψ)\\)\n\\(Φ(¬(φ∨ψ))\\)"
  },
  {
    "objectID": "forallx.html#quantificational-logic",
    "href": "forallx.html#quantificational-logic",
    "title": "19  Natural deduction in the original forall x systems",
    "section": "19.3 Quantificational logic",
    "text": "19.3 Quantificational logic\nThe proof system for Magnus’s forall x, QL, is activated using .ForallxQL.\n\n19.3.1 Notation\nThe different admissible keyboard abbreviations for quantifiers and equality is as follows:\n\n\n\n\nConnective\nKeyboard\n\n\n\n\n∀\nA\n\n\n∃\nE\n\n\n=\n=\n\n\n\n\nThe forall x first-order systems do not contain sentence letters.\nApplication of a relation symbol is indicated by directly appending the arguments to the symbol.\nThe available relation symbols are \\(A\\) through \\(Z\\), together with the infinitely many subscripted letters \\(F_1, F_2, \\ldots\\) written `F_1, F_2. The arity of a relation symbol is determined from context.\nThe available constants are a through w, with the infinitely many subscripted letters \\(c_1, c_2, \\ldots\\) written c_1, c_2,….\nThe available variables are \\(x\\) through \\(z\\), with the infinitely many subscripted letters \\(x_1, x_2,\\dots\\) written x_1, x_2,….\n\n\n19.3.2 Basic Rules\nThe first-order forall x systems QL (the systems used in proofcheckers constructed with .ForallxQL) extend the rules of the system SL with the following set of new basic rules:\n\n\n\n\n\n\n\n\n\n\nRule\nAbbreviation\nPremises\nConclusion\n\n\n\n\nExistential Introduction\n∃I\n\\(φ(σ)\\)\n\\(∃xφ(x)\\)\n\n\nUniversal Elimination\n∀E\n\\(∀xφ(x)\\)\n\\(φ(σ)\\)\n\n\nUniversal Introduction\n∀E\n\\(φ(σ)\\)\n\\(∀xφ(x)\\)\n\n\nEquality Introduction\n=I\n\n\\(σ=σ\\)\n\n\nEquality Elimination\n=E\n\\(σ=τ,φ(σ)/φ(τ)\\)\n\\(φ(τ)/φ(σ)\\)\n\n\n\n\nWhere Universal Introduction is subject to the restriction that \\(σ\\) must not appear in \\(φ(x)\\), or any undischarged assumption or in any premise of the proof.1\nIt also adds one new rule for indirect derivations: ∃E, which justifies an assertion \\(ψ\\) by citing an assertion of the form \\(∃xφ(x)\\) and a subproof beginning with the assumption \\(φ(σ)\\) and ending with the conclusion \\(ψ\\), where \\(σ\\) does not appear in \\(ψ, ∃xφ(x)\\), or in any of the undischarged assumptions or premises of the proof.\n\n\n19.3.3 forall x QL Plus\nThe system QL Plus, activated with .ForallxQLPlus, includes all the rules of SL Plus, as well as the following exchange rules, which can be used within a context Φ:\n\n\n\nRule\nAbbreviation\nPremises\nConclusion\n\n\n\n\nQuantifier Negation\nQN\n\\(Φ(∀x¬φ(x)))\\)\n\\(Φ(¬∃xφ(x)))\\)\n\n\n\n\n\\(Φ(¬∀xφ(x)))\\)\n\\(Φ(∃x¬φ(x)))\\)\n\n\n\n\n\\(Φ(∃x¬φ(x)))\\)\n\\(Φ(¬∀xφ(x)))\\)\n\n\n\n\n\\(Φ(¬∃xφ(x)))\\)\n\\(Φ(∀x¬φ(x)))\\)"
  },
  {
    "objectID": "forallx.html#footnotes",
    "href": "forallx.html#footnotes",
    "title": "19  Natural deduction in the original forall x systems",
    "section": "",
    "text": "Technically, Carnap checks only the assumptions and premises that are used in the derivation of \\(φ(σ)\\). This has the same effect in terms of what’s derivable, but is a little more lenient.↩︎"
  },
  {
    "objectID": "logicbook.html#propositional-systems",
    "href": "logicbook.html#propositional-systems",
    "title": "20  Natural Deduction in Logic Book Systems",
    "section": "20.1 Propositional Systems",
    "text": "20.1 Propositional Systems\n\n20.1.1 Notation\nThe different admissible keyboard abbreviations for the different connectives are as follows:\n\n\n\n\nConnective\nKeyboard\n\n\n\n\n⊃\n-&gt;, =&gt;,&gt;\n\n\n&\n/\\, &, and\n\n\n∨\n\\/, |, or\n\n\n↔︎\n&lt;-&gt;, &lt;=&gt;\n\n\n~\n-, ~, not\n\n\n\n\nThe available sentence letters are \\(A\\) through \\(Z\\), together with the infinitely many subscripted letters \\(P_1, P_2,\\ldots\\) written P_1, P_2 and so on.\nProofs consist of a series of lines. A line is either an assertion line containing a formula followed by a : and then a justification for that formula, or a separator line containing two dashes, thus: --.1 A justification consists of zero or more numbers (citations of particular lines) and pairs of numbers separated by a dash (citations of a subproof contained within the given line range), followed by the name of a rule being applied.\nA subproof is begun by increasing the indentation level. The first line of a subproof should be more indented than the containing proof, and the lines directly contained in this subproof should maintain this indentation level. (Lines indirectly contained, by being part of a sub-sub-proof, will need to be indented more deeply.) The subproof ends when the indentation level of the containing proof is resumed; hence, two contiguous sub-proofs of the same containing proof can be distinguished from one another by inserting a separator line between them at the same level of indentation as the containing proof. The final unindented line of a derivation will serve as the conclusion of the entire derivation.\nHere’s an example derivation, using system SD from the Logic Book\n   P        :AS\n      P     :AS\n      P     :2 R\n   P &gt; P    :2-3 CI\nP &gt; (P &gt; P) :1-4 CI\nand here is one using system PD\n(Ax)Fx        :PR\n(Ax)(Fx &gt; Gx) :PR\nFa            :1 AE\nFa &gt; Ga       :2 AE\nGa            :3,4 &gt;E \n(Ax)Gx        :5 AI \n\n\n20.1.2 Basic Rules\n\n20.1.2.1 Logic Book System SD\nThe minimal system SD from the Logic Book (the system used in a proofchecker constructed with .LogicBookSD in Carnap’s Pandoc Markup) has the following set of rules for direct inferences:\n\n\n\n\nRule\nAbbreviation\nPremises\nConclusion\n\n\n\n\nAnd-Elim.\n&E\n\\(φ\\&ψ\\)\n\\(φ/ψ\\)\n\n\nAnd-Intro.\n&I\n\\(φ,ψ\\)\n\\(φ\\&ψ\\)\n\n\nOr-Intro\n\\/I\n\\(φ/ψ\\)\n\\(φ∨ψ\\)\n\n\nConditional-Elim\n-&gt;E.CE\n\\(φ,φ⊃ψ\\)\n\\(ψ\\)\n\n\nBiconditional-Elim\n&lt;-&gt;E,BE\n\\(φ/ψ, φ↔ψ\\)\n\\(ψ/φ\\)\n\n\nReiteration\nR\n\\(φ\\)\n\\(φ\\)\n\n\n\n\nWe also have five rules for indirect inferences:\n\n-&gt;I (also denoted CI), which justifies an assertion of the form \\(φ⊃ψ\\) by citing a subproof beginning with the assumption \\(φ\\) and ending with the conclusion \\(ψ\\);\n&lt;-&gt;I, (also denoted BI) which justifies an assertion of the form φ↔︎ψ by citing two subproofs, beginning with assuptions \\(φ\\), \\(ψ\\), respectively, and ending with conclusions \\(ψ\\), \\(φ\\), respectively;\n~I, which justifies an assertion of the form \\(~φ\\) by citing a subproof beginning with the assumption \\(φ\\) and ending with a pair of lines \\(ψ\\),\\(~ψ\\).\n~E, which justifies an assertion of the form φ by citing a subproof beginning with the assumption \\(~φ\\) and ending with a pair of lines \\(ψ\\),\\(~ψ\\).\n∨E, which justifies an assertion of the form χ by citing a line φ∨ψ, and two subproofs beginning the assumptions \\(φ,ψ\\) respectively and both ending with a line χ.\n\nFinally, PR or Assumption (to keep with the Logic Book terminology) can be used to justify a line asserting a premise, and AS can be used to justify a line making an assumption. A/SOMEADDITIONALTEXT (where SOMEADDITIONALTEXT indicates some additional text to be included alongside the assumption in the rendered proof) can also be used to justify an assumption. Assumptions are only allowed on the first line of a subproof.\n\n\n20.1.2.2 Logic Book System SD Plus\nThe extended system SD Plus (the system used in a proofchecker constructed with .LogicBookSDPlus in Carnap’s Pandoc Markup) also adds the following rules:\n\n\n\n\nRule\nAbbreviation\nPremises\nConclusion\n\n\n\n\nModus Tollens\nMT\n\\(φ⊃ψ,\\sim ψ\\)\n\\(\\sim φ\\)\n\n\nHypothetical Syllogism\nHS\n\\(φ⊃ψ, ψ⊃χ\\)\n\\(φ⊃χ\\)\n\n\nDisjunctive Syllogism\nDS\n\\(\\sim ψ, φ∨ψ\\)\n\\(φ\\)\n\n\n\n\n\\(\\sim φ, φ∨ψ\\)\n\\(ψ\\)\n\n\n\nAs well as the following exchange rules, which can be used within a propositional context Φ:\n\n\n\nRule\nAbbreviation\nPremises\nConclusion\n\n\n\n\nCommutation\nComm\n\\(Φ(φ\\&ψ)\\)\n\\(Φ(ψ\\&φ)\\)\n\n\n\n\n\\(Φ(φ∨ψ)\\)\n\\(Φ(ψ∨φ)\\)\n\n\nAssociation\nAssoc\n\\(Φ(φ\\&(ψ\\&χ))\\)\n\\(Φ((φ\\&ψ)\\&χ)\\)\n\n\n\n\n\\(Φ((φ\\&ψ)\\&χ)\\)\n\\(Φ(φ\\&(ψ\\&χ))\\)\n\n\n\n\n\\(Φ(φ∨(ψ∨χ))\\)\n\\(Φ((φ∨ψ)∨χ)\\)\n\n\n\n\n\\(Φ((φ∨ψ)∨χ)\\)\n\\(Φ(φ∨(ψ∨χ))\\)\n\n\nImplication\nImpl\n\\(Φ(φ⊃ψ)/Φ(\\sim φ∨ψ)\\)\n\\(Φ(φ⊃ψ)/Φ(\\sim φ∨ψ)\\)\n\n\nDouble Negation\nDN\n\\(Φ(φ)/Φ(\\sim \\sim φ)\\)\n\\(Φ(\\sim \\sim φ)/Φ(φ)\\)\n\n\nIdempotence\nIdem\n\\(Φ(φ)\\)\n\\(Φ(φ\\&φ)\\)\n\n\n\n\n\\(Φ(φ\\&φ)\\)\n\\(Φ(φ)\\)\n\n\n\n\n\\(Φ(φ)\\)\n\\(Φ(φ∨φ)\\)\n\n\n\n\n\\(Φ(φ∨φ)\\)\n\\(Φ(φ)\\)\n\n\nDeMorgan’s Laws\nDeM\n\\(Φ(\\sim (φ\\&ψ))\\)\n\\(Φ(\\sim φ∨\\sim ψ)\\)\n\n\n\n\n\\(Φ(\\sim (φ∨ψ))\\)\n\\(Φ(\\sim φ\\&\\sim ψ)\\)\n\n\n\n\n\\(Φ(\\sim φ∨\\sim ψ)\\)\n\\(Φ(\\sim (φ\\&ψ))\\)\n\n\n\n\n\\(Φ(\\sim φ\\&\\sim ψ)\\)\n\\(Φ(\\sim (φ∨ψ))\\)\n\n\nTransposition\nTrans\n\\(Φ(φ⊃ψ)\\)\n\\(Φ(\\sim ψ⊃\\sim φ))\\)\n\n\n\n\n\\(Φ(\\sim ψ⊃\\sim φ))\\)\n\\(Φ(φ⊃ψ)\\)\n\n\nExportation\nExp\n\\(Φ(φ⊃(ψ⊃χ))\\)\n\\(Φ(φ\\&ψ⊃χ)\\)\n\n\n\n\n\\(Φ(φ\\&ψ⊃χ)\\)\n\\(Φ(φ⊃(ψ⊃χ))\\)\n\n\nDistribution\nDist\n\\(Φ(φ\\&(ψ∨χ))\\)\n\\(Φ((φ\\&ψ)∨(φ\\&χ))\\)\n\n\n\n\n\\(Φ((φ\\&ψ)∨(φ\\&χ))\\)\n\\(Φ(φ\\&(ψ∨χ))\\)\n\n\n\n\n\\(Φ(φ∨(ψ\\&χ))\\)\n\\(Φ((φ∨ψ)\\&(φ∨χ))\\)\n\n\n\n\n\\(Φ((φ∨ψ)\\&(φ∨χ))\\)\n\\(Φ(φ∨(ψ\\&χ))\\)\n\n\nEquivalence\nEquiv\n\\(Φ(φ↔ψ)\\)\n\\(Φ(φ⊃ψ\\&ψ⊃φ)\\)\n\n\n\n\n\\(Φ(φ⊃ψ\\&ψ⊃φ)\\)\n\\(Φ(φ↔ψ)\\)\n\n\n\n\n\\(Φ(φ↔ψ)\\)\n\\(Φ((φ\\&ψ)∨(\\sim ψ\\&\\sim φ))\\)\n\n\n\n\n\\(Φ((φ\\&ψ)∨(\\sim ψ\\&\\sim φ))\\)\n\\(Φ(φ↔ψ)\\)"
  },
  {
    "objectID": "logicbook.html#first-order-systems",
    "href": "logicbook.html#first-order-systems",
    "title": "20  Natural Deduction in Logic Book Systems",
    "section": "20.2 First-Order Systems",
    "text": "20.2 First-Order Systems\n\n20.2.1 Notation\nThe different admissible keyboard abbreviations for quantifiers are as follows:\n\n\n\n\nConnective\nKeyboard\n\n\n\n\n∀\nA\n\n\n∃\nE\n\n\n\n\nThe Logic Book first order systems contain sentence letters \\(A\\) through \\(Z\\), together with the infinitely many subscripted letters \\(P_1, P_2,\\ldots\\) written P_1, P_2 and so on.\nApplication of a relation symbol is indicated by directly appending the arguments to the symbol.\nThe available relation symbols are \\(A\\) through \\(Z\\), together with the infinitely many subscripted letters \\(F_1, F_2,\\ldots\\) written F_1, F_2,…. The arity of a relation symbol is determined from context.\nThe available constants are \\(a\\) through \\(v\\), with the infinitely many subscripted letters \\(c_1, c_2,\\ldots\\) written c_1, c_2,….\nThe available variables are \\(w\\) through \\(z\\), with the infinitely many subscripted letters \\(x_1, x_2,\\ldots\\) written x_1, x_2,….\nQuantificational phrases are formed by appending a variable to a quantifier, and wrapping the result in parentheses.\n\n\n20.2.2 Basic Rules\nThe first-order Logic Book systems PD and PD+ (the systems used in proofcheckers constructed with .LogicBookPD, and LogicBookPDPlus respectively) extend the rules of the system SD and SD+ respectively with the following set of new basic rules:\n\n\n\n\n\n\n\n\n\n\nRule\nAbbreviation\nPremises\nConclusion\n\n\n\n\nExistential Introduction\nEI\n\\(φ(σ)\\)\n\\((∃x)φ(x)\\)\n\n\nUniversal Elimination\nAE\n\\((∀x)φ(x)\\)\n\\(φ(σ)\\)\n\n\nUniversal Introduction\nAI\n\\(φ(σ)\\)\n\\((∀x)φ(x)\\)\n\n\n\n\nWhere Universal Introduction is subject to the restriction that \\(σ\\) must not appear in \\(φ(x)\\), or any undischarged assumption or in any premise of the proof.2\nIt also adds one new rule for indirect derivations: EE, which justifies an assertion \\(ψ\\) by citing an assertion of the form \\((∃x)φ(x)\\) and a subproof beginning with the assumption \\(φ(σ)\\) and ending with the conclusion \\(ψ\\), where \\(σ\\) does not appear in \\(ψ, (∃x)φ(x)\\), or in any of the undischarged assumptions or premises of the proof.\nTo these rules, PD+ also adds the exchange rule:\n\n\n\n\n\n\n\n\n\nRule\nAbbreviation\nPremises\nConclusion\n\n\n\n\nQuantifier Negation\nQN\n\\(Φ(\\sim (∀xφ)(x))\\)\n\\(Φ((∃x)\\sim φ(x))\\)\n\n\n\n\n\\(Φ((∃x)\\sim φ(x))\\)\n\\(Φ(\\sim (∀x)φ(x))\\)\n\n\n\n\n\\(Φ(\\sim (∃xφ)(x))\\)\n\\(Φ((∀x)\\sim φ(x))\\)\n\n\n\n\n\\(Φ((∀x)\\sim φ(x))\\)\n\\(Φ(\\sim (∃x)φ(x))\\)"
  },
  {
    "objectID": "logicbook.html#footnotes",
    "href": "logicbook.html#footnotes",
    "title": "20  Natural Deduction in Logic Book Systems",
    "section": "",
    "text": "These are intended for use when you have two contiguous subproofs and need to separate them - since they’re at the same level of indentation, you need some extra indication to show that they’re distinct subproofs.↩︎\nTechnically, Carnap checks only the assumptions and premises that are used in the derivation of \\(φ(σ)\\). This has the same effect in terms of what’s derivable, but is a little more lenient.↩︎"
  },
  {
    "objectID": "montague.html#the-propositional-system",
    "href": "montague.html#the-propositional-system",
    "title": "21  Natural Deduction in the Carnap Book",
    "section": "21.1 The Propositional System",
    "text": "21.1 The Propositional System\n\n21.1.1 Notation\nThe different admissible keyboard abbreviations for the different connectives is as follows:\n\n\n\n\nConnective\nKeyboard\n\n\n\n\n→\n-&gt;, =&gt;,&gt;\n\n\n∧\n/\\, &, and\n\n\n∨\n\\/, |, or\n\n\n↔︎\n&lt;-&gt;, &lt;=&gt;\n\n\n¬\n-, ~, not\n\n\n\n\nThe available sentence letters are \\(P\\) through \\(W\\), and the infinitely many subscripted letters \\(P_1, P_2,\\ldots\\) written P_1, P_2 and so on.\nProofs consist of a series of lines. A line is either an assertion line containing a formula followed by a : and then a justification for that formula, a show line consisting of the word show followed by a formula, or a QED line containing a : followed by a rule for an indirect inference.\nA subproof begins a new show line. The next line should be more indented than the containing proof, and the lines directly contained in this subproof should maintain this indentation level. (Lines indirectly contained, by being part of a sub-sub-proof, will need to be indented more deeply.) The subproof ends with a QED line at the same level of indentation as the containing proof.\nFor example:\nShow P -&gt; (P -&gt; P)\n   P:AS\n   Show: P-&gt;P\n      P:AS\n   :CD 4\n:CD 3\n\n\n21.1.2 Basic Rules\nThe propositional part of the system (the system used in a proofchecker constructed with .Prop in Carnap’s Pandoc Markup) has the following set of rules for direct inferences:\n\n\n\n\nRule\nAbbreviation\nPremises\nConclusion\n\n\n\n\nSimplification\nS\n\\(φ∧ψ\\)\n\\(φ/ψ\\)\n\n\nAdjunction\nADJ\n\\(φ,ψ\\)\n\\(φ∧ψ\\)\n\n\nModus Ponens\nMP\n\\(φ,φ→ψ\\)\n\\(ψ\\)\n\n\nModus Tollens\nMT\n\\(¬ψ,φ→ψ\\)\n\\(¬φ\\)\n\n\nModus Tollendo Ponens\nMTP\n\\(¬ψ/¬φ,φ∨ψ\\)\n\\(φ/ψ\\)\n\n\nAddition\nADD\n\\(φ/ψ\\)\n\\(φ∨ψ\\)\n\n\nConditional to Bicond.\nCB\n\\(ψ→φ, φ→ψ\\)\n\\(ψ↔φ\\)\n\n\nBiconditional to Cond.\nBC\n\\(ψ↔φ\\)\n\\(ψ→φ/φ→ψ\\)\n\n\nDouble Negation Intro.\nDNI\n\\(φ\\)\n\\(¬¬φ\\)\n\n\nDouble Negation Elem.\nDNE\n\\(¬¬φ\\)\n\\(φ\\)\n\n\nDouble Negation\nDN\n\\(φ/¬¬φ\\)\n\\(¬¬φ/φ\\)\n\n\n\n\nWe also have three rules for indirect inferences: DD, which closes a show line of the form \\(Show: φ\\) by citing an available line containing \\(φ\\) , CD which closes a show line of the form \\(Show: φ→ψ\\) by citing an available line containing \\(ψ\\), and cancels the assumption \\(φ\\) if it is used to support this line, and ID, which choses a show line of the form \\(Show: ¬φ\\) by citing two available lines containing \\(ψ\\) and \\(¬ψ\\), canceling the assumption \\(φ\\) if it is used to support these lines.\nFinally, PR can be used to justify a line asserting a premise, and AS can be used to justify a line making an assumption.\n\n\n21.1.3 Derived Rules\nAdditional rules previously derived by users are allowed. These are regular rules of direct inference, and use abbreviations of the form D-NAME, where NAME is chosen by the user."
  },
  {
    "objectID": "montague.html#the-first-order-system",
    "href": "montague.html#the-first-order-system",
    "title": "21  Natural Deduction in the Carnap Book",
    "section": "21.2 The First Order System",
    "text": "21.2 The First Order System\n\n21.2.1 Notation\nThe different admissible keyboard abbreviations for quantifiers and equality is as follows:\n\n\n\n\nConnective\nKeyboard\n\n\n\n\n∀\nA\n\n\n∃\nE\n\n\n=\n=\n\n\n\n\nSentence letters are as in the propositional system.\nApplication of a function or relation symbol is indicated by wrapping a comma-separated list of arguments in parentheses, and appending this to the symbol.\nThe available relation symbols are \\(F\\) through \\(O\\), with the infinitely many subscripted letters \\(F_1, F_2,\\ldots\\) written F_1, F_2,…. The arity of a relation symbol is determined from context.\nThe available constants are \\(a\\) through \\(e\\), with the infinitely many subscripted letters \\(c_1, c_2,\\ldots\\) written c_1, c_2,….\nThe available function symbols are \\(f\\) through \\(h\\), with the infinitely many subscripted letters \\(f_1, f_2,\\ldots\\) written f_1, f_2,…. The arity of a function symbol is determined from context.\nThe available variables are \\(v\\) through \\(z\\), with the infinitely many subscripted letters \\(x_1, x_2,\\ldots\\) written x_1, x_2,….\n\n\n21.2.2 Basic Rules\nThe first-order part of the system (the system used in a proofchecker constructed with .FirstOrder) extends the propositional part of the system with the following set of new basic rules:\n\n\n\n\n\n\n\n\n\n\nRule\nAbbreviation\nPremises\nConclusion\n\n\n\n\nLeibniz’s Law\nLL\n\\(τ=σ, φ(τ)/φ(σ)\\)\n\\(φ(σ)/φ(τ)\\)\n\n\nLeibniz’s Law (negative)\nLL\n\\(φ(τ),¬φ(σ)\\)\n\\(¬(τ=σ)\\)\n\n\nEuclid’s Law\nEL\n\\(τ=σ\\)\n\\(θ(τ) = θ(σ)\\)\n\n\nUniversal Instantiation\nUI\n\\(∀xφ(x)\\)\n\\(φ(τ)\\)\n\n\nExistential Generalization\nEG\n\\(φ(τ)\\)\n\\(∃xφ(x)\\)\n\n\nQuantifier Negation\nQN\n\\(¬∀xφ(x)/ ¬∃xφ(x)/ ∃¬xφ(x)/ ∀¬xφ(x)\\)\n\\(∃x¬φ(x)/ ∀x¬φ(x)/ ¬∀xφ(x)/ ¬∃xφ(x)\\)\n\n\nSymmetry\nSm\n\\(τ=σ\\)\n\\(σ=τ\\)\n\n\nReflexivity\nID\n\n\\(τ=τ\\)\n\n\n\n\nIt also adds two new rules for indirect derivations: UD, which closes a show line of the form \\(Show: ∀xφ(x)\\) by citing an available line \\(φ(a)\\), where \\(a\\) is a fresh constant1 , and ED which closes a show line of the form \\(Show: ψ\\) by citing an assertion of the form \\(∃xφ(x)\\), an assumption of the form \\(φ(a)\\) and an assertion of the form \\(ψ\\), and cancels the assumption \\(φ(a)\\), where \\(a\\) is a fresh constant.2\n\n\n21.2.3 Traditional Kalish and Montague Rules\nThe basic rules for first-order logic listed above are not precisely the same as the rules given by Kalish and Montague in Formal Logic. In particular, universal derivations work differently, and existential derivations are replaced by a rule of existential instantiation.\nUniversal Derivations in Formal Logic closing a show line of the form \\(Show: ∀xφ(x)\\) are required to end by citing an available line \\(\\phi(x)\\) in which \\(\\phi\\) occurs with precisely the same variable free as we see bound in \\(\\forall x\\phi(x)\\). Furthermore, the variable \\(x\\) must not occur free on any line available from the salient show line.\nThe rule of EI of existential instantiation allows one to infer from a premise of the form \\(\\exists x\\phi(x)\\) that \\(\\phi(y)\\) for some variable not occurring free or bound on any earlier line in the proof.\nThese rules can be activated by using .MontagueQC (for “Quantifier Calculus”) instead of .FirstOrder in the construction of the proof-checker."
  },
  {
    "objectID": "montague.html#the-monadic-second-order-system",
    "href": "montague.html#the-monadic-second-order-system",
    "title": "21  Natural Deduction in the Carnap Book",
    "section": "21.3 The Monadic Second-Order System",
    "text": "21.3 The Monadic Second-Order System\n\n21.3.1 Notation\nThe different admissible keyboard abbreviations for monadic second-order lambdas is as follows:\n\n\n\n\nConnective\nKeyboard\n\n\n\n\nλ\n\\\n\n\n\n\nFirst order syntax is as in the first-order system.\nThe available second-order variables are \\(X\\) through \\(Z\\), with the infinitely many subscripted variables \\(X_1, X_2,\\ldots\\) written X_1, X_2,….\nA lambda abstract has the form \\(λx[φ(x)]\\), and can be applied like a predicate. Lambdas can only be applied to formulas, so the only abstracts that can be produced are for monadic relations.\n\n\n21.3.2 Basic Rules\nThe monadic second-order system (the system used in a proofchecker constructed with .SecondOrder) extends the first-order part of the system with the following set of new basic rules:\n\n\n\n\n\n\n\n\n\n\nRule\nAbbreviation\nPremises\nConclusion\n\n\n\n\nAbstraction\nABS\n\\(φ(σ)\\)\n\\(λx[φ(x)](σ)\\)\n\n\nApplication\nAPP\n\\(λx[φ(x)](σ)\\)\n\\(φ(σ)\\)\n\n\nMonadic Univ. Instantiation\nUI\n\\(∀XΦ(X)\\)\n\\(Φ(ζ)\\)\n\n\nMonadic Ex. Generalization\nEG\n\\(Φ(ζ)\\)\n\\(∃XΦ(X)\\)\n\n\n\n\nWhere ζ is schematic for a unary lambda term.\nAnd with rules for indirect derivation UD and EG exactly analogous to the first-order case, except that a fresh second-order variable is used rather than a fresh constant."
  },
  {
    "objectID": "montague.html#the-polyadic-second-order-system",
    "href": "montague.html#the-polyadic-second-order-system",
    "title": "21  Natural Deduction in the Carnap Book",
    "section": "21.4 The Polyadic Second-Order System",
    "text": "21.4 The Polyadic Second-Order System\n\n21.4.1 Notation\nFirst order syntax is as in the first-order system.\nThe available 2nd-order \\(n\\)-ary variables are \\(XN\\) through \\(ZN\\) (where \\(N\\) is replaced by the arity of the variable), with the infinitely many subscripted variables \\(XN_1, XN_2,\\ldots\\) written XN_1, XN_2,….\nA lambda abstract has the form \\(λx_1…λx_n[φ(x_1,…,x_n)]\\), and can be applied like an \\(n\\)-ary relation symbol.\n\n\n21.4.2 Basic Rules\nThe polyadic second-order system (the system used in a proofchecker constructed with .PolySecondOrder) extends the first-order part of the system with the following set of new basic rules:\n\n\n\n\n\n\n\n\n\n\nRule\nAbbreviation\nPremises\nConclusion\n\n\n\n\n\\(n\\)-Abstraction\nABSN\n\\(φ(σ_1,…,σ_n)\\)\n\\(λx_1…x_n[φ(x_1,…,x_n)](σ_1,…σ_n)\\)\n\n\n\\(n\\)-Application\nAPPN\n\\(λx_1…x_n[φ(x_1,…,x_n)](σ_1,…σ_n)\\)\n\\(φ(σ_1,…,σ_n)\\)\n\n\n\\(n\\)-ary Univ. Instantiation\nUIN\n\\(∀XNΦ(XN)\\)\n\\(Φ(ζ^n)\\)\n\n\n\\(n\\)-ary Ex. Generalization\nEGN\n\\(Φ(ζ^n)\\)\n\\(∃XNΦ(XN)\\)\n\n\n\n\nWhere \\(ζ^n\\) is schematic for an \\(n\\)-ary lambda term.\nAnd with rules of \\(n\\)-ary universal and existential derivation UDN and EGN exactly analogous to the first-order case, except that a fresh second-order variable is used rather than a fresh constant."
  },
  {
    "objectID": "montague.html#footnotes",
    "href": "montague.html#footnotes",
    "title": "21  Natural Deduction in the Carnap Book",
    "section": "",
    "text": "A fresh constant is one not appearing in the statement on the show line or in any assumption or premise on which the justifications for the show line depends, other than assumptions cancelled by the inference rule in question. For pedagogical purposes, it’s easiest to say that a constant is fresh if it does not appear outside of the given subproof.↩︎\nThe fact that \\(φ(a)\\) needs to be cited as a premise is undesirable, and will be changed relatively soon, pending some improvements to the proof checking algorithm.↩︎"
  },
  {
    "objectID": "Set_Theory_Demo.html",
    "href": "Set_Theory_Demo.html",
    "title": "22  Set Theory Demo",
    "section": "",
    "text": "Here’s a demo of Carnap’s (alpha-stage) support for natural deduction in set theory.\nThe rules are those of the Carnap book’s first-order system (The one used in a proof checker constructed with .FirstOrder—See the documentation for Montague Systems), plus the following bi-directional replacement rules:\n\n\n\n\n\n\n\n\n\n\nRule\nAbbreviation\nPremises\nConclusion\n\n\n\n\nUnion Definition\nDef-U\n\\(Φ(τ∈σ∨τ∈θ)\\)\n\\(Φ(x∈σ∪θ)\\)\n\n\nIntersection Definition\nDef-I\n\\(Φ(τ∈σ∧τ∈θ)\\)\n\\(Φ(x∈σ∩θ)\\)\n\n\nComplement Definition\nDef-C\n\\(Φ(τ∈σ∧¬τ∈θ)\\)\n\\(Φ(x∈σ/θ)\\)\n\n\nPower Set Definition\nDef-P\n\\(Φ(τ⊆θ)\\)\n\\(Φ(τ∈Pow(θ))\\)\n\n\nSubset Definition\nDef-S\n\\(Φ(∀x(x∈τ→x∈θ))\\)\n\\(Φ(τ⊆θ)\\)\n\n\nSeparation Definition\nDef-{}\n\\(Φ(τ∈θ∧φ(τ))\\)\n\\(Φ(τ∈{x∈θ|φ(x)})\\)\n\n\nEquality Definition\nDef-=\n\\(Φ(∀x(x∈τ↔x∈σ))\\)\n\\(Φ(τ=σ)\\)\n\n\n\n\nSymbols are:\n\n\n\n\nSymbol\nKeyboard\n\n\n\n\n∩\nI\n\n\n∪\nU,\n\n\n∈\nin, &lt;&lt;, &lt;e\n\n\n⊆\nwithin, &lt;(, &lt;s\n\n\n\n\nHere’s an example proof:\nAx(x in a -&gt; x within a) :PR\nShow P(a) within P(P(a))\n Show Ax(x in P(a) -&gt; x in P(P(a)))\n  Show b in P(a) -&gt; b in P(P(a))\n   b in P(a) :AS\n   b within a:Def-P 5\n   Ax(x in b -&gt; x in a):Def-S 6\n   Show b in P(P(a))\n    Show Ax(x in b -&gt; x in P(a))\n     Show c in b -&gt; c in P(a)\n      c in b :AS\n      c in b -&gt; c in a:UI 7\n      c in a :MP 11 12\n      c in a -&gt; c within a :UI 1\n      c within a:MP 13 14\n      c in P(a):Def-P 15\n     :CD 16\n    :UD10\n    b within P(a):Def-S 9\n    b in P(P(a)):Def-P 19\n   :DD 20\n  :CD 8\n :UD 4\n P(a) within P(P(a)):Def-S 3\n:DD 24"
  },
  {
    "objectID": "administration.html#general-information",
    "href": "administration.html#general-information",
    "title": "23  Carnap deployment and administration",
    "section": "23.1 General information",
    "text": "23.1 General information\nThe build infrastructure around Carnap supports two deployment modes: Stack builds for use with the Keter web server on traditional Linux servers and Nix builds for use on Docker or NixOS servers. Stack with Keter is used on Carnap.io. An experimental prebuilt Docker image is available.\nIf you would like to build Carnap yourself using Nix directly, see the development README.\nWe provide Nix packaging as the server attribute returned by default.nix for use in NixOS and NixOps.\nIf you wish to work with Carnap’s Nix infrastructure outside the Docker images, it is highly recommended to use Cachix to avoid having to build anything that our Continuous Integration has already built."
  },
  {
    "objectID": "administration.html#requirements",
    "href": "administration.html#requirements",
    "title": "23  Carnap deployment and administration",
    "section": "23.2 Requirements",
    "text": "23.2 Requirements\n\nPostgreSQL database with a user (TODO: which privileges do they need on their database?)\nWritable persistent directory to give as the dataroot\nGoogle API key (see below for information on how to configure it)"
  },
  {
    "objectID": "administration.html#server-setup",
    "href": "administration.html#server-setup",
    "title": "23  Carnap deployment and administration",
    "section": "23.3 Server setup",
    "text": "23.3 Server setup\n\n23.3.1 Docker\nThere is experimental Docker support for Carnap. Images are available via the GitHub container registry at ghcr.io/carnap/carnap/carnap:latest.\nThere is a sample docker-compose environment with automatically-managed Caddy based HTTPS termination, the recommended PostgreSQL database, and full setup instructions available in the Carnap documentation repository here.\n\n\nDocker configuration details\n\nCarnap in Docker can most effectively be configured with environment variables. See the example settings file for a list. A volume should be provided at /data for persistent data such as documents.\nAt minimum, the following environment variables must be configured:\n\nAPPROOT\nGOOGLEKEY\nGOOGLESECRET\n\n\n\n\n23.3.2 Manual setup summary\nIf you want to set up Carnap manually (Docker is recommended instead):\nFiles:\n\n/var/lib/carnap (or whatever you’re using as DATAROOT), writable by your carnap user you’re running the server as, with subdirectories:\n\nstatic from Carnap-Server/static (copying symlinks if you’re deploying it)\nconfig from Carnap-Server/config\nbook from Carnap-Book\nbook/cache directory created\ndata directory created\n\n\nEnvironment Variables:\n\nAPPROOT=https://carnap.example.com\nDATAROOT=/var/lib/carnap\nBOOKROOT=/var/lib/carnap/book\n\nAssuming you’re using PostgreSQL (... values are replaced with their respective real values):\n\nSQLITE=false\nPGHOST=...\nPGPORT=...\nPGUSER=...\nPGPASS=...\nPGDATABASE=...\n\n\n\n23.3.3 Settings file\nCarnap uses a settings file, settings.yml, to store its configuration. You can find the example version at Carnap-Server/config/settings-example.yml\nThe version in Carnap-Server/config/settings.yml is bundled within the executable. To utilize binary caching, Nix builds directly use the example configuration file, and users are expected to use environment variables or provide a different YAML file at runtime.\nYou can provide a different settings file at runtime by passing it as the first argument to the Carnap-Server executable. Also, all settings are configurable by environment variables, which is useful for Docker deployments (see the example configuration for a list of these settings).\n\n\n23.3.4 dataroot\nCarnap requires a writable dataroot, configured with the DATAROOT environment variable, to store documents and the cookie encryption key in.\nThis directory can also contain a subdirectory srv, whose contents are directly available at /srv/ on the Carnap instance. This is used for documentation on the production instance at carnap.io.\n\n\n23.3.5 Database\nDue to a bug that breaks migrations on SQLite in our database library, production deployments of Carnap should use PostgreSQL databases. Set the environment variable SQLITE=false and supply PGUSER, PGPASS, PGHOST, and if required, PGPORT and PGDATABASE for your PostgreSQL database instance.\nIf you wish to use peer authentication via Unix socket on a locally hosted PostgreSQL database, set all of PGUSER, PGPASS, PGHOST and PGPORT to empty strings.\n\n\n23.3.6 NixOps\nThe Carnap team at UBC uses NixOps to automatically deploy Carnap on DigitalOcean servers running NixOS. It’s currently experimental and documentation is a work-in-progress, but the configuration files are public."
  },
  {
    "objectID": "administration.html#authentication",
    "href": "administration.html#authentication",
    "title": "23  Carnap deployment and administration",
    "section": "23.4 Authentication",
    "text": "23.4 Authentication\nTwo authentication schemes are supported by Carnap, both of which require some configuration. Production Carnap deployments currently require Google authentication to be configured for administration purposes, even if it is not intended to be used by students.\nSee the LTI 1.3 documentation for details on how to configure that system after completing setup.\n\n23.4.1 Google authentication\nSetting up Google authentication requires setting up a Google APIs project.\nFirst, create the project: https://console.developers.google.com/cloud-resource-manager\nThen, create an OAuth2 client ID: https://console.developers.google.com/apis/credentials\nIt will show up like this:\n\n\n\nimage of the client ID page\n\n\nOn the client ID page, set an Authorized Redirect URI for https://YOURDOMAINHERE/auth/page/google/callback:\n\n\n\nimage of the authorized redirect URIs page\n\n\nOn your OAuth2 Consent Screen tab, no scopes need to be added as Carnap just needs emails to log in.\nOnce you’ve configured all the information on the Google side, fill it in the Carnap configuration file or environment variables:\n\ngoogle-api-key/GOOGLEKEY: your Google Client ID\ngoogle-secret/GOOGLESECRET: your Google Client secret"
  },
  {
    "objectID": "administration.html#post-installation-first-time-setup",
    "href": "administration.html#post-installation-first-time-setup",
    "title": "23  Carnap deployment and administration",
    "section": "23.5 Post installation first-time setup",
    "text": "23.5 Post installation first-time setup\n\n23.5.1 Becoming administrator\nGo to your newly minted Carnap instance and log in with Google. Enter your name and register. Then, go to https://YOURDOMAINHERE/admin_promote and click the button. You will now be the administrator of this instance. Multiple administrators are supported (with manual database editing), but there is not yet user interface to enable this.\nYou can manage the site including promoting instructors, managing students, and configuring LTI platforms at https://YOURDOMAINHERE/master_admin.\n\n\n23.5.2 Once you’re an administrator\nAfter you have become administrator, check the following items on the master_admin page:\n\nAsk anyone who needs to be instructor to log in and register, then promote them to instructor.\nIf you don’t want to allow further Google registrations (if you intend to use LTI with your learning management system for student login, setting this option is recommended), enter true for “Disable Google Registration” under the “Site Configuration” heading:\n\nAnyone who has logged in already with Google can still log in, but new registrations will be prevented.\nThis can be disabled temporarily at any time if more instructors need to be added.\nConfigure login with LTI 1.3 compatible learning management systems using the LTI guide."
  },
  {
    "objectID": "lti.html#basic-setup-outline",
    "href": "lti.html#basic-setup-outline",
    "title": "24  LTI 1.3",
    "section": "24.1 Basic Setup Outline",
    "text": "24.1 Basic Setup Outline\nConnecting Carnap to your university’s LMS involves three steps.\n\nYour LMS needs to be configured to recognize Carnap\nYour Carnap server needs to be configured to recognize your LMS\nYour Carnap class needs to be configured to auto-enroll students who are launching Carnap from within your LMS.\n\nBelow, you’ll find sections on each of these steps."
  },
  {
    "objectID": "lti.html#step-1---configuring-your-lms-to-recognize-carnap",
    "href": "lti.html#step-1---configuring-your-lms-to-recognize-carnap",
    "title": "24  LTI 1.3",
    "section": "24.2 Step 1 - Configuring your LMS to recognize Carnap",
    "text": "24.2 Step 1 - Configuring your LMS to recognize Carnap\nThere are a few generic pieces of information your LMS will need in order to connect to Carnap. These are as follows:\n\noidc_initiation_url: https://carnap.io/auth/page/lti13/initiate\ntarget_link_uri: https://carnap.io\nPublic JWK URL: https://carnap.io/auth/page/lti13/jwks\nRedirect URLs: https://carnap.io/auth/page/lti13/authenticate\n\nIf you are running your own instance of the Carnap server, you will use the same paths but with your custom domain name replacing “carnap.io”.\nHowever, different LMSes need this information to be entered in different places. This will generally be the responsibility of an LMS administrator, rather than the responsibility of an individual instructor, so you may need to work with your IT department to arrange the initial setup of the LMS integration.\nNow - here are instructions on configuring your LMS, for the LMSes we have experience with. If something is missing or incorrect, please consider opening an issue here or sending an email to gleachkr@gmail.com.\n\n\nConfiguring Canvas to use Carnap\n\nYou’ll need to begin by configuring an LTI key. This requires administrator access to your Canvas instance, so if you’re an instructor, you may need to speak to IT. Instructions for configuring an LTI key for Canvas can be found here: Configuring an LTI key.\nCanvas allows configurations to be imported rather than set manually, via the “Paste JSON” option described in the documentation linked above. A JSON file for easy configuration of a Canvas instance using the “Paste JSON” option is reproduced below.\nOnce the LTI key is configured in your Canvas instance, you’ll also need to add the “Client Id” number from the key to your course. (If an adminstrator configured the key for you, you may need to ask them for the Client ID.) Instructions on adding Carnap to your course using the Client ID can be found here: Adding Carnap To Your Course.\nFor more details on Canvas setup with LTI 1.3, see:\n\nTechnical documentation. This is also a nice general overview of the protocol.\nConfiguring an LTI key\nAdding Carnap To Your Course\n\n\n24.2.0.1 JSON Configuration with Canvas.\n{\n   \"title\": \"Carnap\",\n   \"description\": \"Carnap Logic Framework\",\n   \"oidc_initiation_url\": \"https://carnap.io/auth/page/lti13/initiate\",\n   \"target_link_uri\": \"https://carnap.io/\",\n   \"public_jwk_url\": \"https://carnap.io/auth/page/lti13/jwks\",\n   \"scopes\": [\n      \"https://purl.imsglobal.org/spec/lti-ags/scope/lineitem\",\n      \"https://purl.imsglobal.org/spec/lti-ags/scope/result.readonly\",\n      \"https://purl.imsglobal.org/spec/lti-ags/scope/score\",\n      \"https://purl.imsglobal.org/spec/lti-nrps/scope/contextmembership.readonly\"\n   ],\n   \"extensions\": [\n      {\n         \"domain\": \"carnap.io\",\n         \"tool_id\": \"Carnap.io\",\n         \"platform\": \"canvas.instructure.com\",\n         \"settings\": {\n            \"text\": \"Carnap\",\n            \"selection_height\": 800,\n            \"selection_width\": 800,\n            \"privacy_level\": \"public\",\n            \"placements\": [\n               {\n                  \"text\": \"Carnap\",\n                  \"enabled\": true,\n                  \"placement\": \"course_navigation\",\n                  \"message_type\": \"LtiResourceLinkRequest\",\n                  \"target_link_uri\": \"https://carnap.io/\",\n                  \"windowTarget\": \"_blank\"\n               }\n            ]\n         }\n      }\n   ]\n}\nNote: It is possible to use Carnap in an iframe (so it appears in the Canvas page without opening a new tab), but there are caveats, especially around support for Safari and other WebKit browsers, since they are very aggressive about third-party cookie blocking. If you want to try this, remove the \"windowTarget\": \"_blank\" in the JSON.\n\n\n\nConfiguring Brightspace/D2L to use Carnap\n\nUnder LTI Security Settings, make sure that the following are checked to allow for automatic registration in your Carnap courses:\n\nName\nOrg Unit Information\n\nCarnap will also use the Email property to fill in user information if it is present, but it is not required.\nIt appears that Brightspace doesn’t support sending student ID numbers in the lis claim as person_sourcedid like Canvas does. If this is something that you need for gradebook purposes, it is possible we can make Carnap accept the Brightspace specific “Org Defined ID” or “User ID” properties for the Carnap “University ID” field.\n\n\n\nscreenshot from brightspace documentation of the “security settings” subsection with “name” and “org unit information” checked\n\n\nFor more details on LTI configuration in Brightspace/D2L, see these pages:\n\nLTI Integration Guide (links to other pages)\nLTI Security Settings and Platform information\nLTI Advantage (LTI 1.3) Administrator Guide"
  },
  {
    "objectID": "lti.html#step-2---configuring-carnap-to-recognize-your-lms",
    "href": "lti.html#step-2---configuring-carnap-to-recognize-your-lms",
    "title": "24  LTI 1.3",
    "section": "24.3 Step 2 - Configuring Carnap to recognize your LMS",
    "text": "24.3 Step 2 - Configuring Carnap to recognize your LMS\nAfter your LMS is configured to talk to Carnap, it needs to be registered on the Carnap server. For setup with the public Carnap instance at Carnap.io, contact Graham with the following details from your LMS:\n\nPublic JWKs URL\nAuthorization Redirect URL\nClient ID\n\nFor example, for a cloud Canvas (production environment), these would be:\n\nJWK URL: https://canvas.instructure.com/api/lti/security/jwks\nAuthorization redirect URL: https://canvas.instructure.com/api/lti/authorize_redirect\nClient ID: from your LTI developer key\nDeployment ID: not required for Carnap\n\nIf you are running a self-hosted instance of Carnap, you can configure LTI Platforms (Learning Management Systems) on the admin page at https://carnap.example.com/master_admin."
  },
  {
    "objectID": "lti.html#step-3---configuring-your-carnap-class-for-auto-enrollment",
    "href": "lti.html#step-3---configuring-your-carnap-class-for-auto-enrollment",
    "title": "24  LTI 1.3",
    "section": "24.4 Step 3 - Configuring your Carnap class for auto-enrollment",
    "text": "24.4 Step 3 - Configuring your Carnap class for auto-enrollment\nAutomatic registration links a class on the Carnap server to a class in an LMS, and automatically registers students in the Carnap class when they log in to Carnap from the associated course in the LMS LMS.\nOnce you’ve completed steps 1 and 2 above, attempt to log in to Carnap from the LMS course that you want to connect to Carnap. A message will appear on the Carnap user registration page giving you an autoregistration ID. The ID will look something like this:\n{\"ltiDeploymentId\":\"…\", \"ltiContextId\":\"…\",\"ltiIssuer\":\"…\",\"label\":\"…\"}\nbut with concrete values replacing the ellipses.\nCopy this ID down (the whole thing, including the enclosing brackets) and go to your instructor page on Carnap. Select the course that you wish to associate with your LMS course, and edit the course information. In the course information, there will be a field where you can paste the autoregistration ID.\nOnce that ID has been configured, all future launches from your LMS course will be registered in the associated Carnap course automatically.\n\n24.4.1 Notes\n\nAutomatic registrations are allowed even if your course is closed (even if you’ve unchecked the “course open” box on your instructor page). So, you can set registration to be LTI only simply by setting your course to be closed.\nStudents will have their user information automatically synchronized with the LMS on every launch, so if they want to change their name or other details, that should be accomplished in the LMS or other upstream systems."
  },
  {
    "objectID": "lti.html#footnotes",
    "href": "lti.html#footnotes",
    "title": "24  LTI 1.3",
    "section": "",
    "text": "No previous versions superseded by LTI 1.3 including LTI 1.0, 1.1, or 2.0 are supported.↩︎"
  },
  {
    "objectID": "lti-develop.html#debugging",
    "href": "lti-develop.html#debugging",
    "title": "25  LTI Information for Carnap Developers",
    "section": "25.1 Debugging",
    "text": "25.1 Debugging\nCarnap records LTI tokens (with student data removed) to its server logs for the purposes of debugging automatic LTI registration, allowing to find out why automatic registration is failing. If that is not sufficient, some debugging can be done client-side by looking at browser request logs in the network tab of the developer tools:\nMost of the process can be traced with dev tools. Note that Chrome now has a feature called “Auto-open DevTools for popups” that is ideal for debugging LTI failing to initiate properly in a popup. Remember to enable “Preserve log” before testing the problematic path.\nThese settings are accessible here:\nClick the gear icon at the top right of the DevTools panel:\n\n\n\nwhere that icon is\n\n\nThen the setting is in the bottom right under Global:\n\n\n\nwhere the setting is\n\n\n\nUsing this feature and the network tab, you can find the failing initiate/other request and figure out what the LMS is sending with its requests and how Carnap reacted.\nLet’s go through a successful sequence of requests in DevTools. My Canvas is at http://ubuntu-vm:8900 and my Carnap is at https://ubc-carnap-staging.lfcode.ca (these are both test instances running on virtual machines on my computer).\n\nI click the “Carnap” link in the Canvas sidebar. A new tab opens, Canvas goes through a couple of pages itself before sending us to Carnap.\nFirst we have a POST to Carnap’s /auth/page/lti13/initiate with the following parameters in the form data:\niss: https://canvas.instructure.com\nlogin_hint: f326d6a8a55f30f47b2480586f97991ab9e602bb\nclient_id: 10000000000002\ntarget_link_uri: https://ubc-carnap-staging.lfcode.ca/\nlti_message_hint: some-long-jwt-that-is-opaque-per-the-standard\ncanvas_region: not_configured\nThe main thing to note here is that this is where Carnap has to decide where to send the user back to. This is done with a combination of iss and client_id, the latter of which is optional and we do our best if it’s not there.\nCarnap finds a record in its LTI platforms with the issuer and client_id pair, so it sends a 303 redirect to http://ubuntu-vm:8900/api/lti/authorize_redirect as configured in the Carnap LTI settings.\nCarnap sends the browser a redirect to this URL:\nhttp://ubuntu-vm:8900/api/lti/authorize_redirect\n    ?scope=openid\n    &response_type=id_token\n    &client_id=10000000000002\n    &redirect_uri=https%3A%2F%2Fubc-carnap-staging.lfcode.ca%2Fauth%2Fpage%2Flti13%2Fauthenticate\n    &login_hint=f326d6a8a55f30f47b2480586f97991ab9e602bb\n    &state=3CjT-Wa3RKZjgge6bjPNEycuOToQdTUa1ELW3Jx38Gh6&response_mode=form_post\n    &nonce=eara1fJmG39MIIijSv-ehGUMJsX2SVhlYhGZdxcsCJKa\n    &prompt=none\n    &lti_message_hint=some-long-jwt-that-is-opaque-per-the-standard\nThings of note in this request:\n\nWe generate the redirect_uri.\nThe client_id, login_hint, and lti_message_hint are just from Canvas’ initiation\nstate and nonce are just randomly generated strings we check on the way back.\nSome of these parameters are kept in the session by Carnap, so if cookies don’t work, we fail either at this request or the next.\n\n\nThe browser hits Canvas at that URL, and it bounces around a bit before coming back to Carnap with a POST https://ubc-carnap-staging.lfcode.ca/auth/page/lti13/authenticate.\nIts parameters are:\nutf8: ✓\nauthenticity_token: VtRVOQdeoLQqfnzuNSa3kfg8vyuhcWj8lhsehEsmhx4ukCdsPxiT/3MYF416c+Tiyw7zGZFAGpfeTXPXAkTFRg==\nid_token: ey -- THIS IS A VERY LONG JWT TOKEN --\nstate: 3CjT-Wa3RKZjgge6bjPNEycuOToQdTUa1ELW3Jx38Gh6\nWe don’t care about any of these except for the very long id_token, which is a JSON Web Token.\nCarnap receives this, performs autoregistration, and goes to the user page. Thus, this is where you will want to start looking if you are having issues with attributes getting across, for example names, emails, etc.\nView the token in a JWT debugging tool"
  },
  {
    "objectID": "javascript.html#including-javascript",
    "href": "javascript.html#including-javascript",
    "title": "26  JavaScript Extensions for Carnap",
    "section": "26.1 Including JavaScript",
    "text": "26.1 Including JavaScript\nCarnap allows you to incorporate external JavaScript to an assignment, in order to add extra interactive behavior to your problem sets. This can be done using the raw_html pandoc extension to include a &lt;script&gt; tag, or by including the JS in a metadata block. Like a CSS entry, a JS entry entry can include either a url for a single script, like so:\n---\njs: https://carnap.io/shared/myemail@university.edu/myjs.js\n--- \nor for several scripts, like so:\n---\njs:\n- https://carnap.io/shared/myemail@university.edu/myjs1.js\n- https://carnap.io/shared/myemail@university.edu/myjs2.js\n--- \nThe scripts can be hosted anywhere, including on the Carnap server. As with stylesheets, scripts can be uploaded as normal documents so long as they’re given the proper filetype extension (in this case, “.js” rather than “.css”)"
  },
  {
    "objectID": "javascript.html#advanced-usage",
    "href": "javascript.html#advanced-usage",
    "title": "26  JavaScript Extensions for Carnap",
    "section": "26.2 Advanced Usage",
    "text": "26.2 Advanced Usage\n\n26.2.1 Interacting with the Server\nJavaScript running as part of an assignment will have access to an object called CarnapServerAPI, which lets your JavaScript interact with the server, to retrieve information about the current student and assignment, and to save information on the server for later retrieval.\nCurrently, the useful properties of CarnapServerAPI are as follows:\n\n\n\n\nProperty\nData\n\n\n\n\nCarnapServerAPI.user.firstName\nStudent’s first name\n\n\nCarnapServerAPI.user.lastName\nStudent’s first name\n\n\nCarnapServerAPI.assignment.dueDate\nAssignment due date ECMAScript epoch time (milliseconds since midnight 1/1/1970 UTC, for use with the Date constructor).\n\n\nCarnapServerAPI.assignment.description\nAssignment description\n\n\n\n\nThere are two methods for dealing with saving data, one for saving and one for retrieving. Data is always saved under a “namespace”, so that different JavaScript extensions can avoid overwriting one another’s saved information. Each student has their own saved state for each assignment - state is not shared between students or between assignments.\n\n\n\n\nMethod\nResult\n\n\n\n\nCarnapServerAPI.putAssignmentState(ns,state)\nSerializes state and inserts it under namespace ns on the server.\n\n\nCarnapServerAPI.getAssignmentState()\nRetrieves the assignment state asynchronously, as a Promise.\n\n\n\n\nThe first call to CarnapServerAPI.getAssignmentState retrieves the state from the server, and subsequent calls return a locally cached state that’s updated by CarnapServerAPI.putAssignmentState. So, while the first call to CarnapServerAPI.getAssignmentState might take a moment, subsequent calls should be quite fast."
  },
  {
    "objectID": "javascript.html#events",
    "href": "javascript.html#events",
    "title": "26  JavaScript Extensions for Carnap",
    "section": "26.3 Events",
    "text": "26.3 Events\nIn order to make it possible for interactive JS behavior to be triggered by successful or unsuccessful completion of exercises, Carnap provides a few events that you can listen for.\nWhen Carnap finishes its initial loading, and exercise elements are properly formatted and loaded, it will fire a global carnap-loaded event, which can be observed with document.addEventListener(\"carnap-loaded\", ...).\nWhenever an exercise is successfully checked or submitted, an exercise-success event will fire on the main exercise element (the one carries the data-carnap-* attributes). An exercise-failure event fires when an exercise is checked and detected as incorrect, or a submission is rejected. Both exercise-success and exercise-failure are disabled if an exercise has the exam option set.\nFinally, a problem-submision event fires on the submission button when a problem is submitted."
  },
  {
    "objectID": "installation.html#requirements",
    "href": "installation.html#requirements",
    "title": "27  Installing Carnap",
    "section": "27.1 Requirements",
    "text": "27.1 Requirements\nCarnap has two components: Carnap-Client contains the code to display and check exercises. Carnap-Server contains the code for the Carnap web application (administering courses, uploading exercises, submitting solutions, etc.). Both have to be built and installed for Carnap to work.\nTo install Carnap you need: - A computer to build and run Carnap on. Currently Linux and MacOS are supported, but it is possible to build and run Carnap on Windows using the Windows Subsystem for Linux. - The source code for Carnap from GitHub. - Software to build Carnap.\nWarning: building Carnap requires a large amount of memory (about 12GB) to compile. You should probably close all other applications and background services (Zoom, Slack, etc.) when doing it."
  },
  {
    "objectID": "installation.html#building-carnap",
    "href": "installation.html#building-carnap",
    "title": "27  Installing Carnap",
    "section": "27.2 Building Carnap",
    "text": "27.2 Building Carnap\n\n27.2.1 Installing Nix\nThe easiest way to build Carnap is using the Nix package manager. Carnap comes with information Nix uses to build Carnap and all its dependencies automatically, without you having to install anything else by hand. The build using Nix will use self-contained tools to reduce the risk of incompatibilities between, e.g., a Haskell compiler you have installed and what Carnap requires.\nTo install Nix, follow the Installation instructions for your platform. On Linux, this just requires the command\n$ sh &lt;(curl -L https://nixos.org/nix/install)\nfrom the terminal command line as a user who has sudo access.\n(The $ indicates the command line prompt, you only enter the commands to the right of it.)\nIf you want to compile using nix on a machine where you don’t have sudo access, some alternative nix installation approaches are described in the nixos wiki. In particular a nix-user-chroot installation has been confirmed to work for compiling Carnap.\nYou can significantly speed up builds by using binaries for Carnap dependencies from Carnap’s Cachix instance, which has support for both Linux and macOS. To use it, say:\n$ nix-env -iA cachix -f https://cachix.org/api/v1/install\n$ cachix use carnap\n\n\n27.2.2 Download the Source Code\nThe latest version of Carnap’s source code is available in the GitHub repository. Click on the “Code” button. If you have git installed and configured for ssh access, this command should do the trick:\n$ git clone git@github.com:Carnap/Carnap.git\nThis downloads the source code into the directory Carnap. Change to that directory by saying\n$ cd Carnap\n\n\n27.2.3 Run the Development Server\nOnce you’re in the Carnap directory, you can use nix to build the different components of the system. Some useful recipes for building in different ways have been recorded in Carnap’s included Makefile. If you’re interested in building a simple development server (which doesn’t require any extra database or authentication configuration) then you can simply issue the command\nmake devel\nThis will build Carnap’s client-side component (the JavaScript proof-checker that runs in the browser), and will then build and activate a Carnap server. By default, you’ll be able to reach this server by navigating to http://localhost:3000 on the computer where the server is running. Warning: as noted above, the initial build may take some time, and may require a lot of memory.\nIssuing make devel again after the initial build will reactivate the server, unless you’ve made any changes to your copy of Carnap source code. If you have made changes, then reissuing make devel will rebuild any parts of the client and server that are downstream from your changes, and will then reactivate the server. Some behavior of the development server (like whether the server appears at http://localhost:3000, or somewhere else) can be controlled by changing environment variables. For details, see the server configuration documentation"
  },
  {
    "objectID": "installation.html#server-setup",
    "href": "installation.html#server-setup",
    "title": "27  Installing Carnap",
    "section": "27.3 Server Setup",
    "text": "27.3 Server Setup\nOnce your server is configured and running, you have to provide yourself with an administrator account if you want to create any instructors.\nGo to your newly minted Carnap instance and log in - because you’re running in development mode, you can log in as whatever you’d like by just typing in an identifier. Then go to http://localhost:3000/admin_promote (or to the corresponding address if you’ve edited the settings file so that you’re serving on something other than localhost:3000) and click the button. You will now be the administrator of this instance. Multiple administrators are supported, but there is not yet a user interface to enable this.\nYou can now administrate your server (including promoting instructors, and configuring LTI platforms) at http://localhost:3000/master_admin"
  },
  {
    "objectID": "installation.html#carnaps-user-documentation",
    "href": "installation.html#carnaps-user-documentation",
    "title": "27  Installing Carnap",
    "section": "27.4 Carnap’s user documentation",
    "text": "27.4 Carnap’s user documentation\n\nDoes this section belong in server configuration?\n\nThe data directory (by default, Carnap/dataroot) can also contain a subdirectory srv, whose contents are directly available at /srv/ on the Carnap instance. This is used for documentation on the production instance at carnap.io. The menu for Carnap instructors contains a link “Documentation” which points to /srv/doc/index.md.\nIf you want site-specific documentation, you should create the directory srv/doc/ inside your data directory, and place a MarkDown file index.md there as the starting point. If you want to provide Carnap’s official documentation on your Carnap instance, you can download it into said directory:\n$ cd dataroot\n$ git clone git@github.com:Carnap/Carnap-Documentation.git srv"
  },
  {
    "objectID": "api.html#tracking-issues",
    "href": "api.html#tracking-issues",
    "title": "28  Carnap API",
    "section": "28.1 Tracking issues",
    "text": "28.1 Tracking issues\n\nIssue #226 “Perform instructor actions via an API”\nIssue #231 “Documents API”\nIssue #230 “Copy course”"
  },
  {
    "objectID": "api.html#instructor-setup",
    "href": "api.html#instructor-setup",
    "title": "28  Carnap API",
    "section": "28.2 Instructor setup",
    "text": "28.2 Instructor setup\nTo use the API, you need an API key. Your API key should be kept a secret, since it allows anyone who has it to access and modify your courses.\nYou can create an API key for yourself on the instructor page, beneath the “Manage Uploaded Documents” tab, here:\n\n\n\nimage showing the API key field at the bottom of the screen"
  },
  {
    "objectID": "api.html#usage",
    "href": "api.html#usage",
    "title": "28  Carnap API",
    "section": "28.3 Usage",
    "text": "28.3 Usage\n\n28.3.1 Example Scripts\nHere are some examples to help you start using the API with different programming languages. We assume that you’re testing, so the URL begins with http://localhost:3000. This should instead be https://YOURSERVERRDOMAIN when you’re using this with a non-local server\n\n28.3.1.1 Python\nCreate the file apitest.py:\nimport requests\n\napikey = 'REDACTED'\n\nbase = 'http://localhost:3000/api/v1'\n\ndef rq(meth, p, *args, key=apikey, **kwargs):\n    h = {\n        'X-API-KEY': key,\n    }\n    return requests.request(meth, base + p, *args, **kwargs, headers=h)\nTo issue the commands displayed below interactively ipython -i apitest.py, or python -i apitest.py.\n\n\n28.3.1.2 Bash\nJust use curl as indicated below."
  },
  {
    "objectID": "api.html#available-api-methods",
    "href": "api.html#available-api-methods",
    "title": "28  Carnap API",
    "section": "28.4 Available API Methods",
    "text": "28.4 Available API Methods\n\n28.4.1 Document API\nAll of the methods in the documents API require that :instructorIdent is the same as the user who owns the API key (i.e. they do not work on other users’ documents yet).\nTracking issue\n\n28.4.1.0.1 GET /instructors/:instructorIdent/documents\n\n\nRetrieves a list of documents owned by the given instructor and their metadata.\n\nHere are some example commands:\nPython\nrq('GET', '/instructors/yourname@gmail.com/documents').json()\nBash\ncurl -H \"X-API-KEY:YOURAPIKEYHERE\" localhost:3000/api/v1/instructors/yourname@youremail.com/documents\nResult\nAnd here’s what your result will look like:\n[{'creator': 1,\n  'date': '2021-02-16T09:41:39.445672522Z',\n  'scope': 'Public',\n  'id': 1,\n  'description': None,\n  'filename': 'api.md'}]\n\n\n\n28.4.1.0.2 POST /instructors/:instructorIdent/documents\n\n\nCreates a new document with empty contents.\n\nShould be followed by a PUT at /instructors/:instructorIdent/documents/:documentId/data in order to fill in the document contents.\nPython\nrq('POST', '/instructors/yourname@gmail.com/documents',\n    json={\n        \"filename\": \"myfile.md\",\n        \"scope\": \"Private\",\n        \"description\": \"My file\",\n    }\n).json()\nBash\ncurl -H \"X-API-KEY:YOURAPIKEY\" \\\n     -H \"Content-Type: application/json\" \\\n     -d '{\"filename\":\"myfile.md\",\"scope\":\"Private\", \"description\":\"My file\"}' \\\n     localhost:3000/api/v1/instructors/yourname@gmail.com/documents\nResult\nThe ID of the new document:\n3\nor an error is returned as an encoded JSON string.\nThe response will also include a Location header pointed at the new resource. scope indicates the sharing scope of the document, and can be one of Private, Public, LinkOnly or InstructorsOnly. Both the scope and description fields can be omitted, with scope defaulting to Private.\n\n\n\n28.4.1.0.3 GET /instructors/:instructorIdent/documents/:documentId\n\n\nLike GET /instructors/:instructorIdent/documents but for a single document.\n\nPython\nrq('GET', '/instructors/yourname@gmail.com/documents/1').json()\nBash\ncurl -H \"X-API-KEY:YOURAPIKEYHERE\" localhost:3000/api/v1/instructors/yourname@youremail.com/documents/1\nResult\n{'creator': 1,\n 'date': '2021-02-16T09:41:39.445672522Z',\n 'scope': 'Public',\n 'description': None,\n 'filename': 'api.md'}\n\n\n\n28.4.1.0.4 PATCH /instructors/:instructorIdent/documents/:documentId\n\n\nUpdates the metadata for a single document.\n\nPython\nrq('PATCH', '/instructors/yourname@gmail.com/documents/1',\n    json={\"scope\": \"Private\"}).json()\nBash\ncurl -H \"X-API-KEY:YOURAPIKEY\" -X \"PATCH\" -d '{\"scope\":\"Public\"}' \\\n     localhost:3000/api/v1/instructors/yourname@youremail.com/documents/1\nResult\n{'creator': 1,\n 'date': '2021-02-16T09:41:39.445672522Z',\n 'scope': 'Private',\n 'description': None,\n 'filename': 'api.md'}\nCurrently scope and description fields can be updated. Passing in a null value for description will cause the document description to be cleared entirely.\n\n\n\n28.4.1.0.5 GET /instructors/:instructorIdent/documents/:documentId/data\n\n\nGets the content of the given document by ID and returns it.\n\nPython\nrq('GET', 'instructors/yourname@youremail.com/documents/1/data').text\nBash\ncurl -H \"X-API-KEY:YOURAPIKEYHERE\" \\\n     localhost:3000/api/v1/instructors/yourname@youremail.com/documents/1/data\nResult\nThe contents of your document, as text\n\n\n\n28.4.1.0.6 PUT /instructors/:instructorIdent/documents/:documentId/data\n\n\nOverwrites the content of the given document by ID.\n\nThese examples use “aaaaaa” as a thing you might insert as the document contents.\nPython\nrq('PUT', '/instructors/yourname@gmail.com/documents/1/data', data='aaaaaa')\nBash\necho aaaaaa | curl -H \"X-API-KEY:YOURAPIKEYHERE\"  -T \"-\" \\\n    localhost:3000/api/v1/instructors/gleachkr@gmail.com/documents/1940/data\nResult\n&lt;Response [200]&gt;\n\n\n\n\n28.4.2 Course API\nNote: :courseTitle in the below needs to be properly URL-encoded for curl, which means in particular that each space needs to be replaced with %20. The python requests module does URL-encoding automatically, so spaces can be used verbatim. The examples below are for a course with the title “test course”.\n\n28.4.2.0.1 GET https://carnap.io/api/v1/instructors/:instructorIdent/courses\n\n\nRetrieves a list of courses.\n\nrq('GET', '/instructors/gleachkr@gmail.com/courses/test course/students').json()\ncurl -H \"X-API-KEY:YOURAPIKEYHERE\" \\\n    'localhost:3000/api/v1/instructors/gleachkr@gmail.com/courses'\nResult\n[\n  {\n    \"textBook\": 12,\n    \"instructor\": 1123,\n    \"enrollmentOpen\": false,\n    \"endDate\": \"2021-05-19T04:59:59Z\",\n    \"startDate\": \"2021-01-26T05:59:59Z\",\n    \"textbookProblems\": {\n      \"readAssignmentTable\": [\n        [\n          1,\n          \"2021-05-15T04:59:59Z\"\n        ],\n        ...\n      ]\n    },\n    \"totalPoints\": 0,\n    \"title\": \"PHILO680 - Independent Study\",\n    \"timeZone\": \"America/Chicago\",\n    \"description\": null\n  }\n]\nThe instructor field gives the main instructor’s instructorId, which is distinct from their userId. The textBook field gives the assignmentId for an associated textbook, which is the same data as the id field for an assignment, retrieved via GET https://carnap.io/api/v1/instructors/:instructorIdent/courses/:courseTitle/assignments\n\n\n\n28.4.2.0.2 GET https://carnap.io/api/v1/instructors/:instructorIdent/courses/:courseTitle/students\n\n\nRetrieves a list of student data for a given course, including unique :studentId identifiers for each student.\n\nrq('GET', '/instructors/gleachkr@gmail.com/courses/test course/students').json()\ncurl -H \"X-API-KEY:YOURAPIKEYHERE\" \\\n    'localhost:3000/api/v1/instructors/gleachkr@gmail.com/courses/test%20course/students'\nResult\n[\n  {\n    \"email\": \"groundworker@gmail.com\",\n    \"lastName\": \"Kant\",\n    \"universityId\": null,\n    \"userId\": 1231,\n    \"firstName\": \"Immanuel\",\n    \"isAdmin\": false,\n    \"id\": 1313,\n    \"enrolledIn\": 141,\n    \"instructorId\": null,\n    \"isLti\": false\n  },\n  {\n    \"email\": \"thinker@gmail.com\",\n    \"lastName\": \"Descartes\",\n    \"universityId\": null,\n    \"userId\": 1232,\n    \"firstName\": \"Rene\",\n    \"isAdmin\": false,\n    \"id\": 1314,\n    \"enrolledIn\": 141,\n    \"instructorId\": null,\n    \"isLti\": false\n  },\n]\nThe :studentId for a student is the number in the id field, not the number in the userId field.\n\n\n\n28.4.2.0.3 GET https://carnap.io/api/v1/instructors/:instructorIdent/courses/:courseTitle/students/:studentId\n\n\nRetrieves student data for the student with id :studentId\n\nrq('GET', '/instructors/gleachkr@gmail.com/courses/test course/students/1231').json()\ncurl -H \"X-API-KEY:YOURAPIKEYHERE\" \\\n    'localhost:3000/api/v1/instructors/gleachkr@gmail.com/courses/test%20course/students/1231'\nResult\n{\n    \"email\": \"groundworker@gmail.com\",\n    \"lastName\": \"Kant\",\n    \"universityId\": null,\n    \"userId\": 1231,\n    \"firstName\": \"Immanuel\",\n    \"isAdmin\": false,\n    \"id\": 1313,\n    \"enrolledIn\": 141,\n    \"instructorId\": null,\n    \"isLti\": false\n}\nThe :studentId for a student is the number in id field, not the number in the studentId field.\n\n\n\n28.4.2.0.4 GET https://carnap.io/api/v1/instructors/:instructorIdent/courses/:courseTitle/students/:studentId/submissions\n\n\nRetrieves a list of all submission data for the student with id :studentId\n\nrq('GET', '/instructors/gleachkr@gmail.com/courses/test course/students/1231/submissions').json()\ncurl -H \"X-API-KEY:YOURAPIKEYHERE\" \\\n    'localhost:3000/api/v1/instructors/gleachkr@gmail.com/courses/test%20course/students/1231/submissions'\nResult\n[\n  {\n    'problemSubmissionAssignmentId': 3001, \n    'problemSubmissionCorrect': False, \n    'problemSubmissionData': {..depends on problem type..}, \n    'problemSubmissionSource': {'tag': 'Assignment', 'contents': 'AssignmentMetadataKey {unAssignmentMetadataKey = SqlBackendKey {unSqlBackendKey = 3001}}'}, 'problemSubmissionCredit': 1, \n    'problemSubmissionIdent': 'Exercise-24', \n    'problemSubmissionUserId': 10385, \n    'problemSubmissionLateCredit': None, \n    'problemSubmissionType': 'Qualitative', \n    'problemSubmissionTime': '2021-04-26T19:14:06.563900857Z', \n    'problemSubmissionExtra': None\n  }\n]\n\n\n\n28.4.2.0.5 GET https://carnap.io/api/v1/instructors/:instructorIdent/courses/:courseTitle/students/:studentId/extensions\n\n\nRetrieves a list of all assignment extensions granted to the student with id :studentId\n\nRESULT\n[\n  {\n    \"onAssignment\": 1238,\n    \"until\": \"2022-06-02T04:59:59Z\",\n    \"forUser\": 12313,\n    \"id\": 499\n  }\n]\n\n\n\n28.4.2.0.6 POST https://carnap.io/api/v1/instructors/:instructorIdent/courses/:courseTitle/students/:studentId/extensions\n\n\nGrants an extension to the student with id :studentId\n\nrq('POST', '/instructors/yourname@gmail.com/courses/test course/students/12313/extensions',\n    json={\n        \"onAssignment\": 2756,\n        \"until\": \"2022-06-02\",\n        \"forUser\": 12313,\n    }\n).json()\nBash\ncurl -H \"X-API-KEY:YOURAPIKEY\" \\\n     -H \"Content-Type: application/json\" \\\n     -d '{ \"onAssignment\": 2756, \"until\": \"2022-06-02\", \"forUser\": 12313 }' \\\n     localhost:3000/api/v1//instructors/yourname@gmail.com/courses/test%20course/students/12313/extensions\nDates can be given in the format “2021-06-30T21:40:00Z”, for UTC time, or in the format “2022-01-01 10:10” or simply “2022-01-01”, in which case the date will assume the time zone associated with the course.\nThe template for the POST JSON is:\n{\n  \"onAsssignment\": ...,\n  \"until\": ...,\n  \"forUser\": ...,\n}\nwhere the user field must the userId of the student, the contents of the userId field of the data returned by GET https://carnap.io/api/v1/instructors/:instructorIdent/courses/:courseTitle/students/:studentId, not the contents of the id field returned by that GET request.\nResult\nThe ID of the new document:\n3\nor an error is returned as an encoded JSON string.\n\n\n\n28.4.2.0.7 GET https://carnap.io/api/v1/instructors/:instructorIdent/courses/:courseTitle/students/:studentId/accomodations\n\n\nRetrieves a list of accommodations active for the student with id :studentId\n\nSo if the student’s time allowed on exams is (3 × STANDARD TIME) + 0 minutes, and they have their due-dates extended by one hour, then the result will be:\n{\n  \"timeFactor\": 3,\n  \"timeExtraMinutes\": 0,\n  \"forUser\": 1314,\n  \"id\": 62,\n  \"dateExtraHours\": 1,\n  \"forCourse\": 121\n}\n\n\n\n28.4.2.0.8 PATCH https://carnap.io/api/v1/instructors/:instructorIdent/courses/:courseTitle/students/:studentId/accomodations\n\n\nModifies the accommodations active for the student with id :studentId\n\nFor example:\nrq('PATCH', '/instructors/yourname@gmail.com/courses/test course/students/11231/accomodations',\n    json={\"timeFactor\": \"2\"}).json()\nBash\ncurl -H \"X-API-KEY:YOURAPIKEY\" -X \"PATCH\" \\\n     -H \"Content-Type: application/json\" \\\n     -d '{\"timeFactor\":\"2\"}' \\\n     /instructors/yourname@gmail.com/courses/test%20course/students/11231/accomodations\nThe template for the PATCH JSON (with all fields optional) is:\n{\n  \"timeFactor\": ...,\n  \"timeExtraMinutes\": ...,\n  \"dateExtraHours\": ...,\n}\n\n\n\n28.4.2.0.9 GET https://carnap.io/api/v1/instructors/:instructorIdent/courses/:courseTitle/students/:studentId/assignmentTokens\n\n\nRetrieves a list of all access-restricted assignments that have been accessed by the student with id :studentId, along with access time for each.\n\nRESULT\n[\n  {\n    \"createdAt\": \"2021-06-10T19:10:42.757612899Z\",\n    \"user\": 1,\n    \"id\": 17927,\n    \"assignment\": 3188\n  }\n]\n\n\n\n28.4.2.0.10 DELETE https://carnap.io/api/v1/instructor/:instructorIdent/courses/:courseTitle/students/:studentId/assignmentTokens/:tokenId\n\n\nDeletes the record of a student having accessed an access-restricted assignment, allowing them to e.g. retake an exam for which a certain amount of time was allotted.\n\nRESULT\n\"deleted token\" \n\n\n\n28.4.2.0.11 GET https://carnap.io/api/v1/instructors/:instructorIdent/courses/:courseTitle/assignments\n\n\nRetrieves a list of assignments for a given course.\n\nRESULTS\n[\n  {\n    \"gradeRelease\": \"2021-05-20T19:30:00Z\",\n    \"totalProblems\": null,\n    \"visibleFrom\": \"2021-05-19T17:58:00Z\",\n    \"availability\": null,\n    \"date\": \"2021-05-18T21:41:35.12705102Z\",\n    \"document\": 4293,\n    \"pointValue\": null,\n    \"course\": 258,\n    \"id\": 3276,\n    \"duedate\": \"2021-05-19T19:30:00Z\",\n    \"title\": \"The Hardest Logic Puzzle Ever\",\n    \"visibleTill\": \"2021-06-30T21:40:00Z\",\n    \"assigner\": null,\n    \"description\": null\n  }\n]\nTimes are reported in UTC\n\n\n\n28.4.2.0.12 POST https://carnap.io/api/v1/instructors/:instructorIdent/courses/:courseTitle/assignments\n\n\nCreates a new assignment.\n\nrq('POST', '/instructors/yourname@gmail.com/courses/test course/assignments',\n    json={\n        \"document\": 2756,\n        \"title\": \"A new assignment\",\n        \"due-date\": \"2022-01-01 10:10\",\n    }\n).json()\nBash\ncurl -H \"X-API-KEY:YOURAPIKEY\" \\\n     -H \"Content-Type: application/json\" \\\n     -d '{\"document\": 2756, \"title\": \"A new assignment\", \"due-date\": \"2022-01-01 10:10\"}' \\\n     localhost:3000/api/v1/instructors/yourname@gmail.com/courses/test%20course/assignments\nThe full template for the POST json is\n  {\n    \"gradeRelease\": ...,\n    \"totalProblems\": ...,\n    \"visibleFrom\": ...,\n    \"availability\": ...,\n    \"document\": ...,\n    \"pointValue\": ...,\n    \"duedate\": ...,\n    \"title\": ...,\n    \"visibleTill\": ...,\n    \"description\": ...\n  }\nThe only mandatory fields are document and title. Dates can be given in the format “2021-06-30T21:40:00Z”, for UTC time, or in the format “2022-01-01 10:10” or simply “2022-01-01”, in which case the date will assume the time zone associated with the course.\nRESULT\nThe ID of the new assignment:\n3\nor an error is returned as an encoded JSON string.\n\n\n\n28.4.2.0.13 GET https://carnap.io/api/v1/instructors/:instructorIdent/courses/:courseTitle/assignments/:assignmentId\n\n\nRetrieves the details of the assignment with id :assignmentId .\n\nRESULT\n{\n  \"gradeRelease\": \"2021-05-20T19:30:00Z\",\n  \"totalProblems\": null,\n  \"visibleFrom\": \"2021-05-19T17:58:00Z\",\n  \"availability\": null,\n  \"date\": \"2021-05-18T21:41:35.12705102Z\",\n  \"document\": 4293,\n  \"pointValue\": null,\n  \"course\": 258,\n  \"id\": 3276,\n  \"duedate\": \"2021-05-19T19:30:00Z\",\n  \"title\": \"The Hardest Logic Puzzle Ever\",\n  \"visibleTill\": \"2021-06-30T21:40:00Z\",\n  \"assigner\": null,\n  \"description\": null\n}\n\n\n\n28.4.2.0.14 PATCH https://carnap.io/api/v1/instructors/:instructorIdent/courses/:courseTitle/assignments/:assignmentId\n\n\nModifies the details of the assignment with id :assignmentId .\n\nFor example:\nrq('PATCH', '/instructors/yourname@gmail.com/courses/test course/assignments/1313',\n    json={\"gradeRelease\": \"2022-02-02\"}).json()\nBash\ncurl -H \"X-API-KEY:YOURAPIKEY\" -X \"PATCH\" \\\n     -H \"Content-Type: application/json\" \\\n     -d '{\"gradeRelease\": \"2022-02-02\"}' \\\n     /instructors/yourname@gmail.com/courses/test%20course/assignments/1313\nThe template for the PATCH JSON (with all fields optional) is:\n{\n  \"gradeRelease\": ...,\n  \"totalProblems\": ...,\n  \"visibleFrom\": ...,\n  \"availability\": ...,\n  \"pointValue\": ...,\n  \"duedate\": ...,\n  \"title\": ...,\n  \"visibleTill\": ...,\n  \"description\": ..., \n}\nTo delete the contents of any field, except for title, you can send an explicit null value in the patch for that field.\n\n\n\n28.4.2.0.15 GET https://carnap.io/api/v1/instructors/:instructorIdent/courses/:courseTitle/assignments/:assignmentId/submissions\n\n\nRetrieves a list of all submitted problems for the assignment with id :assignmentId .\n\nRESULT\n[\n  {\n    'problemSubmissionAssignmentId': 3001, \n    'problemSubmissionCorrect': False, \n    'problemSubmissionData': {..depends on problem type..}, \n    'problemSubmissionSource': {'tag': 'Assignment', 'contents': 'AssignmentMetadataKey {unAssignmentMetadataKey = SqlBackendKey {unSqlBackendKey = 3001}}'}, 'problemSubmissionCredit': 1, \n    'problemSubmissionIdent': 'Exercise-24', \n    'problemSubmissionUserId': 10385, \n    'problemSubmissionLateCredit': None, \n    'problemSubmissionType': 'Qualitative', \n    'problemSubmissionTime': '2021-04-26T19:14:06.563900857Z', \n    'problemSubmissionExtra': None\n  }\n]\n\n\n\n28.4.2.0.16 GET https://carnap.io/api/v1/instructors/:instructorIdent/courses/:courseTitle/assignments/:assignmentId/submissions/:studentId\n\n\nRetrieves a list of all submitted problems from the student with id :studentId, for the assignment with id :assignmentId .\n\nRESULT\n[\n  {\n    'problemSubmissionAssignmentId': 3001, \n    'problemSubmissionCorrect': False, \n    'problemSubmissionData': {..depends on problem type..}, \n    'problemSubmissionSource': {'tag': 'Assignment', 'contents': 'AssignmentMetadataKey {unAssignmentMetadataKey = SqlBackendKey {unSqlBackendKey = 3001}}'}, 'problemSubmissionCredit': 1, \n    'problemSubmissionIdent': 'Exercise-24', \n    'problemSubmissionUserId': 10385, \n    'problemSubmissionLateCredit': None, \n    'problemSubmissionType': 'Qualitative', \n    'problemSubmissionTime': '2021-04-26T19:14:06.563900857Z', \n    'problemSubmissionExtra': None\n  }\n]"
  },
  {
    "objectID": "server-configuration.html#authentication",
    "href": "server-configuration.html#authentication",
    "title": "29  Configuring Carnap",
    "section": "29.1 Authentication",
    "text": "29.1 Authentication\nCarnap servers currently require Google authentication to be configured for administration purposes, even if it is not intended to be used by students. (See the LTI 1.3 documentation for details on how to configure LTI authentication, after completing setup).\n\nIs there a way to run Carnap without Google Auth once it’s built without the dev flag? If not, how do you build it without Google Auth if you really just want to play on your laptop?\n\nSetting up Google authentication requires setting up a Google APIs project.\nFirst, create a project in Google’s developer console. Then, create an OAuth2 client ID under Google credentials.\nIt will show up like this:\n\n\n\nimage of the client ID page\n\n\nClick “Create Credentials”. On the client ID page, set an Authorized Redirect URI for APPROOT/auth/page/google/callback, where APPROOT should be replaced by the value of your APPROOT settings variable.\n\n\n\nimage of the authorized redirect URIs page\n\n\n\nThe following didn’t make sense to me and I don’t recall seeing anything about scopes.\n\nOn your OAuth2 Consent Screen tab, no scopes need to be added as Carnap just needs emails to log in.\nOnce you’ve configured all the information on the Google side, fill it in the Carnap settings file:\ngoogle-api-key: \"_env:GOOGLEKEY:&lt;your Google client ID&gt;\"\ngoogle-secret: \"_env:GOOGLESECRET:&lt;your Google secret&gt;\""
  },
  {
    "objectID": "server-configuration.html#footnotes",
    "href": "server-configuration.html#footnotes",
    "title": "29  Configuring Carnap",
    "section": "",
    "text": "Why? PostgreSQL is preferred in industry, and may have some security advantages depending on your server configuration. Sqlite also doesn’t have the same level of support for concurrent writes to the database as PostgreSQL, but Carnap retries database transactions that fail because the database is busy, so this shouldn’t generally cause any trouble in low-traffic scenarios.↩︎"
  }
]